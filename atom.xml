<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SparkParisBlog</title>
  
  <subtitle>仰望天空 脚踏实地 believe in me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sparkparis.github.io/"/>
  <updated>2020-11-25T02:36:55.703Z</updated>
  <id>https://sparkparis.github.io/</id>
  
  <author>
    <name>SparkParis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu中命令总结和配置</title>
    <link href="https://sparkparis.github.io/2020/11/24/config-ubuntu/"/>
    <id>https://sparkparis.github.io/2020/11/24/config-ubuntu/</id>
    <published>2020-11-24T09:47:06.000Z</published>
    <updated>2020-11-25T02:36:55.703Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">ubuntu常用命令总结,ssh安装和配置<a id="more"></a><h3 id="1-关闭防火墙"><a href="#1-关闭防火墙" class="headerlink" title="1 关闭防火墙"></a>1 关闭防火墙</h3><h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><ul><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>执行关闭命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>开机禁用防火墙自启命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>启动防火墙命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/11/24/config-ubuntu/1606047846341.png" alt="1606047846341"></p><ul><li><p>查看开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></li></ul><h4 id="ubunut"><a href="#ubunut" class="headerlink" title="ubunut"></a>ubunut</h4><ul><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable</span><br></pre></td></tr></table></figure></li><li><p>查看防火墙的状态 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure></li><li><p>启用防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-ssh服务-amp-autossh操作"><a href="#2-ssh服务-amp-autossh操作" class="headerlink" title="2 ssh服务&amp;autossh操作"></a>2 ssh服务&amp;autossh操作</h3><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><ul><li><p>安装ssh服务库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li><li><p>检查当前的ssh开启情况( 如果有sshd，则ssh-server已经启动；若仅有agent，则尚未启动； )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e |grep ssh</span><br></pre></td></tr></table></figure><img src="/2020/11/24/config-ubuntu/1606095534388.png" alt="1606095534388" style="zoom:50%;"></li><li><p>开启ssh服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh start</span><br></pre></td></tr></table></figure></li><li><p>若为启动或修改ssh,则修改配置并重启ssh服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;ssh restart</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-通过公网ssh连接内网服务器"><a href="#3-通过公网ssh连接内网服务器" class="headerlink" title="3 通过公网ssh连接内网服务器"></a>3 通过公网ssh连接内网服务器</h3><p>客户端: window10(xshell)</p><p>中转服务器阿里云(ubuntu): root@aliyun_ip</p><p>目标服务器ubuntu18:user3@target_ip</p><h4 id="3-1-目标服务器安装"><a href="#3-1-目标服务器安装" class="headerlink" title="3.1 目标服务器安装"></a>3.1 目标服务器安装</h4><ul><li><p>安装autossh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y autossh</span><br></pre></td></tr></table></figure><ul><li>ssh -fCNR 反向代理</li><li>ssh -fCNL 正向代理</li></ul></li><li><p>命令行配置中转服务器-临时有效（每次开启都需要使用该行命令）具体见以下链接</p><ul><li><a href="https://blog.51cto.com/moerjinrong/2300084" target="_blank" rel="noopener">https://blog.51cto.com/moerjinrong/2300084</a></li><li><a href="https://blog.csdn.net/maguanzhan7939/article/details/107935823?utm_medium=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecase&amp;depth_1-utm_source=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecas" target="_blank" rel="noopener">https://blog.csdn.net/maguanzhan7939/article/details/107935823?utm_medium=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecase&amp;depth_1-utm_source=distribute.pc_feed_404.none-task-blog-BlogCommendFromBaidu-1.nonecas</a></li></ul></li></ul><h2 id="4-nuhup后台运行命令"><a href="#4-nuhup后台运行命令" class="headerlink" title="4.nuhup后台运行命令"></a>4.nuhup后台运行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.在服务器挂脚本xshell退出后依然执行</span><br><span class="line">sudo nohup python app.py &amp;</span><br><span class="line"></span><br><span class="line">2.nohup使用方式</span><br><span class="line">标准使用格式 </span><br><span class="line">nohup COMMAND &amp;</span><br><span class="line">eg：nohup conmand &gt;myfile.txt 2&gt;1 &amp;</span><br><span class="line"></span><br><span class="line">3.xshell运行python命令常用语句</span><br><span class="line">ctrl+c终止程序运行而非暂停</span><br><span class="line">ctrl+z暂停运行并回到shell提示符</span><br><span class="line">bg+command让程序在后台执行</span><br><span class="line">fg+command搬回前台执行</span><br><span class="line">jobs -l查看任务的编号</span><br><span class="line">kill -STOP直接暂停后台任务</span><br><span class="line">kill -CONT直接恢复后台任务</span><br><span class="line">4.读取nohup的文件</span><br><span class="line">tail  -fn 50 nohup.out</span><br></pre></td></tr></table></figure><p><img src="/2020/11/24/config-ubuntu/1606268796489.png" alt="1606268796489"></p><h2 id="5-ubuntu之间scp传输文件"><a href="#5-ubuntu之间scp传输文件" class="headerlink" title="5.ubuntu之间scp传输文件"></a>5.ubuntu之间scp传输文件</h2><ul><li><p>从服务器上下载文件</p><p><code>scp username@servername:/path/filename  /target/local_destination</code></p></li><li><p>上传本地文件到服务器</p><p><code>scp /path/local_filemame username@servername:/path</code></p></li><li><p>从服务器上下载整个目录</p><p><code>scp -r username@servername:remote_dir/ /local_dir</code></p></li><li><p>上传目录到服务器</p><p><code>scp -r /local_dir username@servername:remote_dir</code></p></li></ul><h2 id="6-查看ubuntu硬盘命令"><a href="#6-查看ubuntu硬盘命令" class="headerlink" title="6.查看ubuntu硬盘命令"></a>6.查看ubuntu硬盘命令</h2><ul><li><p>查看硬盘的数量和大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l |grep &quot;Disk &#x2F;dev&#x2F;sd&quot;</span><br></pre></td></tr></table></figure></li><li><p>硬盘型号</p><p><code>sudo hdparm -i /dev/sda |grep &quot;Model&quot;</code></p></li><li><p>查看硬盘的使用情况<code>df -h</code></p></li><li><p>内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">内存：</span><br><span class="line"></span><br><span class="line">卡槽数量：sudo dmidecode -t memory |grep &quot;Number Of Devices&quot; |awk &#39;&#123;print $NF&#125;&#39;或sudo dmidecode -t memory |grep &quot;Associated Memory Slots&quot; |awk &#39;&#123;print $NF&#125;&#39;</span><br><span class="line"></span><br><span class="line">内存数量：sudo dmidecode -t memory |grep -A16 &quot;Memory Device$&quot; |grep &#39;Size:.*MB&#39; |wc -l</span><br><span class="line"></span><br><span class="line">内存型号：</span><br><span class="line"></span><br><span class="line">内存支持类型：sudo dmidecode -t memory |grep -A16 &quot;Memory Device$&quot; |grep &quot;Type:&quot;</span><br><span class="line"></span><br><span class="line">每个内存频率：sudo dmidecode -t memory |grep -A16 &quot;Memory Device$&quot; |grep &quot;Speed:&quot;</span><br><span class="line"></span><br><span class="line">每个内存大小：sudo dmidecode -t memory |grep -A16 &quot;Memory Device$&quot; |grep &quot;Size:&quot;</span><br></pre></td></tr></table></figure></li></ul><p>（5）查看分区情况 <code>fdisk -l</code></p><p>（6）ubuntu中查看系统内存和cpu使用情况<code>top</code></p><h2 id="7-gcc降级切换和使用"><a href="#7-gcc降级切换和使用" class="headerlink" title="7.gcc降级切换和使用"></a>7.gcc降级切换和使用</h2><ul><li><p>ubuntu18gcc降级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gcc降级到4.8</span><br><span class="line">gcc --version</span><br><span class="line"></span><br><span class="line">下载安装4.8</span><br><span class="line">sudo apt-get install gcc-4.8  </span><br><span class="line">sudo apt-get install g++-4.8</span><br><span class="line"></span><br><span class="line">查看安装的gcc版本</span><br><span class="line">ls &#x2F;usr&#x2F;bin&#x2F;gcc*</span><br><span class="line"></span><br><span class="line"> sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-4.8 100</span><br><span class="line"> sudo update-alternatives --config gcc</span><br><span class="line">选择需要的代号</span><br><span class="line">gcc --version查看当前版本</span><br></pre></td></tr></table></figure></li><li><p>ubuntu16安装gcc7.3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r&#x2F;test</span><br><span class="line"></span><br><span class="line">sudo apt-get update </span><br><span class="line"></span><br><span class="line">sudo apt-get install gcc-7</span><br><span class="line"></span><br><span class="line">配置指令，指定优先级</span><br><span class="line">sudo update-alternatives --install &#x2F;usr&#x2F;bin&#x2F;gcc gcc &#x2F;usr&#x2F;bin&#x2F;gcc-7 100</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --config gcc</span><br><span class="line"></span><br><span class="line">查看版本</span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure></li><li><p>gcc版本选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config gcc</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-ubuntu中常用的复制粘贴解压挂在命令"><a href="#8-ubuntu中常用的复制粘贴解压挂在命令" class="headerlink" title="8.ubuntu中常用的复制粘贴解压挂在命令"></a>8.ubuntu中常用的复制粘贴解压挂在命令</h2><ul><li>常看当前文件夹个数：</li></ul><p><code>ls -l | grep &quot;^-&quot; | wc -l</code></p><ul><li>移动文件夹中的文件到另外一个文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> mv -r 源文件夹&#x2F;* 目标文件(采用通配符进行操作)</span><br><span class="line"></span><br><span class="line">或者    mv -r   源文件夹.&#x2F;0085??.png   目标文件夹（？？？通配符）</span><br></pre></td></tr></table></figure><ul><li><p>复制<code>cp -r</code>                        </p></li><li><p>解压压缩文件zip</p><ul><li><p>解压到当前文件夹：<code>unzip test.zip</code></p></li><li><p>解压到指定目录 ：<code>unzip -d /local_dir test.zip</code></p></li><li><p>解压不覆盖已有的文件：<code>unzip -n -d /local_dir test.zip</code></p></li><li><p>查看zip文件中有哪些文件，并不进行解压:<code>unzip -l test.zip</code></p></li><li><p>查看显示的文件列表还包含压缩比率:<code>unzip -v test.zip</code></p></li><li><p>检查zip文件是否损坏:<code>unzip -t test.zip</code></p></li><li><p>将压缩文件test.zip在指定目录tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -o test.zip -d &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
ubuntu常用命令总结,ssh安装和配置
    
    </summary>
    
    
      <category term="Linux&amp;Config" scheme="https://sparkparis.github.io/categories/Linux-Config/"/>
    
    
      <category term="linux" scheme="https://sparkparis.github.io/tags/linux/"/>
    
      <category term="centos" scheme="https://sparkparis.github.io/tags/centos/"/>
    
      <category term="gcc" scheme="https://sparkparis.github.io/tags/gcc/"/>
    
      <category term="scp" scheme="https://sparkparis.github.io/tags/scp/"/>
    
      <category term="ssh" scheme="https://sparkparis.github.io/tags/ssh/"/>
    
      <category term="autossh" scheme="https://sparkparis.github.io/tags/autossh/"/>
    
      <category term="firewall" scheme="https://sparkparis.github.io/tags/firewall/"/>
    
  </entry>
  
  <entry>
    <title>T640 ubuntu18+pytorch+cuda+pipenv安装</title>
    <link href="https://sparkparis.github.io/2020/11/20/config-DL/"/>
    <id>https://sparkparis.github.io/2020/11/20/config-DL/</id>
    <published>2020-11-20T03:10:07.000Z</published>
    <updated>2020-11-25T03:04:05.319Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><a id="more"></a><h2 id="1-驱动安装"><a href="#1-驱动安装" class="headerlink" title="1.驱动安装"></a>1.驱动安装</h2><h3 id="1-1-更换国内源"><a href="#1-1-更换国内源" class="headerlink" title="1.1 更换国内源"></a>1.1 更换国内源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.备份原来的源</span><br><span class="line">sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br><span class="line">2.更换源</span><br><span class="line">sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list (sudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list)</span><br><span class="line">3.修改内容,将下面阿里的源copy</span><br><span class="line"></span><br><span class="line">#  阿里镜像源</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">4.更新并升级</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade  y</span><br></pre></td></tr></table></figure><h3 id="1-2查看显卡信息-显卡驱动安装失败检查项"><a href="#1-2查看显卡信息-显卡驱动安装失败检查项" class="headerlink" title="1.2查看显卡信息(显卡驱动安装失败检查项)"></a>1.2查看显卡信息(显卡驱动安装失败检查项)</h3><ul><li><p>查看是否显卡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep &#39;VGA&#39;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/20/config-DL/1606187887494.png" alt="1606187887494"></p></li><li><p>查看英伟达显卡信息(去<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">官网</a>查看显卡支持的cuda版本)</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i nvidia</span><br></pre></td></tr></table></figure><img src="/2020/11/20/config-DL/1606187155364.png" alt="1606187155364" style="zoom:50%;"><ul><li><p>查看当前版本的内核<code>uname -a</code></p><p><img src="/2020/11/20/config-DL/1606188114919.png" alt="1606188114919"></p></li><li><p>查看详细的内核(有两个内核5.4和5.3)</p><p><img src="/2020/11/20/config-DL/1606188316184.png" alt="1606188316184"></p></li><li><p>检查security boot是否为disable的状态</p></li><li><p><a href="https://blog.csdn.net/qq_30885821/article/details/106760202" target="_blank" rel="noopener">可以更换版本内核</a>(慎重)</p></li></ul><h3 id="1-3-安装显卡驱动"><a href="#1-3-安装显卡驱动" class="headerlink" title="1.3 安装显卡驱动"></a>1.3 安装显卡驱动</h3><ul><li><p>系统自带的显卡驱动不是NVIDIA的，先删除这个驱动 </p><p><code>sudo apt-get remove nvidia-*</code></p></li><li><p>添加Graphic Drivers PPA </p><p><code>sudo add-apt-repository ppa:graphics-drivers/ppa</code></p></li><li><p>查找驱动<code>ubuntu-drivers devices</code></p><img src="/2020/11/20/config-DL/1606123051399.png" alt="1606123051399" style="zoom:50%;"></li><li><p>选择上面显示的驱动recommend,安装方法分为三种:</p><ul><li><p><a href="https://www.nvidia.cn/geforce/drivers/" target="_blank" rel="noopener">官网</a>下载驱动,进入所在目录 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  cd .&#x2F;home</span><br><span class="line">  sudo chmod a+x NVIDIA-Linux-x86_64-430.50.run # 添加可执行权限</span><br><span class="line">  # 禁用ubuntu自带的驱动</span><br><span class="line">  sudo vim &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf </span><br><span class="line">  # 按g跳到最后添加</span><br><span class="line">  blacklist nouveau</span><br><span class="line">  option nouveau modeset&#x3D;0</span><br><span class="line">  # 保存之后退出,执行 </span><br><span class="line">  sudo update-initramfs -u</span><br><span class="line">  # 重启电脑</span><br><span class="line">  sudo reboot</span><br><span class="line">  # 重启之后不要登录查看禁用是否成功,(什么内容都没有表示)</span><br><span class="line">  lsmod | grep nouveau # 没有任何内容输出表示成功</span><br><span class="line">#安装驱动</span><br><span class="line">  sudo .&#x2F;NVIDIA-Linux-x86_64-430.50.run –no-x-check –no-nouveau-check –no-opengl-files</span><br><span class="line">      –no-x-check安装驱动时关闭X服务</span><br><span class="line">      –no-nouveau-check 安装驱动时禁用nouveau</span><br><span class="line">      –no-opengl-files 只安装驱动文件，不安装OpenGL文件</span><br><span class="line">      重启，并不会出现循环登录的问题</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可能出现的问题:</p><ul><li>Ubuntu系统登录界面变大，并且循环输入正确密码无法进入桌面的解决方案@<a href="https://blog.csdn.net/qq_36427732/article/details/80914653" target="_blank" rel="noopener">https://blog.csdn.net/qq_36427732/article/details/80914653</a></li></ul></li><li><p>重新启动 <code>sudo reboot</code></p></li><li><p>查看安装是否成功<code>nvidia-smi</code></p><img src="/2020/11/20/config-DL/1606187323642.png" alt="1606187323642" style="zoom:33%;"></li></ul><h2 id="2-检查gcc-详细使用见另外一篇博客"><a href="#2-检查gcc-详细使用见另外一篇博客" class="headerlink" title="2.检查gcc(详细使用见另外一篇博客)"></a>2.检查gcc(详细使用见另外一篇博客)</h2><ul><li><p>检查gcc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure></li></ul><img src="/2020/11/20/config-DL/1606187443513.png" alt="1606187443513" style="zoom:50%;"><ul><li><p>安装gcc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get   #版本7.3.0 或者 7.4.0</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-安装CUDA10-1-CUDNN7-5-1"><a href="#3-安装CUDA10-1-CUDNN7-5-1" class="headerlink" title="3.安装CUDA10.1+CUDNN7.5.1"></a>3.安装CUDA10.1+CUDNN7.5.1</h2><ul><li><a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">cuda官网</a>下载(需要注册账户)</li></ul><p><img src="/2020/11/20/config-DL/1606273407164.png" alt="1606273407164"></p><ul><li><p>下载并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Run &#96;sudo sh cuda_10.1.168_418.67_linux.run&#96; # 安装的时候注意在是否安装drive处选择no</span><br></pre></td></tr></table></figure></li><li><p>安装完成之后设置环境变量,终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br><span class="line">nvcc --version</span><br></pre></td></tr></table></figure><p>输入内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;lib64</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;cuda-9.0&#x2F;bin</span><br><span class="line">export CUDA_HOME&#x3D;$CUDA_HOME:&#x2F;usr&#x2F;local&#x2F;cuda-9.0</span><br></pre></td></tr></table></figure></li><li><p>cuda版本查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l &#x2F;usr&#x2F;local | grep cuda</span><br></pre></td></tr></table></figure><p>注意可以安装多个版本的cuda</p></li><li><p>查看详细的版本号</p><ul><li>方式1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvcc --version </span><br><span class="line"># 若没有找到输入</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;bin&#x2F;nvcc --version</span><br><span class="line"># 若报错路径没有找到表示nvcc没有安装进行安装</span><br><span class="line">sudo apt install nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure><ul><li>方式2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;version.txt</span><br></pre></td></tr></table></figure><ul><li><p>如果安装了多个版本的cuda,通过修改多个软连接的方式来切换版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -snf &#x2F;usr&#x2F;local&#x2F;cuda-8.0 &#x2F;usr&#x2F;local&#x2F;cuda</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-cudnn安装7-5-1"><a href="#4-cudnn安装7-5-1" class="headerlink" title="4 cudnn安装7.5.1"></a>4 cudnn安装7.5.1</h2><ul><li><p><a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">官网下载</a>查找驱动对应的版本</p><img src="/2020/11/20/config-DL/1606202260548.png" alt="1606202260548" style="zoom:50%;"></li><li><p>下载之后需要将后缀更改为tgz然后在进行解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv cudnn-9.1-linux-x64-v7.solitairetheme8 cudnn-7.0.5.tgz</span><br><span class="line">tar -xvzf cudnn-7.0.5.tgz</span><br></pre></td></tr></table></figure><p>注意这里下载的库不需要编译, 只需要将解压缩出来的so库和头文件拷贝到系统目录下即可。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo cp cuda&#x2F;include&#x2F;cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;</span><br><span class="line">sudo cp cuda&#x2F;lib64&#x2F;libcudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;</span><br><span class="line">sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h </span><br><span class="line">sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn*</span><br></pre></td></tr></table></figure></li><li><p>检车是否安装成功（出现对应的版本信息说明ok）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-pipenv安装虚拟环境"><a href="#5-pipenv安装虚拟环境" class="headerlink" title="5.pipenv安装虚拟环境"></a>5.pipenv安装虚拟环境</h2><ul><li><p>安装pipenv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># pip3命令不存在先安装(存在略过)</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line"># 查看virtualenv是否存在</span><br><span class="line">virtualenv --version</span><br><span class="line"># 安装virtualenv和virtualenvwrapper</span><br><span class="line">sudo pip3 install virtualenv</span><br><span class="line">sudo pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p><img src="/2020/11/20/config-DL/1606207755895.png" alt="1606207755895"></p></li><li><p>查看virtualenvwrapper下载安装后的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which virtualenvwrapper.sh</span><br><span class="line">which python3</span><br></pre></td></tr></table></figure><p><img src="/2020/11/20/config-DL/1606207865752.png" alt="1606207865752"></p></li></ul><p><img src="/2020/11/20/config-DL/1606207923494.png" alt="1606207923494"></p><ul><li><p>添加环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><p>在末尾添加路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export VIRTUALENVWRAPPER_PYTHON&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">export WORKON_HOME&#x3D;$HOME&#x2F;.virtualenvs</span><br><span class="line">source &#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></li><li><p>启用设置的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure></li><li><p>测试<code>workon</code>命令</p></li><li><p>安装虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python3 virtualname 或者 mkvirtualenv virtualenvname</span><br></pre></td></tr></table></figure></li><li><p>进入虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon virtualname</span><br></pre></td></tr></table></figure></li><li><p>退出虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon myVenv</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境的另外一种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 创建单独的虚拟环境</span><br><span class="line">virtualenv -p python3 test</span><br><span class="line">source activate &#x2F;test&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure></li></ul><p>两种方式的路径会有所变化:</p><ul><li>第一种方式创建之后的路径:    <code>home/lilei/.virtualenvs/pytorch</code></li><li>第二种方式创建路径:在当前的指定路径下面</li></ul><h2 id="6-安装pytorch"><a href="#6-安装pytorch" class="headerlink" title="6.安装pytorch"></a>6.安装pytorch</h2>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
    
    </summary>
    
    
      <category term="Linux&amp;Config" scheme="https://sparkparis.github.io/categories/Linux-Config/"/>
    
    
      <category term="pytorch" scheme="https://sparkparis.github.io/tags/pytorch/"/>
    
      <category term="ubuntu18" scheme="https://sparkparis.github.io/tags/ubuntu18/"/>
    
      <category term="pipenv" scheme="https://sparkparis.github.io/tags/pipenv/"/>
    
      <category term="dell t640" scheme="https://sparkparis.github.io/tags/dell-t640/"/>
    
      <category term="cuda" scheme="https://sparkparis.github.io/tags/cuda/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch-可视化小结</title>
    <link href="https://sparkparis.github.io/2020/11/05/Pytorch1-%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://sparkparis.github.io/2020/11/05/Pytorch1-%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2020-11-05T02:52:55.000Z</published>
    <updated>2020-11-05T08:08:37.857Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><a id="more"></a><h1 id="1-pytorch可视化"><a href="#1-pytorch可视化" class="headerlink" title="1. pytorch可视化"></a>1. pytorch可视化</h1><h2 id="1-1-torchviz"><a href="#1-1-torchviz" class="headerlink" title="1.1. torchviz"></a>1.1. <a href="https://github.com/szagoruyko/pytorchviz" target="_blank" rel="noopener">torchviz</a></h2><ul><li><p>安装</p><ul><li><p>安装<a href="http://www.graphviz.org/" target="_blank" rel="noopener">graphviz</a>并配置在系统的环境变量(系统-&gt;高级设置-&gt;环境变量-&gt;…./bin</p><ul><li><code>dot -version</code>在命令行窗口中验证是否安装成功</li></ul></li><li><p>python环境中安装 <code>pip install graphviz</code></p></li><li><p>验证出现如下界面表示安装成功</p><img src="/2020/11/05/Pytorch1-%E5%8F%AF%E8%A7%86%E5%8C%96/1604545297169.png" alt="1604545297169" style="zoom:33%;"></li><li><p>python环境中安装<code>- pip install torchviz</code></p></li></ul></li><li><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">from torch import nn</span><br><span class="line">from torchviz import make_dot, make_dot_from_trace</span><br><span class="line"></span><br><span class="line">model &#x3D; nn.Sequential()</span><br><span class="line">model.add_module(&#39;W0&#39;, nn.Linear(8, 16))</span><br><span class="line">model.add_module(&#39;tanh&#39;, nn.Tanh())</span><br><span class="line">model.add_module(&#39;W1&#39;, nn.Linear(16, 1))</span><br><span class="line"></span><br><span class="line">x &#x3D; torch.randn(1, 8)</span><br><span class="line"></span><br><span class="line">vis_graph &#x3D; make_dot(model(x), params&#x3D;dict(model.named_parameters()))</span><br><span class="line">vis_graph.view()  # 会在当前目录下保存一个“Digraph.gv.pdf”文件，并在默认浏览器中打开</span><br><span class="line"></span><br><span class="line"># with torch.onnx.set_training(model, False): # 版本兼容性问题这里的onnx会报错</span><br><span class="line">#     trace, _ &#x3D; torch.jit.get_trace_graph(model, args&#x3D;(x,))</span><br><span class="line"># make_dot_from_trace(trace)</span><br></pre></td></tr></table></figure><img src="/2020/11/05/Pytorch1-%E5%8F%AF%E8%A7%86%E5%8C%96/1604547067648.png" alt="1604547067648" style="zoom:50%;"></li></ul><h2 id="1-2-torchsummary"><a href="#1-2-torchsummary" class="headerlink" title="1.2. torchsummary"></a>1.2. <a href="https://github.com/SparkParis/pytorch-summary" target="_blank" rel="noopener">torchsummary</a></h2><ul><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torchsummary</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from torchsummary import summary</span><br><span class="line">summary(your_model, input_size&#x3D;(channels, H, W))</span><br></pre></td></tr></table></figure></li><li><p>代码实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Net(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv1 &#x3D; nn.Conv2d(1, 10, kernel_size&#x3D;5)</span><br><span class="line">        self.conv2 &#x3D; nn.Conv2d(10, 20, kernel_size&#x3D;5)</span><br><span class="line">        self.conv2_drop &#x3D; nn.Dropout2d()</span><br><span class="line">        self.fc1 &#x3D; nn.Linear(320, 50)</span><br><span class="line">        self.fc2 &#x3D; nn.Linear(50, 10)</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; F.relu(F.max_pool2d(self.conv1(x), 2))</span><br><span class="line">        x &#x3D; F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))</span><br><span class="line">        x &#x3D; x.view(-1, 320)</span><br><span class="line">        x &#x3D; F.relu(self.fc1(x))</span><br><span class="line">        x &#x3D; F.dropout(x, training&#x3D;self.training)</span><br><span class="line">        x &#x3D; self.fc2(x)</span><br><span class="line">        return F.log_softmax(x, dim&#x3D;1)</span><br><span class="line"></span><br><span class="line">device &#x3D; torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;) # PyTorch v0.4.0</span><br><span class="line">model &#x3D; Net().to(device)</span><br><span class="line"></span><br><span class="line">summary(model, (1, 28, 28))</span><br></pre></td></tr></table></figure></li><li><p>结果输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------</span><br><span class="line">        Layer (type)               Output Shape         Param #</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">            Conv2d-1           [-1, 10, 24, 24]             260</span><br><span class="line">            Conv2d-2             [-1, 20, 8, 8]           5,020</span><br><span class="line">         Dropout2d-3             [-1, 20, 8, 8]               0</span><br><span class="line">            Linear-4                   [-1, 50]          16,050</span><br><span class="line">            Linear-5                   [-1, 10]             510</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Total params: 21,840</span><br><span class="line">Trainable params: 21,840</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">Input size (MB): 0.00</span><br><span class="line">Forward&#x2F;backward pass size (MB): 0.06</span><br><span class="line">Params size (MB): 0.08</span><br><span class="line">Estimated Total Size (MB): 0.15</span><br><span class="line">----------------------------------------------------------------</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-3-netron"><a href="#1-3-netron" class="headerlink" title="1.3. netron"></a>1.3. <a href="https://netron.app/" target="_blank" rel="noopener">netron</a></h2><ul><li><p>使用方法:</p><ul><li>1.直接将保存的模型在<a href="https://netron.app/网站中打开即可" target="_blank" rel="noopener">https://netron.app/网站中打开即可</a></li><li>2.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install netron</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第二种方法的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">可视化netron:</span><br><span class="line">pip install netron</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">import torch.nn.functional as F</span><br><span class="line">import torch.onnx</span><br><span class="line"></span><br><span class="line">import netron</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class model(nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(model, self).__init__()</span><br><span class="line">        self.block1 &#x3D; nn.Sequential(</span><br><span class="line">            nn.Conv2d(64, 64, 3, padding&#x3D;1, bias&#x3D;False),</span><br><span class="line">            nn.BatchNorm2d(64),</span><br><span class="line">            nn.ReLU(inplace&#x3D;True),</span><br><span class="line">            nn.Conv2d(64, 32, 1, bias&#x3D;False),</span><br><span class="line">            nn.BatchNorm2d(32),</span><br><span class="line">            nn.ReLU(inplace&#x3D;True),</span><br><span class="line">            nn.Conv2d(32, 64, 3, padding&#x3D;1, bias&#x3D;False),</span><br><span class="line">            nn.BatchNorm2d(64)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.conv1 &#x3D; nn.Conv2d(3, 64, 3, padding&#x3D;1, bias&#x3D;False)  # 64*3*3*3(feature_map&#x2F;filter&#x2F;weight   )</span><br><span class="line">        self.output &#x3D; nn.Sequential(</span><br><span class="line">            nn.Conv2d(64, 1, 3, padding&#x3D;1, bias&#x3D;True),</span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        x &#x3D; self.conv1(x)</span><br><span class="line">        identity &#x3D; x</span><br><span class="line">        x &#x3D; F.relu(self.block1(x) + identity)</span><br><span class="line">        x &#x3D; self.output(x)</span><br><span class="line">        return x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d &#x3D; torch.rand(1, 3, 416, 416)</span><br><span class="line">m &#x3D; model()</span><br><span class="line">o &#x3D; m(d)</span><br><span class="line"></span><br><span class="line">onnx_path &#x3D; &quot;onnx_model_name.onnx&quot;</span><br><span class="line"># 保存导出模型模型</span><br><span class="line">torch.onnx.export(m, d, onnx_path)</span><br><span class="line"># 打开模型显示数据</span><br><span class="line">netron.start(onnx_path)</span><br></pre></td></tr></table></figure><p>运行之后结果显示</p></li></ul><p><img src="/2020/11/05/Pytorch1-%E5%8F%AF%E8%A7%86%E5%8C%96/1604562037021.png" alt="1604562037021"></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
    
    </summary>
    
    
      <category term="Pytorch" scheme="https://sparkparis.github.io/categories/Pytorch/"/>
    
    
      <category term="随笔" scheme="https://sparkparis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="pytorch" scheme="https://sparkparis.github.io/tags/pytorch/"/>
    
      <category term="可视化" scheme="https://sparkparis.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="graph" scheme="https://sparkparis.github.io/tags/graph/"/>
    
      <category term="summary" scheme="https://sparkparis.github.io/tags/summary/"/>
    
      <category term="netron" scheme="https://sparkparis.github.io/tags/netron/"/>
    
  </entry>
  
  <entry>
    <title>win10+anaconda+pytorch+mx350+gpu配置和安装</title>
    <link href="https://sparkparis.github.io/2020/09/13/linux-pytorchconfig/"/>
    <id>https://sparkparis.github.io/2020/09/13/linux-pytorchconfig/</id>
    <published>2020-09-13T02:01:08.000Z</published>
    <updated>2020-09-13T07:46:57.974Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">记录在win10上借助anaconda配置gpu版本的安装和配置过程<a id="more"></a><h1 id="1-anaconda的下载和安装"><a href="#1-anaconda的下载和安装" class="headerlink" title="1.anaconda的下载和安装"></a>1.anaconda的下载和安装</h1><ul><li><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">镜像下载</a></p></li><li><p><a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">官网下载地址</a></p><img src="/2020/09/13/linux-pytorchconfig/1599963754272.png" alt="1599963754272" style="zoom:50%;"></li></ul><h1 id="2-cuda安装"><a href="#2-cuda安装" class="headerlink" title="2.cuda安装"></a>2.cuda安装</h1><ul><li><p>判断是不是有独立显卡(计算机-我的电脑-管理-设备管理器-显示适配器)</p><p><img src="/2020/09/13/linux-pytorchconfig/1599963861977.png" alt="1599963861977"></p></li><li><p>确定显卡支持的cuda版本,(nvidia控制面板-帮助-系统信息-组件)</p><img src="/2020/09/13/linux-pytorchconfig/1599964111046.png" alt="1599964111046" style="zoom:50%;"></li><li><p>下载cuda对应的版本,<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">官网下载</a>- 选择cuda的安装环境</p></li></ul><p><img src="/2020/09/13/linux-pytorchconfig/1599964263064.png" alt="1599964263064"></p><ul><li><p>安装cuda,安装过程选择自定义-取消documentation下visual studio integration,记住安装路劲做path配置</p><img src="/2020/09/13/linux-pytorchconfig/cuda路径.png" alt="cuda路径" style="zoom:50%;"></li><li><p>配置cuda环境变量</p><p><img src="/2020/09/13/linux-pytorchconfig/1599964455450.png" alt="1599964455450"></p></li><li><p>验证cuda是否安装成功</p><p>打开cmd终端-输入nvcc -V</p><p><img src="/2020/09/13/linux-pytorchconfig/1599964528793.png" alt="1599964528793"></p></li></ul><h1 id="3-安装cuDNN"><a href="#3-安装cuDNN" class="headerlink" title="3.安装cuDNN"></a>3.安装cuDNN</h1><ul><li><a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">官网下载</a>必须先注册</li><li><img src="/2020/09/13/linux-pytorchconfig/1599964619924.png" alt="1599964619924"></li><li>解压之后将所有的文件拷贝到cuda文件夹下面</li></ul><h1 id="4-安装pytorch"><a href="#4-安装pytorch" class="headerlink" title="4.安装pytorch"></a>4.安装pytorch</h1><ul><li><p>打开anaconda的prompt终端命令</p><p><img src="/2020/09/13/linux-pytorchconfig/1599964855175.png" alt="1599964855175"></p></li><li><p>打开<a href="https://pytorch.org/" target="_blank" rel="noopener">pytorch官网</a>选择指定的版本,复制安装命令在anaconda中选择并下载,后面就是继续等待,这里有梯子可能会很快</p><img src="/2020/09/13/linux-pytorchconfig/1599964806785.png" alt="1599964806785" style="zoom:33%;"></li><li><p>安装结束</p><img src="/2020/09/13/linux-pytorchconfig/1599964929226.png" alt="1599964929226" style="zoom:33%;"></li><li><p>测试是否安装成功,我在安装过程中出现如下错误,需要单独下载Microsoft Visual C++来进行安装<a href="https://aka.ms/vs/16/release/vc_redist.x64.exe" target="_blank" rel="noopener">下载地址</a>,安装完成之后重启即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">print(torch.__version__)</span><br><span class="line">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/09/13/linux-pytorchconfig/1599963535859.png" alt="1599963535859"></p><p>​    后面可以拿模型过来测试一下看看gpu使用加速时间</p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
记录在win10上借助anaconda配置gpu版本的安装和配置过程
    
    </summary>
    
    
      <category term="Linux&amp;Config" scheme="https://sparkparis.github.io/categories/Linux-Config/"/>
    
    
      <category term="随笔" scheme="https://sparkparis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="pytorch" scheme="https://sparkparis.github.io/tags/pytorch/"/>
    
      <category term="anaconda" scheme="https://sparkparis.github.io/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-高级笔记2</title>
    <link href="https://sparkparis.github.io/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/"/>
    <id>https://sparkparis.github.io/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/</id>
    <published>2020-08-26T10:09:47.667Z</published>
    <updated>2020-03-26T00:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>构造函数和原型,原型链,构造函数的继承,ES5中新增的方法以及对比</p><a id="more"></a><!-- TOC --><ul><li><a href="#1构造函数和原型">1.构造函数和原型</a><ul><li><a href="#11对象的三种创建方式--复习">1.1对象的三种创建方式–复习</a></li><li><a href="#12静态成员和实例成员">1.2静态成员和实例成员</a><ul><li><a href="#121实例成员">1.2.1实例成员</a></li><li><a href="#122静态成员">1.2.2静态成员</a></li></ul></li><li><a href="#13构造函数的问题">1.3构造函数的问题</a></li><li><a href="#14构造函数原型prototype">1.4构造函数原型prototype</a></li><li><a href="#15对象原型">1.5对象原型</a></li><li><a href="#16constructor构造函数">1.6constructor构造函数</a></li><li><a href="#17原型链">1.7原型链</a></li><li><a href="#18构造函数实例和原型对象三角关系">1.8构造函数实例和原型对象三角关系</a></li><li><a href="#19原型链和成员的查找机制">1.9原型链和成员的查找机制</a></li><li><a href="#110原型对象中this指向">1.10原型对象中this指向</a></li><li><a href="#111通过原型为数组扩展内置方法">1.11通过原型为数组扩展内置方法</a></li></ul></li><li><a href="#2继承">2.继承</a><ul><li><a href="#21call">2.1call()</a></li><li><a href="#22子构造函数继承父构造函数中的属性">2.2子构造函数继承父构造函数中的属性</a></li><li><a href="#23借用原型对象继承方法">2.3借用原型对象继承方法</a></li></ul></li><li><a href="#3es5新增方法">3.ES5新增方法</a><ul><li><a href="#31数组方法foreach遍历数组">3.1数组方法forEach遍历数组</a></li><li><a href="#32数组方法filter过滤数组">3.2数组方法filter过滤数组</a></li><li><a href="#33数组方法some">3.3数组方法some</a></li><li><a href="#34筛选商品案例">3.4筛选商品案例</a></li><li><a href="#35some和foreach区别">3.5some和forEach区别</a></li><li><a href="#36trim方法去除字符串两端的空格">3.6trim方法去除字符串两端的空格</a></li><li><a href="#37获取对象的属性名">3.7获取对象的属性名</a></li><li><a href="#38objectdefineproperty">3.8Object.defineProperty</a></li></ul></li></ul><!-- /TOC --><h2 id="1-构造函数和原型"><a href="#1-构造函数和原型" class="headerlink" title="1.构造函数和原型"></a>1.构造函数和原型</h2><h3 id="1-1对象的三种创建方式–复习"><a href="#1-1对象的三种创建方式–复习" class="headerlink" title="1.1对象的三种创建方式–复习"></a>1.1对象的三种创建方式–复习</h3><ol><li>字面量方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li>new关键字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></li><li>构造函数方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">'zs'</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><h3 id="1-2静态成员和实例成员"><a href="#1-2静态成员和实例成员" class="headerlink" title="1.2静态成员和实例成员"></a>1.2静态成员和实例成员</h3><h4 id="1-2-1实例成员"><a href="#1-2-1实例成员" class="headerlink" title="1.2.1实例成员"></a>1.2.1实例成员</h4>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例成员,实例成员只能通过实例化的对象来访问<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line">     <span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.uname);<span class="comment">//实例成员只能通过实例化的对象来访问</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="1-2-2静态成员"><a href="#1-2-2静态成员" class="headerlink" title="1.2.2静态成员"></a>1.2.2静态成员</h4><p>静态成员 在构造函数本身上添加的成员  如下列代码中 sex 就是静态成员,静态成员只能通过构造函数来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line">     <span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Star.sex = <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Star.sex);<span class="comment">//静态成员只能通过构造函数来访问</span></span><br></pre></td></tr></table></figure><h3 id="1-3构造函数的问题"><a href="#1-3构造函数的问题" class="headerlink" title="1.3构造函数的问题"></a>1.3构造函数的问题</h3><p>构造函数方法很好用，但是存在浪费内存的问题。</p><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img1.png" alt></p><h3 id="1-4构造函数原型prototype"><a href="#1-4构造函数原型prototype" class="headerlink" title="1.4构造函数原型prototype"></a>1.4构造函数原型prototype</h3><p>构造函数通过原型分配的函数是所有对象所共享的。</p><p>JavaScript 规定，每一个构造函数都有一个prototype 属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p><p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">'张学友'</span>, <span class="number">19</span>);</span><br><span class="line">ldh.sing();<span class="comment">//我会唱歌</span></span><br><span class="line">zxy.sing();<span class="comment">//我会唱歌</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img7.png" alt></p><h3 id="1-5对象原型"><a href="#1-5对象原型" class="headerlink" title="1.5对象原型"></a>1.5对象原型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 __proto__ 原型的存在。</span><br><span class="line">__proto__对象原型和原型对象 prototype 是等价的</span><br><span class="line">__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img2.png" alt></p><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img3.png" alt></p><h3 id="1-6constructor构造函数"><a href="#1-6constructor构造函数" class="headerlink" title="1.6constructor构造函数"></a>1.6constructor构造函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</span><br><span class="line">constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</span><br><span class="line">一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</span><br></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.uname = uname;</span><br><span class="line">     <span class="keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line"> Star.prototype = &#123;</span><br><span class="line"> <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">   <span class="keyword">constructor</span>: Star, // 手动设置指回原来的构造函数</span><br><span class="line">   sing: function() &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我会演电影'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">'张学友'</span>, <span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zxy)</span><br></pre></td></tr></table></figure><p>以上代码运行结果,设置constructor属性如图:</p><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img8.png" alt>如果未设置constructor属性,如图:</p><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img9.png" alt></p><h3 id="1-7原型链"><a href="#1-7原型链" class="headerlink" title="1.7原型链"></a>1.7原型链</h3><p>​    每一个实例对象又有一个<strong>proto</strong>属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有<strong>proto</strong>属性，这样一层一层往上找就形成了原型链。</p><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img5.png" alt></p><h3 id="1-8构造函数实例和原型对象三角关系"><a href="#1-8构造函数实例和原型对象三角关系" class="headerlink" title="1.8构造函数实例和原型对象三角关系"></a>1.8构造函数实例和原型对象三角关系</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>构造函数的prototype属性指向了构造函数原型对象</span><br><span class="line"><span class="number">2.</span>实例对象是由构造函数创建的,实例对象的__proto__属性指向了构造函数的原型对象</span><br><span class="line"><span class="number">3.</span>构造函数的原型对象的<span class="keyword">constructor</span>属性指向了构造函数,实例对象的原型的<span class="keyword">constructor</span>属性也指向了构造函数</span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img4.png" alt></p><h3 id="1-9原型链和成员的查找机制"><a href="#1-9原型链和成员的查找机制" class="headerlink" title="1.9原型链和成员的查找机制"></a>1.9原型链和成员的查找机制</h3><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有<strong>proto</strong>属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</span><br><span class="line">如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</span><br><span class="line">如果还没有就查找原型对象的原型（Object的原型对象）。</span><br><span class="line">依此类推一直找到 Object 为止（null）。</span><br><span class="line">__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</span><br></pre></td></tr></table></figure><h3 id="1-10原型对象中this指向"><a href="#1-10原型对象中this指向" class="headerlink" title="1.10原型对象中this指向"></a>1.10原型对象中this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    that = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="built_in">console</span>.log(that === ldh);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img6.png" alt></p><h3 id="1-11通过原型为数组扩展内置方法"><a href="#1-11通过原型为数组扩展内置方法" class="headerlink" title="1.11通过原型为数组扩展内置方法"></a>1.11通过原型为数组扩展内置方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">  sum += <span class="keyword">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//此时数组对象中已经存在sum()方法了  可以始终 数组.sum()进行数据的求</span></span><br></pre></td></tr></table></figure><h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h2><h3 id="2-1call"><a href="#2-1call" class="headerlink" title="2.1call()"></a>2.1call()</h3><ul><li>call()可以调用函数</li><li>call()可以修改this的指向,使用call()的时候 参数一是修改后的this指向,参数2,参数3..使用逗号隔开连接</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">     <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'andy'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  fn.call(o, <span class="number">1</span>, <span class="number">2</span>);<span class="comment">//调用了函数此时的this指向了对象o,</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img10.png" alt></p><h3 id="2-2子构造函数继承父构造函数中的属性"><a href="#2-2子构造函数继承父构造函数中的属性" class="headerlink" title="2.2子构造函数继承父构造函数中的属性"></a>2.2子构造函数继承父构造函数中的属性</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1. 父构造函数</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">   <span class="keyword">this</span>.uname = uname;</span><br><span class="line">   <span class="keyword">this</span>.age = age;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age, score</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">  <span class="number">3.</span>使用call方式实现子继承父的属性</span><br><span class="line">  Father.call(<span class="keyword">this</span>, uname, age);</span><br><span class="line">  <span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">'刘德华'</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img11.png" alt></p><h3 id="2-3借用原型对象继承方法"><a href="#2-3借用原型对象继承方法" class="headerlink" title="2.3借用原型对象继承方法"></a>2.3借用原型对象继承方法</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">  <span class="keyword">this</span>.uname = uname;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.money = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">100000</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 2 .子构造函数 </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age, score</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">      Father.call(<span class="keyword">this</span>, uname, age);</span><br><span class="line">      <span class="keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span><br><span class="line">  Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line">  <span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line">  Son.prototype.constructor = Son;</span><br><span class="line">  <span class="comment">// 这个是子构造函数专门的方法</span></span><br><span class="line">  Son.prototype.exam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'孩子要考试'</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">'刘德华'</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure><p>如上代码结果如图:</p><p><img src="/2020/08/26/JavaScript-%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B02/img12.png" alt></p><h2 id="3-ES5新增方法"><a href="#3-ES5新增方法" class="headerlink" title="3.ES5新增方法"></a>3.ES5新增方法</h2><h3 id="3-1数组方法forEach遍历数组"><a href="#3-1数组方法forEach遍历数组" class="headerlink" title="3.1数组方法forEach遍历数组"></a>3.1数组方法forEach遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//参数一是:数组元素</span></span><br><span class="line">      <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">      <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">&#125;)</span><br><span class="line"> <span class="comment">//相当于数组遍历的 for循环 没有返回值</span></span><br></pre></td></tr></table></figure><h3 id="3-2数组方法filter过滤数组"><a href="#3-2数组方法filter过滤数组" class="headerlink" title="3.2数组方法filter过滤数组"></a>3.2数组方法filter过滤数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">88</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index,array</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//参数一是:数组元素</span></span><br><span class="line">   <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">   <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">   <span class="keyword">return</span> value &gt;= <span class="number">20</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">//[66,88] //返回值是一个新数组</span></span><br></pre></td></tr></table></figure><h3 id="3-3数组方法some"><a href="#3-3数组方法some" class="headerlink" title="3.3数组方法some"></a>3.3数组方法some</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">some 查找数组中是否有满足条件的元素 </span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">4</span>];</span><br><span class="line"> <span class="keyword">var</span> flag = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//参数一是:数组元素</span></span><br><span class="line">     <span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line">     <span class="comment">//参数三是:当前的数组</span></span><br><span class="line">     <span class="keyword">return</span> value &lt; <span class="number">3</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag);<span class="comment">//false返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span></span><br></pre></td></tr></table></figure><h3 id="3-4筛选商品案例"><a href="#3-4筛选商品案例" class="headerlink" title="3.4筛选商品案例"></a>3.4筛选商品案例</h3><ol><li><p>定义数组对象数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            pname: <span class="string">'小米'</span>,</span><br><span class="line">            price: <span class="number">3999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">2</span>,</span><br><span class="line">            pname: <span class="string">'oppo'</span>,</span><br><span class="line">            price: <span class="number">999</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">3</span>,</span><br><span class="line">            pname: <span class="string">'荣耀'</span>,</span><br><span class="line">            price: <span class="number">1299</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">4</span>,</span><br><span class="line">            pname: <span class="string">'华为'</span>,</span><br><span class="line">            price: <span class="number">1999</span></span><br><span class="line">        &#125;, ];</span><br></pre></td></tr></table></figure></li><li><p>使用forEach遍历数据并渲染到页面中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span><br><span class="line">  tr.innerHTML = <span class="string">'&lt;td&gt;'</span> + value.id + <span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.pname + <span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="string">'&lt;/td&gt;'</span>;</span><br><span class="line">  tbody.appendChild(tr);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>根据价格筛选数据</p><ol><li><p>获取到搜索按钮并为其绑定点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_price.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用filter将用户输入的价格信息筛选出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">search_price.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> newDate = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//start.value是开始区间</span></span><br><span class="line">        <span class="comment">//end.value是结束的区间</span></span><br><span class="line">      <span class="keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(newDate);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>将筛选出来的数据重新渲染到表格中</p><ol><li><p>将渲染数据的逻辑封装到一个函数中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDate</span>(<span class="params">mydata</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 先清空原来tbody 里面的数据</span></span><br><span class="line">  tbody.innerHTML = <span class="string">''</span>;</span><br><span class="line">  mydata.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span><br><span class="line">    tr.innerHTML = <span class="string">'&lt;td&gt;'</span> + value.id + <span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.pname + <span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="string">'&lt;/td&gt;'</span>;</span><br><span class="line">      tbody.appendChild(tr);</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>将筛选之后的数据重新渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> search_price.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> newDate = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;= end.value;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="built_in">console</span>.log(newDate);</span><br><span class="line">     <span class="comment">// 把筛选完之后的对象渲染到页面中</span></span><br><span class="line">     setDate(newDate);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>根据商品名称筛选</p><ol><li><p>获取用户输入的商品名称</p></li><li><p>为查询按钮绑定点击事件,将输入的商品名称与这个数据进行筛选</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> search_pro.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> arr = [];</span><br><span class="line">     data.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (value.pname === product.value) &#123;</span><br><span class="line">         <span class="comment">// console.log(value);</span></span><br><span class="line">         arr.push(value);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// return 后面必须写true  </span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="comment">// 把拿到的数据渲染到页面中</span></span><br><span class="line">     setDate(arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="3-5some和forEach区别"><a href="#3-5some和forEach区别" class="headerlink" title="3.5some和forEach区别"></a>3.5some和forEach区别</h3><ul><li>如果查询数组中唯一的元素, 用some方法更合适,在some 里面 遇到 return true 就是终止遍历 迭代效率更高</li><li>在forEach 里面 return 不会终止迭代</li></ul><h3 id="3-6trim方法去除字符串两端的空格"><a href="#3-6trim方法去除字符串两端的空格" class="headerlink" title="3.6trim方法去除字符串两端的空格"></a>3.6trim方法去除字符串两端的空格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'   hello   '</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()）  <span class="comment">//hello 去除两端空格</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">'   he l l o   '</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()）  <span class="comment">//he l l o  去除两端空格</span></span><br></pre></td></tr></table></figure><h3 id="3-7获取对象的属性名"><a href="#3-7获取对象的属性名" class="headerlink" title="3.7获取对象的属性名"></a>3.7获取对象的属性名</h3><p>Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     id: <span class="number">1</span>,</span><br><span class="line">     pname: <span class="string">'小米'</span>,</span><br><span class="line">     price: <span class="number">1999</span>,</span><br><span class="line">     num: <span class="number">2000</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//[id，pname,price,num]</span></span><br></pre></td></tr></table></figure><h3 id="3-8Object-defineProperty"><a href="#3-8Object-defineProperty" class="headerlink" title="3.8Object.defineProperty"></a>3.8Object.defineProperty</h3><p>Object.defineProperty设置或修改对象中的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;</span><br><span class="line">value:修改或新增的属性的值,</span><br><span class="line">writable:<span class="literal">true</span>/<span class="literal">false</span>,<span class="comment">//如果值为false 不允许修改这个属性值</span></span><br><span class="line">enumerable: <span class="literal">false</span>,<span class="comment">//enumerable 如果值为false 则不允许遍历</span></span><br><span class="line">        configurable: <span class="literal">false</span>  <span class="comment">//configurable 如果为false 则不允许删除这个属性 属性是否可以被删除或是否可以再次修改特性</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;构造函数和原型,原型链,构造函数的继承,ES5中新增的方法以及对比&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://sparkparis.github.io/categories/JavaScript/"/>
    
    
      <category term="前端" scheme="https://sparkparis.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://sparkparis.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>八大算法的整体和汇总</title>
    <link href="https://sparkparis.github.io/2020/06/20/%E7%AE%97%E6%B3%952/"/>
    <id>https://sparkparis.github.io/2020/06/20/%E7%AE%97%E6%B3%952/</id>
    <published>2020-06-20T10:00:50.000Z</published>
    <updated>2020-07-03T14:11:16.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">算法的详细分模块学习<a id="more"></a><h1 id="八大算法"><a href="#八大算法" class="headerlink" title="八大算法"></a>八大算法</h1><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200702061118045.png" alt="image-20200702061118045" style="zoom:80%;"><ul><li>见链接<a href="https://juejin.im/post/5ab9ae9cf265da23830ae617" target="_blank" rel="noopener">https://juejin.im/post/5ab9ae9cf265da23830ae617</a></li><li><a href="https://juejin.im/post/58c9d5fb1b69e6006b686bce#heading-14" target="_blank" rel="noopener">https://juejin.im/post/58c9d5fb1b69e6006b686bce#heading-14</a></li></ul><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623213938607.png" alt="image-20200623213938607" style="zoom:80%;"><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a>1. 时间复杂度</h2><p>时间复杂度来表示执行的次数,,树容量N有关,下面详细讲解基本排序的时间复杂度</p><h3 id="1-1-冒泡排序"><a href="#1-1-冒泡排序" class="headerlink" title="1.1 冒泡排序"></a>1.1 冒泡排序</h3><p><strong>思路</strong></p><ul><li>最外层遍历将最大的元素放在最后</li><li>内层遍历前面的最值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">  var temp &#x3D; arr[i];</span><br><span class="line">  arr[i] &#x3D; arr[j];</span><br><span class="line">  arr[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;1.冒泡排序</span><br><span class="line">&#x2F;*</span><br><span class="line">每次都将最大值放在最优的位置</span><br><span class="line">*&#x2F;</span><br><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">  if (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  for (var i &#x3D; arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">    &#x2F;&#x2F;内部选出交换比较出最大值</span><br><span class="line">    for (var j &#x3D; 0; j &lt; i; j++) &#123;</span><br><span class="line">      if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">        &#x2F;&#x2F;交换位置</span><br><span class="line">        swap(arr, j, j + 1)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度的分析O(n^2)</li><li>空间:O(1)</li><li>稳定</li></ul><h3 id="1-2-选择排序"><a href="#1-2-选择排序" class="headerlink" title="1.2 选择排序"></a>1.2 选择排序</h3><p><strong>思路</strong></p><p>每次都从后面元素中选出最值存放在前面,依次类推,两层循环嵌套</p><p><strong>时间复杂度</strong>==O(n^2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;2.选择排序</span><br><span class="line">&#x2F;*</span><br><span class="line">选择排序就是将后面元素的最值放在前面,最外面的循环从0开始,里面的循环找最值</span><br><span class="line">*&#x2F;</span><br><span class="line">function selectSort(arr) &#123;</span><br><span class="line">  if (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F;记录当前最小位置的索引</span><br><span class="line">    var minIndex &#x3D; i;</span><br><span class="line">    for (var j &#x3D; i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">      minIndex &#x3D; arr[j] &lt; arr[minIndex] ? j : minIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;找到最小值之后和当前排序好的指定位置交换,每次找到后面最小值的值依次从0开始的位置放置</span><br><span class="line">    swap(arr, i, minIndex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度:O(N^2)</li><li>空间复杂度:O(1)</li><li>不稳定</li></ul><h3 id="1-3-插入排序"><a href="#1-3-插入排序" class="headerlink" title="1.3 插入排序"></a>1.3 插入排序</h3><p><strong>思路</strong><br>插入排序 :从第一位开始排序,始终保证前面的元素是排好序的,每次从后面未排的元素中依次取出元素和拍好序的元素进行对比并插入到排好序的元素中<br><strong>插入排序和数组是否有序有直接关系</strong></p><p><strong>时间复杂度</strong></p><ul><li>插入排序和是否有序有关<ul><li>有序:O(n)</li><li><strong>逆序:N*交换次数N=O(n^2)</strong></li></ul></li><li>时间复杂度以最坏情况下为基础</li><li>不稳定</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 3.插入排序</span><br><span class="line">&#x2F;*</span><br><span class="line">插入排序 :从第一位开始排序,始终保证前面的元素是排好序的,每次从后面未排的元素中依次取出元素和拍好序的元素进行对比并插入到排好序的元素中</span><br><span class="line">插入排序和数组是否有序有直接关系</span><br><span class="line">*&#x2F;</span><br><span class="line">function InsertSort(arr) &#123;</span><br><span class="line">  if (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;外层遍历依次递增,表示新插入到有序队列中的元素</span><br><span class="line">  for (var i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F;内层遍历主要是通过一次添加后面的元素和前面排好序的元素进行比较,满足条件的情况下进行交换,从后往前两两比较</span><br><span class="line">    for (var j &#x3D; i - 1; j &gt;&#x3D; 0 &amp;&amp; arr[j] &gt; arr[j + 1]; j--) &#123;</span><br><span class="line">      &#x2F;&#x2F;新插入的元素小于前面的元素交换,一次比较,直到有序</span><br><span class="line">      swap(arr, j, j + 1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-排序的对数器"><a href="#1-4-排序的对数器" class="headerlink" title="1.4 排序的对数器"></a>1.4 排序的对数器</h3><ul><li>test函数<ul><li>testTime:测试次数</li><li>size:数组的长度</li><li>value:数值范围</li><li>sortType:排序算法的类型</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">const &#123; bubbleSort, InsertSort, selectSort &#125; &#x3D; require(&#39;.&#x2F;01_sort&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4 对数器(解决case)来测试代码是否合适</span><br><span class="line">function generateSort(size, value) &#123;</span><br><span class="line">  &#x2F;*</span><br><span class="line">  size:生成数组的长度</span><br><span class="line">  value:生成数组的数值范围</span><br><span class="line">  *&#x2F;</span><br><span class="line">  &#x2F;&#x2F;1.生成随机的数组长度(0-size)</span><br><span class="line">  var arr &#x3D; new Array(parseInt(Math.random() * (size + 1)));</span><br><span class="line">  &#x2F;&#x2F;为每个数值生成随机的数</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F; 为数组的每个数值生成随机的数值,相减有正负之分,</span><br><span class="line">    arr[i] &#x3D; parseInt(Math.random() * (value + 1)) - parseInt(Math.random() * (value + 1));</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过数组对数器结合一个系统提供的绝对正确的方法</span><br><span class="line">function sort(arr) &#123;</span><br><span class="line">  arr.sort((a, b) &#x3D;&gt; a - b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 克隆数组</span><br><span class="line">function cloneArr(arr) &#123;</span><br><span class="line">  var clone &#x3D; [];</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    clone[i] &#x3D; arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  return clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 比较两个数组是否相等</span><br><span class="line">function isEqual(arr1, arr2) &#123;</span><br><span class="line">  if ((arr1 &#x3D;&#x3D; null &amp;&amp; arr2 !&#x3D; null) || (arr1 !&#x3D; null &amp;&amp; arr2 &#x3D;&#x3D; null)) &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">  if (arr1 &#x3D;&#x3D; null &amp;&amp; arr2 &#x3D;&#x3D; null) return true</span><br><span class="line">  if (arr1.length !&#x3D; arr2.length) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F;数值不相等则返回false</span><br><span class="line">    if (arr1[i] !&#x3D; arr2[i]) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;执行到最后结果都满足</span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过计数器来测试当前的三个排序算法</span><br><span class="line">function test(testTime, size, value, sortType) &#123;</span><br><span class="line">  var testTime &#x3D; testTime;</span><br><span class="line">  var size &#x3D; size;</span><br><span class="line">  var value &#x3D; value;</span><br><span class="line">  success &#x3D; true</span><br><span class="line">  for (var i &#x3D; 0; i &lt; testTime; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F;生成随机样本发生器</span><br><span class="line">    var arr &#x3D; generateSort(size, value)</span><br><span class="line">    var arr1 &#x3D; cloneArr(arr)</span><br><span class="line">    var arr3 &#x3D; cloneArr(arr)</span><br><span class="line">    &#x2F;&#x2F;通过绝对正确的排序检测arr</span><br><span class="line">    sort(arr);</span><br><span class="line">    &#x2F;&#x2F;测试自己写的排序算法</span><br><span class="line">    sortType(arr1)</span><br><span class="line">    &#x2F;&#x2F;比较结果是否相同</span><br><span class="line">    if (!isEqual(arr, arr1)) &#123;</span><br><span class="line">      &#x2F;&#x2F;只要有一个不一样说明测试不通过直接返回</span><br><span class="line">      console.log(arr3);&#x2F;&#x2F;出错打印出错的样本</span><br><span class="line">      success &#x3D; false</span><br><span class="line">      break</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(success ? &#39;测试通过&#39; : &#39;测试失败&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="1-时间复杂度-1"><a href="#1-时间复杂度-1" class="headerlink" title="1 时间复杂度"></a>1 时间复杂度</h2><h3 id="1-1-递归通用的时间复杂度分析-Master定理"><a href="#1-1-递归通用的时间复杂度分析-Master定理" class="headerlink" title="1.1 递归通用的时间复杂度分析(Master定理)"></a>1.1 递归通用的时间复杂度分析(Master定理)</h3><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200622090154060.png" alt="image-20200622090154060"></p><ul><li>a:表示一共这个过程发生了多少次,就看代码中发生的次数(<strong>也就是递归调用的次数</strong>),不用看执行的次数</li><li>N/b:子样本量</li><li>T(N/b):子样本量的时间复杂度</li><li>O(N^d):除去子过程调用之外,剩下过程的时间复杂度是多少</li></ul><p><strong>master公式的使用范围:划分子过程的规模是一样的,也就是每次b的值是一样,只是发生的次数a不一样</strong></p><p><a href="https://blog.gocalf.com/algorithm-complexity-and-master-theorem" target="_blank" rel="noopener">计算时间复杂度的网址</a></p><h2 id="2-复杂度练习"><a href="#2-复杂度练习" class="headerlink" title="2 复杂度练习"></a>2 复杂度练习</h2><h3 id="2-1-递归求解数组中的最大"><a href="#2-1-递归求解数组中的最大" class="headerlink" title="2.1 递归求解数组中的最大"></a>2.1 递归求解数组中的最大</h3><p><strong>思路</strong></p><ul><li>先求解左边的最大值,</li><li>在求解右边的最大值</li><li>在求左右两边的最大值</li><li>递归结束的条件是:start==end</li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过递归实现求解最大值</span><br><span class="line">&#x2F;*</span><br><span class="line">递归实现的过程就是不断压栈的过程,每次递归都会将所有的数据都压入栈中,还原现场</span><br><span class="line">*&#x2F;</span><br><span class="line">function getMax(arr, start, end) &#123;</span><br><span class="line">  if (start &#x3D;&#x3D; end) &#123;</span><br><span class="line">    &#x2F;&#x2F;当只有一个数的时候,此时直接返回</span><br><span class="line">    return arr[start]</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 求左右两边的最大值,然后进行不断划分</span><br><span class="line">  var mid &#x3D; parseInt((start + end) &#x2F; 2)</span><br><span class="line"></span><br><span class="line">  var left &#x3D; getMax(arr, start, mid)</span><br><span class="line">  var right &#x3D; getMax(arr, mid + 1, end)</span><br><span class="line">  &#x2F;&#x2F;返回两边的最大值</span><br><span class="line">  return Math.max(left, right)</span><br><span class="line">&#125;</span><br><span class="line">var arr &#x3D; [3, 4, 2, 5, 6, 7, 9]</span><br><span class="line">console.log(getMax(arr, 0, arr.length - 1));</span><br></pre></td></tr></table></figure><ul><li><p>时间复杂度分析(满足master)</p><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200622091911926.png" alt="image-20200622091911926"></p><p>logb(a)=log2(2)=1&gt;0,所以O(N^(logb(a)))=O(N)</p></li></ul><h3 id="2-2-归并排序-采用的是分治的思想"><a href="#2-2-归并排序-采用的是分治的思想" class="headerlink" title="2.2 归并排序(采用的是分治的思想)"></a>2.2 归并排序(采用的是分治的思想)</h3><p><strong>分析</strong></p><ul><li>第一，归并排序是原地排序算法吗 ？ 这是因为归并排序的合并函数，在合并两个有序数组为一个有序数组时，需要借助额外的存储空间。实际上，尽管每次合并操作都需要申请额外的内存空间，但在合并完成之后，临时开辟的内存空间就被释放掉了。在任意时刻，CPU 只会有一个函数在执行，也就只会有一个临时的内存空间在使用。临时内存空间最大也不会超过 n 个数据的大小，所以空间复杂度是 O(n)。所以，<strong>归并排序不是原地排序算法</strong>。</li><li>第二，归并排序是稳定的排序算法吗 ？ merge 方法里面的 left[0] &lt;= right[0] ，保证了值相同的元素，在合并前后的先后顺序不变。<strong>归并排序是一种稳定的排序方法</strong>。</li><li>第三，归并排序的时间复杂度是多少 ？ 从效率上看，归并排序可算是排序算法中的<code>佼佼者</code>。假设数组长度为 n，那么拆分数组共需 logn 步, 又每步都是一个普通的合并子数组的过程，时间复杂度为 O(n)，故其综合时间复杂度为 O(nlogn)。 <strong>最佳情况：T(n) = O(nlogn)。 最差情况：T(n) = O(nlogn)。 平均情况：T(n) = O(nlogn)。</strong></li></ul><p><strong>思路</strong></p><ul><li><p>先数组划分为两部分</p></li><li><p>左右两侧排好序</p></li><li><p>通过外排,增加临时存储数组temp</p></li><li><p>添加指针分别指向有序的两部分数组,从头到尾依次比较,谁小谁将值存储在temp中并一定指针,直到有一个先到数组结尾,归并结束</p></li><li><p>判断两个数组是否同时到达数组结尾,没有直接将后面的元素直接添加到temp中,归并排序结束</p><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200622095909502.png" alt="image-20200622095909502"></p></li></ul><p><strong>分析时间复杂度</strong></p><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200622103907577.png" alt="image-20200622103907577"></p><p><strong>空间复杂度</strong></p><ul><li>占用了arr数组长度,<strong>O(N)</strong></li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">function mergeSort(arr) &#123;</span><br><span class="line">  if (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  sortProcess(arr, 0, arr.length - 1)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;子数组排序</span><br><span class="line">function sortProcess(arr, left, right) &#123;</span><br><span class="line">  if (left &#x3D;&#x3D; right) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  var mid &#x3D; parseInt((left + right) &#x2F; 2);</span><br><span class="line">  sortProcess(arr, left, mid)&#x2F;&#x2F;T(N&#x2F;2)</span><br><span class="line">  sortProcess(arr, mid + 1, right)&#x2F;&#x2F;T(N&#x2F;2)</span><br><span class="line">  merge(arr, left, mid, right)&#x2F;&#x2F;O(N)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;归并</span><br><span class="line">function merge(arr, left, mid, right) &#123;</span><br><span class="line">  var temp &#x3D; []</span><br><span class="line">  leftIndex &#x3D; left;</span><br><span class="line">  rightIndex &#x3D; mid + 1;</span><br><span class="line">  while (leftIndex &lt;&#x3D; mid &amp;&amp; rightIndex &lt;&#x3D; right) &#123;</span><br><span class="line">    temp.push(arr[leftIndex] &lt; arr[rightIndex] ? arr[leftIndex++] : arr[rightIndex++])</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;长出来的部分直接添加到最后</span><br><span class="line">  while (leftIndex &lt;&#x3D; mid) &#123;</span><br><span class="line">    temp.push(arr[leftIndex++])</span><br><span class="line">  &#125;</span><br><span class="line">  while (rightIndex &lt;&#x3D; right) &#123;</span><br><span class="line">    temp.push(arr[rightIndex++]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;通过循环将temp保存在arr</span><br><span class="line">  for (var i &#x3D; 0; i &lt; temp.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F; 注意从left的位置开始重新复值给arr</span><br><span class="line">    arr[left++] &#x3D; temp[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-小和问题-归并排序的思想来解决"><a href="#2-3-小和问题-归并排序的思想来解决" class="headerlink" title="2.3 小和问题(归并排序的思想来解决)"></a>2.3 小和问题(归并排序的思想来解决)</h3><ul><li>在一个数组中，每个数左边比当前数小的数累加起来，叫做这个数组的小和，求一个数组的小和</li></ul><p><strong>思路</strong></p><p>(1)直接遍历，时间复杂度为O（N^2）</p><p>(2)通过归并排序</p><p><strong>分析</strong></p><p>[1,3,4,2,5]</p><p>1:左边比1小的数:没有</p><p>3：左边比3小的数：1</p><p>4…..:1,3,</p><p>2,…..: 1</p><p>5…..:1,3,4</p><p>小和=1+1+3++1+1+3+4=16</p><ul><li>在归并的过程中,如果左边比右边的小,产生小和,(右边的当前指向到末尾有几个值就有左边所指位置的值*指的个数个小和)</li></ul><p><strong>问题的转换:求当前位置的值左边比他自身小的值====求当前值右边比他大的值</strong></p><p><strong>注意归并排序是没有返回值的,小和问题和逆序问题只是在归并的基础了多了求和问题和返回值问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这里借助归并排序来解决小和问题</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.小数和</span><br><span class="line">function smallSum(arr) &#123;</span><br><span class="line">  if (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;</span><br><span class="line">    return 0</span><br><span class="line">  &#125;</span><br><span class="line">  return mergeSort(arr, 0, arr.length - 1)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;子数组排序</span><br><span class="line">function mergeSort(arr, left, right) &#123;</span><br><span class="line">  if (left &#x3D;&#x3D; right) &#123;</span><br><span class="line">    return 0</span><br><span class="line">  &#125;</span><br><span class="line">  var mid &#x3D; parseInt((left + right) &#x2F; 2);</span><br><span class="line">  return mergeSort(arr, left, mid) +</span><br><span class="line">    mergeSort(arr, mid + 1, right) +</span><br><span class="line">    merge(arr, left, mid, right)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;归并</span><br><span class="line">function merge(arr, left, mid, right) &#123;</span><br><span class="line">  var temp &#x3D; []</span><br><span class="line">  leftIndex &#x3D; left;</span><br><span class="line">  rightIndex &#x3D; mid + 1;</span><br><span class="line">  &#x2F;&#x2F; 保存小数和,和归并排序相比多的代码</span><br><span class="line">  var result &#x3D; 0;</span><br><span class="line">  while (leftIndex &lt;&#x3D; mid &amp;&amp; rightIndex &lt;&#x3D; right) &#123;</span><br><span class="line">  &#x2F;&#x2F;归并排序相比多的代码</span><br><span class="line">    result +&#x3D; arr[leftIndex] &lt; arr[rightIndex] ? (right - rightIndex + 1) * arr[leftIndex] : 0;</span><br><span class="line">    temp.push(arr[leftIndex] &lt; arr[rightIndex] ? arr[leftIndex++] : arr[rightIndex++])</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;长出来的部分直接添加到最后</span><br><span class="line">  while (leftIndex &lt;&#x3D; mid) &#123;</span><br><span class="line">    temp.push(arr[leftIndex++])</span><br><span class="line">  &#125;</span><br><span class="line">  while (rightIndex &lt;&#x3D; right) &#123;</span><br><span class="line">    temp.push(arr[rightIndex++]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;通过循环将temp保存在arr</span><br><span class="line">  for (var i &#x3D; 0; i &lt; temp.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F; 注意从left的位置开始重新复值给arr</span><br><span class="line">    arr[left++] &#x3D; temp[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br><span class="line">var arr &#x3D; [1, 3, 4, 2, 5]</span><br><span class="line">console.log(smallSum(arr));</span><br></pre></td></tr></table></figure><h3 id="2-4-逆序问题-归并排序思想解决"><a href="#2-4-逆序问题-归并排序思想解决" class="headerlink" title="2.4 逆序问题(归并排序思想解决)"></a>2.4 逆序问题(归并排序思想解决)</h3><p><strong>题目</strong></p><p>求数组中存在的逆序对,这里和小数和正好相反(<strong>只需修改左边的数比右边的数大,改变指针的走向,将大数归并</strong>)</p><p><strong>思路</strong></p><p>(1) 遍历,事件复杂度:O(N^2)</p><p>(2)归并排序的时间复杂度:nlogn</p><p><strong>归并排序快的原因是:去除了重复的操作,在归并的过程中</strong></p><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623081639570.png" alt="image-20200623081639570"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.归并排序来解决逆序对的问题</span><br><span class="line">function reversePair(arr) &#123;</span><br><span class="line">  if (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;</span><br><span class="line">    return 0</span><br><span class="line">  &#125;</span><br><span class="line">  return mergeSort(arr, 0, arr.length - 1)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;子数组排序</span><br><span class="line">function mergeSort(arr, left, right) &#123;</span><br><span class="line">  &#x2F;&#x2F;递归终止的条件</span><br><span class="line">  if (left &#x3D;&#x3D; right) &#123;</span><br><span class="line">    return 0</span><br><span class="line">  &#125;</span><br><span class="line">  var mid &#x3D; (left + right) &gt;&gt; 1;</span><br><span class="line">  return mergeSort(arr, left, mid) +</span><br><span class="line">    mergeSort(arr, mid + 1, right) +</span><br><span class="line">    merge(arr, left, mid, right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;归并</span><br><span class="line">function merge(arr, left, mid, right) &#123;</span><br><span class="line">  var temp &#x3D; []</span><br><span class="line">  leftIndex &#x3D; mid;</span><br><span class="line">  rightIndex &#x3D; right;</span><br><span class="line">  &#x2F;&#x2F;暂存数组的长度</span><br><span class="line">  tempIndex &#x3D; right - left;</span><br><span class="line">  &#x2F;&#x2F;保存逆序数</span><br><span class="line">  var count &#x3D; 0</span><br><span class="line">  while (leftIndex &gt;&#x3D; 0 &amp;&amp; rightIndex &gt; mid) &#123;</span><br><span class="line">    &#x2F;&#x2F;较大的数归并,改变指针的走向,注意这里的条件和小和问题相反,取左边的大于右边的,才构成逆序,这里归并的是大的数,和归并排序的不同之处</span><br><span class="line">    count +&#x3D; arr[leftIndex] &gt; arr[rightIndex] ? (rightIndex - mid) : 0;</span><br><span class="line"></span><br><span class="line">    temp[tempIndex--] &#x3D; arr[leftIndex] &gt; arr[rightIndex] ? arr[leftIndex--] : arr[rightIndex--]</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;长出来的部分直接添加到最后</span><br><span class="line">  while (leftIndex &gt;&#x3D; 0) &#123;</span><br><span class="line">    temp[tempIndex--] &#x3D; arr[leftIndex--];</span><br><span class="line">  &#125;</span><br><span class="line">  while (rightIndex &gt; mid) &#123;</span><br><span class="line">    temp[tempIndex--] &#x3D; arr[rightIndex--];</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;通过循环将temp保存在arr</span><br><span class="line">  for (var i &#x3D; 0; i &lt; temp.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F; 注意从left的位置开始重新复值给arr</span><br><span class="line">    arr[left++] &#x3D; temp[i];</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;返回计算的逆序对数</span><br><span class="line">  return count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h1><h2 id="1-数组划分-partion"><a href="#1-数组划分-partion" class="headerlink" title="1 数组划分(partion)"></a>1 数组划分(partion)</h2><h3 id="1-1-大于num的放右边-小于放左边-划分为两部分"><a href="#1-1-大于num的放右边-小于放左边-划分为两部分" class="headerlink" title="1.1 大于num的放右边,小于放左边(划分为两部分)"></a>1.1 大于num的放右边,小于放左边(划分为两部分)</h3><p><strong>思路</strong></p><ul><li><p>本题主要考察的是指针和交换问题</p></li><li><p>设置小于部分的区域为less,less初始值=-1</p></li><li><p>当当前值大于num,cur++</p></li><li><p>小于num和less的下一个值交换,less++,扩大less的范围</p><p><strong>注意:这里不考虑是否有序的问题</strong></p></li></ul><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623084335728.png" alt="image-20200623084335728"></p><p><strong>复杂度</strong></p><ul><li>时间:O(N)</li><li>空间:O(1)</li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">  var temp &#x3D; arr[i];</span><br><span class="line">  arr[i] &#x3D; arr[j];</span><br><span class="line">  arr[j] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function partionTwo(arr, num) &#123;</span><br><span class="line">  var less &#x3D; - 1;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if (arr[i] &lt; num) &#123;</span><br><span class="line">      swap(arr, ++less, i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-荷兰国旗问题-划分为3部分"><a href="#1-2-荷兰国旗问题-划分为3部分" class="headerlink" title="1.2 荷兰国旗问题(划分为3部分)"></a>1.2 荷兰国旗问题(划分为3部分)</h3><p><strong>题目</strong></p><p>将数组划分为3部分,大于,等于,和小于</p><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623085951352.png" alt="image-20200623085951352"></p><p><strong>思路</strong></p><ul><li><p>设置三个指针,分别指向左边区域less,右边区域more和当前区域cur</p></li><li><p>当cur&gt;num  arr[–more]和arr[cur]交换位置,当前位置不变继续比较</p></li><li><p>cur&lt;num  arr[++less]和arr[cur++]交换位置,当前位置++</p></li><li><p>cur = num cur++</p></li><li><p><strong>结束条件是cur==more</strong></p><p><strong>注意:less和more始终指向的less区域和more区域的边界,++less到–more之间的值都是等于num的区间范围,依然不考虑是否有序的问题</strong></p></li></ul><p><strong>复杂度</strong></p><ul><li>时间:O(N)</li><li>空间:O(1)</li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">  var temp &#x3D; arr[i];</span><br><span class="line">  arr[i] &#x3D; arr[j];</span><br><span class="line">  arr[j] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 2.荷兰国旗问题(划分为三部分)</span><br><span class="line">function partionThree(arr, L, R, num) &#123;</span><br><span class="line">  var less &#x3D; L - 1;</span><br><span class="line">  var more &#x3D; R + 1;</span><br><span class="line">  var cur &#x3D; L;</span><br><span class="line">  while (cur &lt; more) &#123;</span><br><span class="line">    if (arr[cur] &lt; num) &#123;</span><br><span class="line">      swap(arr, ++less, cur++)</span><br><span class="line">    &#125; else if (arr[cur] &gt; num) &#123;</span><br><span class="line">      &#x2F;&#x2F; 注意这里cur不能移动,还要和左边的比较当前值</span><br><span class="line">      swap(arr, --more, cur)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      cur++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   &#x2F;&#x2F;返回的是等于num的子数组的下标志起始位置和终止位置</span><br><span class="line">  return [less + 1, more - 1]</span><br><span class="line">&#125;</span><br><span class="line">console.log(partionThree(arr, 0, arr.length - 1, 5))</span><br></pre></td></tr></table></figure><h2 id="2-随机快排"><a href="#2-随机快排" class="headerlink" title="2 随机快排"></a>2 随机快排</h2><h3 id="2-1-递归实现-增加了递归的partition问题"><a href="#2-1-递归实现-增加了递归的partition问题" class="headerlink" title="2.1 递归实现(增加了递归的partition问题)"></a>2.1 递归实现(增加了递归的partition问题)</h3><p><strong>思路</strong></p><ul><li>快排可以看做在和荷兰问题的基础上<strong>不断递归左右已经划分好的子数组</strong>,最终返回排序好的数组</li><li>这里可以进行优化,在递归的过程中<strong>不在重复计算已经等于num的数值</strong></li><li>快排每次将数组的最后的一个数看成基础的base=num来进行荷兰问题递归</li></ul><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623093852844.png" alt="image-20200623093852844"></p><p><strong>复杂度</strong></p><ul><li><strong>时间:nlogn</strong></li><li><strong>空间:O(logn)</strong>,只需执行过程中保存的断点的个数<strong>(划分的次数</strong>)需要额外的空间存储,断点组成是一个树,logN</li><li><strong>注意:快速排序有序归并排序,好在快排的常数项小,空间复杂度小</strong></li><li><strong>这里的时间复杂度和空间复杂度都是一个长期期望</strong></li></ul><p><strong>问题分析(数据状况不可控)</strong></p><ul><li>经典快排和<strong>数组是否有序是有关系的</strong>,当你每次选择的base不是正中间的数的时候此时划分的<strong>左右规模</strong>是不相等,当有序的情况下会演变成<strong>o(n^2)</strong></li><li>代码:<code>swap(arr, parseInt(Math.random() * (R - L + 1)) + L, R)</code></li></ul><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623100751455.png" alt="image-20200623100751455"></p><p><strong>数据状况不可控的解决方案(绕过原始的数据状况):</strong></p><ul><li><strong>通过随机的方式打乱数据状况:比如在快排中通过随机选择一个值作为base,就和原始的数据状况没有关系了</strong></li><li><strong>数据状况通过哈希函数打乱</strong></li></ul><p><strong>快排相关知识</strong></p><ul><li>快排是<strong>原地排序算法</strong>(不需要额外的空间)</li><li><strong>快排不稳定</strong>(相同的元素可能会调换位置)</li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">  var temp &#x3D; arr[i];</span><br><span class="line">  arr[i] &#x3D; arr[j];</span><br><span class="line">  arr[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;数组划分排序</span><br><span class="line">function partition(arr, L, R) &#123;</span><br><span class="line">  var less &#x3D; L - 1;</span><br><span class="line">  var more &#x3D; R + 1;</span><br><span class="line">  var cur &#x3D; L;</span><br><span class="line">  var num &#x3D; arr[R]</span><br><span class="line">  while (cur &lt; more) &#123;</span><br><span class="line">    if (arr[cur] &lt; num) &#123;</span><br><span class="line">      swap(arr, ++less, cur++)</span><br><span class="line">    &#125; else if (arr[cur] &gt; num) &#123;</span><br><span class="line">      &#x2F;&#x2F; 注意这里cur不能移动,还要和左边的比较当前值</span><br><span class="line">      swap(arr, --more, cur)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      cur++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;返回的是等于num的子数组的下标志起始位置和终止位置</span><br><span class="line">  return [less + 1, more - 1]</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;快排递归</span><br><span class="line">function quickSort(arr, L, R) &#123;</span><br><span class="line">  &#x2F;&#x2F; L&lt;R的时候才有有排序</span><br><span class="line">  if (L &lt; R) &#123;</span><br><span class="line">    &#x2F;&#x2F;base的选择优化,随机的选择arr中的下标和最后一个位置交换</span><br><span class="line">    swap(arr, parseInt(Math.random() * (R - L + 1)) + L, R)</span><br><span class="line">    &#x2F;&#x2F;注意这里快排通过最后一个元素作为base&#x3D;num</span><br><span class="line">    const curRange &#x3D; partition(arr, L, R);</span><br><span class="line">    &#x2F;&#x2F;相等值的下届开始</span><br><span class="line">    quickSort(arr, L, curRange[0] - 1);</span><br><span class="line">    &#x2F;&#x2F; 相等值的上届开始</span><br><span class="line">    quickSort(arr, curRange[1] + 1, R)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const arr &#x3D; [4, 3, 5, 6, 2, 7, 3]</span><br><span class="line">quickSort(arr, 0, arr.length - 1)</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><h3 id="2-2-非递归实现"><a href="#2-2-非递归实现" class="headerlink" title="2.2 非递归实现"></a>2.2 非递归实现</h3><h2 id="3-快排和归并的比较"><a href="#3-快排和归并的比较" class="headerlink" title="3.快排和归并的比较"></a>3.<a href="https://juejin.im/post/5d371aa6e51d455d850d3bbe" target="_blank" rel="noopener">快排和归并的比较</a></h2><p><strong>相同点</strong></p><ul><li>快排和归并用的都是<strong>分治思想</strong>，递推公式和递归代码也非常相似</li></ul><p><strong>不同点</strong></p><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623153331453.png" alt="image-20200623153331453"></p><ul><li><p>归并排序的处理过程是<code>由下而上</code>的，先处理子问题，然后再合并。</p><p>而快排正好相反，它的处理过程是<code>由上而下</code>的，先分区，然后再处理子问题。</p><p>归并排序虽然是稳定的、时间复杂度为 O(nlogn) 的排序算法，但是它是非原地排序算法。</p><p>归并之所以是非原地排序算法，主要原因是合并函数无法在原地执行。</p><p>快速排序通过设计巧妙的原地分区函数，可以实现原地排序，解决了归并排序占用太多内存的问题。</p></li></ul><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="1-1-堆知识点"><a href="#1-1-堆知识点" class="headerlink" title="1.1 堆知识点"></a>1.1 堆知识点</h2><ul><li><p>堆:将数组看成是一个完全二叉树,堆分为大顶堆和小顶堆.</p><p>父子元素之间的关系</p><p>父元素:(i-1)/2</p><p>左孩子:2i+1&lt;n</p><p>右还在:2i-1&lt;n,</p><p>这里的i是数组的下标值,当他们小于最后数组的长度表示子节点存在没有越界</p></li><li><p>堆结构非常重要</p><ul><li>堆结构的插入heapInsert和调整heapify</li><li>堆结构的增大和减小</li><li><strong>建立堆的过程,时间复杂度为O(N)</strong></li><li><strong>优先级队列结构就是堆结构</strong></li></ul></li></ul><h2 id="1-2-堆排序"><a href="#1-2-堆排序" class="headerlink" title="1.2 堆排序"></a>1.2 堆排序</h2><p><strong>思路</strong></p><ul><li>通过遍历,边插入边调整堆</li><li>交换堆的最大值和最后一个元素,将调整范围-1,调整堆,</li><li>每次将最大值放在数组的末尾,直到调整范围变为0,此时数组中所有的元素都有序</li></ul><p><strong>复杂度</strong></p><ul><li>时间:O(nlogn)</li><li>空间:O(1)</li><li>不稳定</li></ul><p><strong>注意</strong></p><ul><li><p><strong>堆在调整的过程中的时间复杂度就是logN,在不断的调整二叉树结构;插入N</strong></p></li><li><p><strong>通过堆就可以实现一个优先级队列,面试中都是这么实现的</strong></p></li></ul><p><strong>示意图</strong></p><p><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623180012597.png" alt="image-20200623180012597"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;数组交换</span><br><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">  var temp &#x3D; arr[i];</span><br><span class="line">  arr[i] &#x3D; arr[j];</span><br><span class="line">  arr[j] &#x3D; temp</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;大顶堆调整过程</span><br><span class="line">function heapify(arr, index, heapsize) &#123;</span><br><span class="line">  &#x2F;&#x2F;求其做孩子</span><br><span class="line">  var left &#x3D; 2 * index + 1;</span><br><span class="line">  &#x2F;&#x2F;循环的前提是不越界</span><br><span class="line">  while (left &lt; heapsize) &#123;</span><br><span class="line">    &#x2F;&#x2F;判断孩子节点中最大值的索引(当左孩子存在并且做孩子大于有孩子时,最大索引是左孩子的索引,不存在或者小于右孩子,较大值的是右孩子)</span><br><span class="line">    var largest &#x3D; (left + 1) &lt; heapsize &amp;&amp; arr[left + 1] &gt; arr[left] ? left + 1 : left;</span><br><span class="line">    &#x2F;&#x2F;比较孩子最大值和父节点的大小,将较大的值赋值largest</span><br><span class="line">    largest &#x3D; arr[index] &gt; arr[largest] ? index : largest;</span><br><span class="line">    &#x2F;&#x2F;判断最大值是不是父节点,是则直接返回,不用调整</span><br><span class="line">    if (largest &#x3D;&#x3D; index) &#123;</span><br><span class="line">      break</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;调整的前提是index和最大值不相等</span><br><span class="line">    swap(arr, index, largest);</span><br><span class="line">    &#x2F;&#x2F;将当前最大值赋值给index,继续往下比较</span><br><span class="line">    inde &#x3D; largest;</span><br><span class="line">    left &#x3D; index * 2 + 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入堆</span><br><span class="line">function heapInsert(arr, index) &#123;</span><br><span class="line">  &#x2F;&#x2F;判断和父节点的大小,大于父节点,交换,依次递归</span><br><span class="line">  var parent &#x3D; Math.floor((index - 1) &#x2F; 2)</span><br><span class="line">  while (arr[index] &gt; arr[parent]) &#123;</span><br><span class="line">    swap(arr, index, parent);</span><br><span class="line">    index &#x3D; parent;</span><br><span class="line">    parent &#x3D; Math.floor((index - 1) &#x2F; 2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 堆排序</span><br><span class="line">&#x2F;*</span><br><span class="line">思想:先将数组中的所有值依次插入调整成大顶堆,每次从大顶堆中的最后一个元素和根元素最大值交换位置,调整的范围--,重新调整交换之后的堆,每次调整的时间复杂度都是logN,n个元素依次调整时间复杂度NlogN</span><br><span class="line">*&#x2F;</span><br><span class="line">function heapSort(arr) &#123;</span><br><span class="line">  if (arr &#x3D;&#x3D; null || arr.length &lt; 2) &#123;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;for循环依次调整arr为大顶堆</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    heapInsert(arr, i)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;插入之后依次交换堆顶和末尾元素,调整堆,调整范围heapsize-1,这样数组末尾的元素就是已经排序好的</span><br><span class="line">  var heapsize &#x3D; arr.length;</span><br><span class="line">  swap(arr, 0, --heapsize);</span><br><span class="line">  while (heapsize &gt; 0) &#123;</span><br><span class="line">    heapify(arr, 0, heapsize);</span><br><span class="line">    &#x2F;&#x2F;继续交换</span><br><span class="line">    swap(arr, 0, --heapsize)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var arr &#x3D; [</span><br><span class="line">  89, -80, 47, -9,</span><br><span class="line">  -10, -48, 27</span><br><span class="line">]</span><br><span class="line">heapSort(arr)</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><h1 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h1><h2 id="1-1-其他排序"><a href="#1-1-其他排序" class="headerlink" title="1.1 其他排序"></a>1.1 其他排序</h2><h2 id="1-2-排序对比"><a href="#1-2-排序对比" class="headerlink" title="1.2 排序对比"></a>1.2 排序对比</h2><ul><li>见链接<a href="https://juejin.im/post/5ab9ae9cf265da23830ae617" target="_blank" rel="noopener">https://juejin.im/post/5ab9ae9cf265da23830ae617</a></li><li><a href="https://juejin.im/post/58c9d5fb1b69e6006b686bce#heading-14" target="_blank" rel="noopener">https://juejin.im/post/58c9d5fb1b69e6006b686bce#heading-14</a></li></ul><img src="/2020/06/20/%E7%AE%97%E6%B3%952/image-20200623213938607.png" alt="image-20200623213938607" style="zoom:80%;">]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
算法的详细分模块学习
    
    </summary>
    
    
      <category term="Data-Structure" scheme="https://sparkparis.github.io/categories/Data-Structure/"/>
    
    
      <category term="随笔" scheme="https://sparkparis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="algorithom" scheme="https://sparkparis.github.io/tags/algorithom/"/>
    
  </entry>
  
  <entry>
    <title>面试-前端题库汇总</title>
    <link href="https://sparkparis.github.io/2020/06/10/%E9%9D%A2%E8%AF%95-4/"/>
    <id>https://sparkparis.github.io/2020/06/10/%E9%9D%A2%E8%AF%95-4/</id>
    <published>2020-06-10T15:07:19.000Z</published>
    <updated>2020-06-29T02:22:26.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><a id="more"></a><!-- TOC --><ul><li><a href="#js基础知识">js基础知识</a><ul><li><a href="#1原始类型的有哪几种null是对象吗">1.原始类型的有哪几种?null是对象吗?</a><ul><li><a href="#11js中的原始类型有">1.1js中的原始类型有</a></li><li><a href="#12-null不是对象虽然在检测时候显示的object">1.2 null不是对象,虽然在检测时候显示的object</a></li></ul></li><li><a href="#2-object类型">2. Object类型</a><ul><li><a href="#21-对象类型和原始类型的不同之处">2.1 对象类型和原始类型的不同之处？</a></li><li><a href="#22-函数参数是对象会发生什么问题">2.2 函数参数是对象会发生什么问题？</a></li></ul></li><li><a href="#3-typeof-vs-instanceof判断类型">3 typeof vs instanceof(判断类型)</a><ul><li><a href="#32-判断具体的对象类型">3.2 判断具体的对象类型</a></li><li><a href="#33-将伪数组转化为真正数组">3.3 将伪数组转化为真正数组</a></li><li><a href="#34判断对象中是不是含有属性">3.4判断对象中是不是含有属性</a></li></ul></li><li><a href="#4-类型转化">4 .类型转化</a></li><li><a href="#5-this如何正确判断-this箭头函数的-this-是什么">5. this(如何正确判断 this？箭头函数的 this 是什么？)</a><ul><li><a href="#51-this调用情况4">5.1 this调用情况(4)</a></li><li><a href="#52-this指向的优先级">5.2 this指向的优先级</a></li><li><a href="#53-bind函数被调用多次this的指向问题">5.3 bind函数被调用多次this的指向问题?</a></li><li><a href="#54-箭头函数和普通函数的区别">5.4 箭头函数和普通函数的区别</a></li></ul></li><li><a href="#6vs-">6.<code>==</code>vs <code>===</code></a><ul><li><a href="#61-比较">6.1 比较</a></li></ul></li><li><a href="#7-闭包">7 闭包</a><ul><li><a href="#71-循环中使用闭包解决-var-定义函数的问题">7.1 循环中使用闭包解决 <code>var</code> 定义函数的问题</a></li></ul></li><li><a href="#8-深拷贝和浅拷贝">8 深拷贝和浅拷贝</a><ul><li><a href="#81深拷贝浅拷贝和赋值的区别">8.1深拷贝,浅拷贝和赋值的区别</a></li><li><a href="#82-浅拷贝的实现">8.2 浅拷贝的实现</a></li><li><a href="#83-深拷贝">8.3 深拷贝</a></li></ul></li><li><a href="#9-js执行过程中堆栈以及浏览器事件机制even-loop和node中的even-loophttpsjuejinimpost5b1deac06fb9a01e643e2a95">9 <a href="https://juejin.im/post/5b1deac06fb9a01e643e2a95" target="_blank" rel="noopener">js执行过程中堆,栈以及浏览器事件机制(even loop)和Node中的even loop</a></a><ul><li><a href="#91js内存机制">9.1<strong>js内存机制</strong></a></li><li><a href="#92-浏览器中的事件机制event-loop">9.2 <strong>浏览器中的事件机制(Event loop)</strong></a><ul><li><a href="#进程和线程的区别">进程和线程的区别,</a></li><li><a href="#js单线程带来的好处">js单线程带来的好处</a></li><li><a href="#基本概念">基本概念</a></li><li><a href="#浏览器中的事件机制理解">浏览器中的事件机制理解</a></li></ul></li><li><a href="#93-node中的event-loop">9.3 Node中的Event Loop</a><ul><li><a href="#processnexttick执行顺序"><strong>process.nextTick执行顺序</strong></a></li></ul></li><li><a href="#94-小结">9.4 小结</a></li></ul></li><li><a href="#10-原型和原型链">10 原型和原型链</a><ul><li><a href="#101-原型">10.1 原型</a></li><li><a href="#102-小结">10.2 小结</a></li></ul></li><li><a href="#11-原型继承和class继承">11 原型继承和class继承</a><ul><li><a href="#111-原型如何实现继承">11.1 原型如何实现继承</a></li><li><a href="#112-class如何实现继承">11.2 class如何实现继承</a></li><li><a href="#113-class的本质">11.3 class的本质</a></li></ul></li></ul></li><li><a href="#es6常考知识点">ES6常考知识点</a><ul><li><a href="#1-var-let-const">1. var let const</a></li><li><a href="#2-promise解决异步编程">2 .promise(解决异步编程)</a><ul><li><a href="#21-promise的api">2.1 promise的api</a></li><li><a href="#22-promise的实现">2.2 promise的实现</a></li></ul></li><li><a href="#3-generator解决异步编程">3 generator(解决异步编程)</a></li><li><a href="#4-asyncawait解决异步编程使用前提是promise对象">4 async/await(解决异步编程,使用前提是promise对象)</a></li><li><a href="#5-异步编程的小结">5 异步编程的小结</a></li><li><a href="#6-模块化">6 模块化</a><ul><li><a href="#61模块化优势">6.1模块化优势</a></li><li><a href="#62模块化实现的方式">6.2模块化实现的方式</a></li></ul></li><li><a href="#7-proxy可以实现什么功能">7 proxy可以实现什么功能</a><ul><li><a href="#71-基本概念">7.1 基本概念</a></li><li><a href="#72补充reflecthttpsjuejinimpost5c7e6857e51d4542194f8c6fheading-0">7.2<strong><a href="https://juejin.im/post/5c7e6857e51d4542194f8c6f#heading-0" target="_blank" rel="noopener">补充Reflect</a></strong></a></li><li><a href="#73-this的指向">7.3 this的指向</a></li><li><a href="#74通过proxy实现数据的响应式">7.4通过proxy实现数据的响应式</a></li></ul></li><li><a href="#8-reduce-map-filter">8 reduce map filter</a></li><li><a href="#9-js异步编程及常考面试题">9 JS异步编程及常考面试题</a><ul><li><a href="#91-并发和并行的区别">9.1 并发和并行的区别</a></li><li><a href="#92异步编程的集中方式举例分析">9.2异步编程的集中方式举例分析</a><ul><li><a href="#回调函数"><strong>回调函数</strong></a></li><li><a href="#generator"><strong>generator</strong></a></li><li><a href="#promise">promise</a></li><li><a href="#asyncawait"><strong>async/await</strong></a></li><li><a href="#常用的定时器函数settimeoutsetintervalrequestanimationframe"><strong>常用的定时器函数(setTimeout、setInterval、requestAnimationFrame)</strong></a></li></ul></li><li><a href="#93面试题通过js封装一个定时器"><strong>9.3面试题</strong>:通过js封装一个定时器</a></li></ul></li></ul></li><li><a href="#js进阶知识点">js进阶知识点</a><ul><li><a href="#1-bindcallapply">1 bind&amp;call&amp;&amp;apply</a><ul><li><a href="#三者的区别">三者的区别</a></li><li><a href="#手动实现">手动实现</a><ul><li><a href="#apply实现">apply实现</a></li><li><a href="#call实现">call实现</a></li><li><a href="#bind实现">bind实现</a></li></ul></li></ul></li><li><a href="#2-new">2 new</a><ul><li><a href="#21-new的原理">2.1 new的原理</a></li><li><a href="#22-通过new创建的对象和通过字面量创建的对象有什么区别">2.2 通过new创建的对象和通过字面量创建的对象有什么区别</a></li></ul></li><li><a href="#3-instanceof原理和手动实现">3 instanceof原理和手动实现</a></li><li><a href="#4-面试题为什么-01--02--03">4 面试题:为什么 0.1 + 0.2 != 0.3</a></li><li><a href="#5-垃圾回收机制gcgarbage-collection-in-v8">5 垃圾回收机制(GC[Garbage collection in <em>V8</em>])</a><ul><li><a href="#51-面试题v8引擎中的垃圾回收机制自动进行了内存的分配和管理">5.1 面试题:V8引擎中的垃圾回收机制(自动进行了内存的分配和管理)</a></li><li><a href="#52-v8引擎内存有限制的原因15g64位">5.2 V8引擎内存有限制的原因(1.5G,64位):</a></li></ul></li><li><a href="#6-js面试思考题">6 js面试思考题</a><ul><li><a href="#61-js-分为哪两大类型都有什么各自的特点你该如何判断正确的类型">6.1 JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？</a></li><li><a href="#62-原型的理解">6.2 原型的理解</a></li><li><a href="#63-bindcall-和-apply-各自有什么区别">6.3 bind、call 和 apply 各自有什么区别？</a></li><li><a href="#64-es6中使用过什么">6.4 ES6中使用过什么</a></li><li><a href="#65-js-是如何运行的">6.5 JS 是如何运行的？</a></li></ul></li></ul></li><li><a href="#浏览器基础知识及常考知识点">浏览器基础知识及常考知识点</a><ul><li><a href="#1事件机制">1.事件机制</a><ul><li><a href="#11-事件触发的三个阶段">1.1 事件触发的三个阶段:</a></li><li><a href="#12-事件注册">1.2 事件注册</a></li><li><a href="#13-事件代理">1.3 事件代理</a></li></ul></li><li><a href="#2-跨域">2 跨域</a><ul><li><a href="#21-跨域">2.1 跨域</a></li><li><a href="#22-跨域解决">2.2 跨域解决</a><ul><li><a href="#jsonp">jsonp</a></li><li><a href="#cors">CORS</a></li><li><a href="#documentdomain">document.domain</a></li><li><a href="#postmessage">postMessage</a></li><li><a href="#服务器端解决">服务器端解决</a></li><li><a href="#nginx代理服务器">nginx代理服务器</a></li><li><a href="#websocket通信">websocket通信</a></li></ul></li></ul></li><li><a href="#3-存储浏览器">3. 存储(浏览器)</a><ul><li><a href="#31cookiesessionstoragelocalstorageindexdb">3.1cookie,sessionStorage,localStorage,indexDB</a></li></ul></li><li><a href="#32-session和cookie">3.2 session和cookie</a></li><li><a href="#33-service-worker">3.3 Service Worker</a></li><li><a href="#4-浏览器的缓存性能优化">4 浏览器的缓存(性能优化)</a><ul><li><a href="#41-缓存优势">4.1 缓存优势</a></li><li><a href="#42-缓存位置">4.2 缓存位置</a></li><li><a href="#43-缓存策略">4.3 缓存策略</a><ul><li><a href="#强缓存">强缓存</a></li><li><a href="#协商缓存">协商缓存</a></li></ul></li><li><a href="#44-应用场景应用缓存策略">4.4 应用场景应用缓存策略</a></li></ul></li><li><a href="#5-浏览器渲染">5 浏览器渲染</a><ul><li><a href="#51-浏览器渲染原理">5.1 浏览器渲染原理</a></li><li><a href="#52-操作dom慢的原因">5.2 操作dom慢的原因</a></li><li><a href="#53-插入几万个dom如何实现界面不卡">5.3 插入几万个DOM如何实现界面不卡</a></li><li><a href="#54-阻塞界面渲染的情况">5.4 阻塞界面渲染的情况</a></li><li><a href="#55-重绘和回流影响性能">5.5 重绘和回流(影响性能)</a><ul><li><a href="#概念">概念</a></li><li><a href="#发生情况">发生情况</a></li><li><a href="#重绘和回流和event-loop有关一帧可能会做的">重绘和回流和event loop有关(一帧可能会做的)</a></li></ul></li><li><a href="#56-减少重绘和回流方案">5.6 减少重绘和回流方案</a></li><li><a href="#57-思考题关键渲染路径">5.7 思考题(关键渲染路径)</a></li></ul></li><li><a href="#6-浏览器内核的理解以及主流浏览器的内核">6 浏览器内核的理解,以及主流浏览器的内核</a><ul><li><a href="#61-浏览器内核的理解">6.1 浏览器内核的理解</a></li><li><a href="#63-主流浏览器的内核">6.3 主流浏览器的内核</a></li></ul></li><li><a href="#7-浏览器性能优化">7 浏览器性能优化</a><ul><li><a href="#71-防抖和节流">7.1 防抖和节流</a></li></ul></li><li><a href="#8-从输入url到浏览器页面展示的步骤">8 从输入URL到浏览器页面展示的步骤</a></li><li><a href="#9-安全防范xsscsrf">9 安全防范(XSS,CSRF)</a><ul><li><a href="#91-xss">9.1 XSS</a></li><li><a href="#92-csrf">9.2 CSRF</a></li><li><a href="#93-点击劫持">9.3 点击劫持</a></li><li><a href="#94-中间人攻击">9.4 中间人攻击</a></li></ul></li></ul></li><li><a href="#网络基础知识">网络基础知识</a><ul><li><a href="#1-http和https的区别">1. http和https的区别</a><ul><li><a href="#11-http请求">1.1 http请求</a><ul><li><a href="#状态码">状态码:</a></li></ul></li><li><a href="#12-get和post请求的区别">1.2 GET和POST请求的区别</a></li><li><a href="#13-tls传输层安全协议">1.3 TLS(传输层安全协议)</a></li><li><a href="#14-http2的多路复用">1.4 http2的多路复用</a></li><li><a href="#14-https的握手过程">1.4 https的握手过程</a></li><li><a href="#15-https握手过程中如何验证证书的合法性">1.5 https握手过程中如何验证证书的合法性</a></li><li><a href="#16-https中间人攻击的过程">1.6 HTTPS中间人攻击的过程</a></li><li><a href="#17-http1http1和http2的区别">1.7 http1,http.1和http2的区别</a></li><li><a href="#18-http301和302状态码">1.8 http301和302状态码</a><ul><li><a href="#对seo优化的影响">对seo优化的影响:</a></li><li><a href="#二者的应用场景">二者的应用场景</a></li></ul></li><li><a href="#19-接口如何进行防刷">1.9 接口如何进行防刷</a></li></ul></li><li><a href="#2-tcp和udp的区别">2 tcp和udp的区别</a></li><li><a href="#3-tcp">3 tcp</a><ul><li><a href="#31-tcp的三次握手">3.1 tcp的三次握手</a></li><li><a href="#32为什么需要三次握手">3.2为什么需要三次握手</a></li><li><a href="#33-tcp四次回收">3.3 tcp四次回收</a></li><li><a href="#34-为什么需要四次">3.4 为什么需要四次</a></li><li><a href="#35-arq协议">3.5 ARQ协议</a></li><li><a href="#36-小结">3.6 小结</a></li></ul></li></ul></li><li><a href="#webpackvue">webpack&amp;Vue</a><ul><li><a href="#1-webpack性能优化">1 webpack性能优化</a><ul><li><a href="#11-有哪些方式可以减少webpack的打包时间">1.1 有哪些方式可以减少WebPack的打包时间</a></li><li><a href="#12-减少webpack打包后的体积">1.2 减少Webpack打包后的体积</a></li><li><a href="#13-打包工具的核心原理">1.3 打包工具的核心原理:</a></li></ul></li><li><a href="#2-mvvm">2 MVVM</a><ul><li><a href="#21mvvm理解">2.1MVVM理解</a></li><li><a href="#22-虚拟dom可以提高性能">2.2 虚拟dom可以提高性能</a></li></ul></li><li><a href="#3-前端路由的原理">3 前端路由的原理</a></li><li><a href="#4-vue基础知识">4 Vue基础知识</a><ul><li><a href="#41-vue生命周期钩子函数">4.1 vue生命周期(钩子函数)</a></li><li><a href="#42-组件通信">4.2 组件通信</a><ul><li><a href="#父子组件的通信">父子组件的通信</a></li><li><a href="#兄弟组件通信">兄弟组件通信</a></li><li><a href="#跨多层次组件通信">跨多层次组件通信</a></li><li><a href="#任意组件">任意组件</a></li></ul></li><li><a href="#43-extend">4.3 extend</a></li><li><a href="#43-mixin-和-mixins-区别">4.3 mixin 和 mixins 区别</a></li><li><a href="#44-computed和watch的区别">4.4 computed和watch的区别</a></li><li><a href="#45-v-show和v-if的区别">4.5 v-show和v-if的区别</a></li><li><a href="#46-组件中的data什么时候可以使用对象">4.6 组件中的data什么时候可以使用对象</a></li><li><a href="#47-vue中使用key的原因">4.7 vue中使用key的原因:</a></li></ul></li><li><a href="#5-vue进阶">5 Vue进阶</a><ul><li><a href="#51-响应式原理数据双向绑定的原理">5.1 响应式原理(数据双向绑定的原理)</a></li><li><a href="#52编译过程">5.2编译过程</a></li><li><a href="#53-nexttick-原理分析">5.3 NextTick 原理分析</a></li></ul></li><li><a href="#6-bable原理">6 bable原理</a></li><li><a href="#7-前端监控">7 前端监控</a></li></ul></li><li><a href="#设计模式">设计模式</a><ul><li><a href="#1工厂模式">1.工厂模式</a></li><li><a href="#2-单例模式">2 单例模式</a></li><li><a href="#3-适配器模式">3 适配器模式</a></li><li><a href="#4-装饰者模式">4 装饰者模式</a></li><li><a href="#5-代理模式">5 代理模式</a></li><li><a href="#6-发布订阅模式">6 发布订阅模式</a></li><li><a href="#7-外观模式">7 外观模式</a></li></ul></li></ul><!-- /TOC --><h1 id="js基础知识"><a href="#js基础知识" class="headerlink" title="js基础知识"></a>js基础知识</h1><h3 id="1-原始类型的有哪几种-null是对象吗"><a href="#1-原始类型的有哪几种-null是对象吗" class="headerlink" title="1.原始类型的有哪几种?null是对象吗?"></a>1.原始类型的有哪几种?null是对象吗?</h3><h4 id="1-1js中的原始类型有"><a href="#1-1js中的原始类型有" class="headerlink" title="1.1js中的原始类型有"></a>1.1js中的原始类型有</h4><ul><li><p>undefined</p></li><li><p>null</p></li><li><p>symbol</p></li><li><p>string:string类型的值是不会变化的,无论调用任何方法</p></li><li><p>number:js中的类型是浮点类型,使用过程中的bug在计算的时候0.1 + 0.2 !== 0.3</p></li><li><p>boolean</p><h4 id="1-2-null不是对象-虽然在检测时候显示的object"><a href="#1-2-null不是对象-虽然在检测时候显示的object" class="headerlink" title="1.2 null不是对象,虽然在检测时候显示的object"></a>1.2 null不是对象,虽然在检测时候显示的object</h4><h3 id="2-Object类型"><a href="#2-Object类型" class="headerlink" title="2. Object类型"></a>2. Object类型</h3><h4 id="2-1-对象类型和原始类型的不同之处？"><a href="#2-1-对象类型和原始类型的不同之处？" class="headerlink" title="2.1 对象类型和原始类型的不同之处？"></a>2.1 对象类型和原始类型的不同之处？</h4></li><li><p>除了原始类型其与的都是object类型</p></li><li><p>原始类型存放的是值</p></li><li><p>对象类型存放的是地址</p><h4 id="2-2-函数参数是对象会发生什么问题？"><a href="#2-2-函数参数是对象会发生什么问题？" class="headerlink" title="2.2 函数参数是对象会发生什么问题？"></a>2.2 函数参数是对象会发生什么问题？</h4></li><li><p>函数参数是对象的情况下,内部修改形参地址的会导致<strong>传入的对象参数指向新的地址空间</strong></p></li><li><p>和传入之前的实参指向不同的地址空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function test(person) &#123;</span><br><span class="line">  person.age &#x3D; 23;</span><br><span class="line">  &#x2F;&#x2F;person指向新的地址空间</span><br><span class="line">  person &#x3D; &#123;</span><br><span class="line">    name: &#39;yyy&#39;,</span><br><span class="line">    age: &quot;30&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  return person</span><br><span class="line">&#125;</span><br><span class="line">var p1 &#x3D; &#123;</span><br><span class="line">  name: &#39;hhh&#39;,</span><br><span class="line">  age: &quot;10&quot;</span><br><span class="line">&#125;</span><br><span class="line">var p2 &#x3D; test(p1)</span><br><span class="line">console.log(p1 &#x3D;&#x3D; p2);&#x2F;&#x2F;false</span><br><span class="line">console.log(p1.age)&#x2F;&#x2F;23</span><br><span class="line">console.log(p2.age)&#x2F;&#x2F;30</span><br></pre></td></tr></table></figure><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200624184105440.png" alt="image-20200624184105440" style="zoom:50%;"></li><li><p>所以最后 <code>person</code> 拥有了一个新的地址（指针），也就和 <code>p1</code> 没有任何关系了，导致了最终两个变量的值是不相同的。</p></li></ul><h3 id="3-typeof-vs-instanceof-判断类型"><a href="#3-typeof-vs-instanceof-判断类型" class="headerlink" title="3 typeof vs instanceof(判断类型)"></a>3 typeof vs instanceof(判断类型)</h3><ul><li>typeof:<ul><li>除了null之外<strong>可以判断所有的原始数据类型</strong></li><li>对象数据类型中除了函数function,其他的都判断为object,<strong>不能判断对象具体的数据类型</strong></li></ul></li><li>instanceof:<ul><li>可以<strong>判断对象的具体数据类型</strong>,原因:instanceof内部机制是通过原型链中是否含有该类的原型</li><li>不能直接判断原始类型,需要转化才能判断原始类型</li><li>instanceof转化<code>Symbol.hasInstance</code>等价于<code>typeof &#39;hello&#39;==&#39;string&#39;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将instanceof转化为可以判断原始数据类型,这里通过自定义instanceof的方法等价于</span><br><span class="line">class PrimativeString &#123;</span><br><span class="line">  static [Symbol.hasInstance](x) &#123;</span><br><span class="line">    return typeof x &#x3D;&#x3D;&#x3D; &#39;string&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#39;hello world&#39; instanceof PrimativeString);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-2-判断具体的对象类型"><a href="#3-2-判断具体的对象类型" class="headerlink" title="3.2 判断具体的对象类型"></a>3.2 判断具体的对象类型</h4><ul><li><code>Object.prototype.tosString().call(xx)</code>:可以对象的类型字符串</li><li><code>instanceof</code>:通过查找原型链的方式</li></ul><h4 id="3-3-将伪数组转化为真正数组"><a href="#3-3-将伪数组转化为真正数组" class="headerlink" title="3.3 将伪数组转化为真正数组"></a>3.3 将伪数组转化为真正数组</h4><ul><li>Array.from()</li><li>[…arr]</li></ul><h4 id="3-4判断对象中是不是含有属性"><a href="#3-4判断对象中是不是含有属性" class="headerlink" title="3.4判断对象中是不是含有属性"></a>3.4判断对象中是不是含有属性</h4><ul><li>in</li><li>hasOwnProperty()</li></ul><h3 id="4-类型转化"><a href="#4-类型转化" class="headerlink" title="4 .类型转化"></a>4 .类型转化</h3><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200624185528623.png" alt="image-20200624185528623" style="zoom:80%;"><ul><li><p>类型转化分为</p><ul><li><p>boolean:在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>， <code>&#39;&#39;</code>， <code>0</code>， <code>-0</code>，其他所有值都转为 <code>true</code>，包括所有对象。</p></li><li><p>number</p></li><li><p>字符串</p></li><li><p>对象转原始类型:调用内置的 <code>[[ToPrimitive]]</code> 函数，对于该<strong>函数</strong>来说，算法逻辑一般来说如下：</p><ul><li><p>如果已经是原始类型了，那就不需要转换了</p></li><li><p>调用 <code>x.valueOf()</code>，如果转换为基础类型，就返回转换的值</p></li><li><p>调用 <code>x.toString()</code>，如果转换为基础类型，就返回转换的值</p></li><li><p>如果都没有返回原始类型，就会报错</p><p>可以重写 <code>Symbol.toPrimitive</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; &#123;</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    return 0</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &#39;1&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;重写原始类型的转化</span><br><span class="line">  [Symbol.toPrimitive]() &#123;</span><br><span class="line">    return 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">1 + a &#x2F;&#x2F; &#x3D;&gt; 3</span><br></pre></td></tr></table></figure></li></ul></li><li><p>四则运算符</p><ul><li>运算中其中一方为字符串，那么就会把另一方也转换为字符串</li><li>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串</li><li>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 + &#39;1&#39; &#x2F;&#x2F; &#39;11&#39;</span><br><span class="line">true + true &#x2F;&#x2F; 2</span><br><span class="line">4 + [1,2,3] &#x2F;&#x2F; &quot;41,2,3&quot; 将数组通过 toString 转为字符串 1,2,3，得到结果 41,2,3</span><br><span class="line">&#39;a&#39; + + &#39;b&#39; &#x2F;&#x2F; -&gt; &quot;aNaN&quot;&#x2F;&#x2F;+ &#39;b&#39;转数字失败为NaN</span><br><span class="line">4 * &#39;3&#39; &#x2F;&#x2F; 12</span><br><span class="line">4 * [] &#x2F;&#x2F; 0</span><br><span class="line">4 * [1, 2] &#x2F;&#x2F; NaN  数组[1,2]转数字为NaN</span><br></pre></td></tr></table></figure></li><li><p>比较运算符</p><ul><li>如果是对象，就通过 <code>toPrimitive</code> 转换对象</li><li>如果是字符串，就通过 <code>unicode</code> 字符索引来比较</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; &#123;</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    return 0</span><br><span class="line">  &#125;,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &#39;1&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a &gt; -1 &#x2F;&#x2F; true  因为 a 是对象，所以会通过 valueOf 转换为原始类型再比较值。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-this-如何正确判断-this？箭头函数的-this-是什么？"><a href="#5-this-如何正确判断-this？箭头函数的-this-是什么？" class="headerlink" title="5. this(如何正确判断 this？箭头函数的 this 是什么？)"></a>5. this(如何正确判断 this？箭头函数的 this 是什么？)</h3><h4 id="5-1-this调用情况-4"><a href="#5-1-this调用情况-4" class="headerlink" title="5.1 this调用情况(4)"></a>5.1 this调用情况(4)</h4><ul><li>直接调用,this-&gt;window</li><li>通过实例对象调用,this-&gt;实例对象</li><li>通过new的方式创建,this永远指向-&gt;指向的实例对象,且不会被改变</li><li>改变this指向的api(bind,apply,call),this-&gt;api的第一个参数</li></ul><p><strong>箭头函数中this指向包裹箭头函数的第一个普通函数,这里继续扩展箭头函数</strong></p><h4 id="5-2-this指向的优先级"><a href="#5-2-this指向的优先级" class="headerlink" title="5.2 this指向的优先级"></a>5.2 this指向的优先级</h4><ul><li><code>new</code> 的方式优先级最高&gt; <code>bind</code> 这些函数&gt; <code>obj.foo()</code> 这种调用方式&gt; <code>foo</code> 这种调用方式，同时，<strong>箭头函数的 <code>this</code> 一旦被绑定，就不会再被任何方式所改变。</strong></li><li>针对单个规则使用this指向那个问题</li></ul><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200624192232745.png" alt="image-20200624192232745" style="zoom:80%;"><h4 id="5-3-bind函数被调用多次this的指向问题"><a href="#5-3-bind函数被调用多次this的指向问题" class="headerlink" title="5.3 bind函数被调用多次this的指向问题?"></a>5.3 bind函数被调用多次this的指向问题?</h4><ul><li>注意bind返回的是函数,<strong>bind调用 多次指向的始终是第一次绑定的this</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; &#123;&#125;</span><br><span class="line">let foo &#x3D; function () &#123;</span><br><span class="line">  console.log(this);</span><br><span class="line">  console.log(111);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;不管我们给函数 bind 几次，foo 中的 this 永远由第一次 bind 决定，所以结果永远是 window。</span><br><span class="line">foo.bind().bind(a)();&#x2F;&#x2F;this指向window</span><br><span class="line">foo.bind(a).bind()()&#x2F;&#x2F;a</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; fn.bind().bind(a) 等于</span><br><span class="line">let fn2 &#x3D; function fn1() &#123;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    return fn.apply()</span><br><span class="line">  &#125;.apply(a)</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><h4 id="5-4-箭头函数和普通函数的区别"><a href="#5-4-箭头函数和普通函数的区别" class="headerlink" title="5.4 箭头函数和普通函数的区别"></a>5.4 箭头函数和普通函数的区别</h4><ul><li>箭头函数中没有this,this指向的是包裹箭头函数的第一个不是箭头函数的普通函数的this</li><li>箭头函数不能当做构造函数,不能通过new来创建会报错</li><li>箭头函数中没有arguments对象,可以用rest参数代替</li><li>箭头函数中没有yield命令,不能用作generator函数</li></ul><h3 id="6-vs"><a href="#6-vs" class="headerlink" title="6.==vs ==="></a>6.<code>==</code>vs <code>===</code></h3><h4 id="6-1-比较"><a href="#6-1-比较" class="headerlink" title="6.1 比较"></a>6.1 比较</h4><ul><li><p><code>==</code>会先对比类型,类型不一致则会进行类型转换然后在比较值,类型相同则会在比较值,<a href>类型转化</a>直接见上文</p></li><li><p><code>===</code>不会进行类型的转化,会直接比较类型和值</p></li></ul><h3 id="7-闭包"><a href="#7-闭包" class="headerlink" title="7 闭包"></a>7 闭包</h3><ul><li>闭包:<strong>匿名函数内部可以访问函数外部的变量</strong>,延伸变量的作用域范围,拥有了自己单独的作用域</li><li>闭包:<ul><li><strong>立即执行函数IEF</strong>就是一个闭包,可以传入函数外部的变量来进行接收</li><li>补充立即执行函数:<ul><li>一是不必为函数命名，避免了污染全局变量 </li><li>二是IIFE内部形成了一个<strong>单独的作用域</strong>，可以<strong>封装一些外部无法读取的私有变量</strong>。</li></ul></li></ul></li></ul><h4 id="7-1-循环中使用闭包解决-var-定义函数的问题"><a href="#7-1-循环中使用闭包解决-var-定义函数的问题" class="headerlink" title="7.1 循环中使用闭包解决 var 定义函数的问题"></a>7.1 循环中使用闭包解决 <code>var</code> 定义函数的问题</h4><ul><li>问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 问题:循环中不能每次打印出传入的循环制</span><br><span class="line">for (var i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">  &#x2F;&#x2F;这里设置定时器异步任务执行</span><br><span class="line">  setTimeout(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(i);</span><br><span class="line">  &#125;, i * 100)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;全部输出5</span><br></pre></td></tr></table></figure><ul><li>闭包的方式解决:IFE</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;解决方案:闭包的方案:理解执行函数</span><br><span class="line">for (var i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">  &#x2F;&#x2F;立即执行函数拥有自己独立的作用,外部无法都去私有的变量</span><br><span class="line">  (function (j) &#123;</span><br><span class="line">    &#x2F;&#x2F;这里的将传入闭包中变量传递给形参j&#x3D;i</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">      console.log(j);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将i的值作为参数传入setTimeOut的第三个参数,当函数执行的时候回自动传入参数1中的function函数中,定义形参直接接受就行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;将值作为参数传入setTimeOut中(当函数执行的时候直接传入)</span><br><span class="line">for (var i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line"></span><br><span class="line">  setTimeout((j) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;j接收setTimeOut中的第三个参数i</span><br><span class="line">    console.log(j);</span><br><span class="line"></span><br><span class="line">  &#125;, i * 1000, i);&#x2F;&#x2F;i作为参数传入setTimeOut会被保存,执行的时候传入setTimeOut的参数1的function中,这里通过j进行接收</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过Es6块级作用域let来定义变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 3.解决方案:块级作用域Let来定义变量</span><br><span class="line">for (let i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(i);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-深拷贝和浅拷贝"><a href="#8-深拷贝和浅拷贝" class="headerlink" title="8 深拷贝和浅拷贝"></a>8 深拷贝和浅拷贝</h3><h4 id="8-1深拷贝-浅拷贝和赋值的区别"><a href="#8-1深拷贝-浅拷贝和赋值的区别" class="headerlink" title="8.1深拷贝,浅拷贝和赋值的区别"></a>8.1深拷贝,浅拷贝和赋值的区别</h4><ul><li><p>当我们把一个对象赋值给一个新的变量时，<strong>赋的其实是该对象的在栈中的地址，而不是堆中的数据</strong>。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p></li><li><p>浅拷贝：重新<strong>在堆中创建内存</strong>，拷贝前后对象的基本数据类型互不影响，但拷贝前后对象的引用类型因共享同一块内存，会相互影响。</p></li><li><p>深拷贝：从<strong>堆内存中开辟一个新的区域存放新对象</strong>，对对象中的<strong>子对象进行递归拷贝</strong>,拷贝前后的两个对象互不影响。</p></li></ul><ul><li><p>概念</p><ul><li>浅拷贝:浅拷贝中拷贝的是<strong>地址</strong>,共享同一块内存空间,修改其中一个,另外一个也会改变</li><li>深拷贝:深拷贝是从<strong>堆栈中完整的拷贝一份出来</strong>,开辟了新的内存空间,修改值不互相影响</li></ul></li></ul><h4 id="8-2-浅拷贝的实现"><a href="#8-2-浅拷贝的实现" class="headerlink" title="8.2 浅拷贝的实现"></a>8.2 浅拷贝的实现</h4><ul><li>通过<strong>Object.assign(target,sources)</strong>实现:<strong>拷贝的所有可枚举的值,指向的是同一个引用</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; (1)Object.assign(): 用于将所有可枚举的属相值从一个或者多个源对象拷贝到目标对象中并返回目标对象,对于重复的键值,后者会附在前者</span><br><span class="line">var a &#x3D; &#123; &#39;a&#39;: 1, &quot;b&quot;: 2 &#125;</span><br><span class="line">var b &#x3D; &#123; &#39;a&#39;: 3, &#39;d&#39;: 2 &#125;</span><br><span class="line">var target &#x3D; Object.assign(&#123;&#125;, a, b)</span><br><span class="line">console.log(target);&#x2F;&#x2F;&#123; a: 3, b: 2, d: 2 &#125;</span><br></pre></td></tr></table></figure><ul><li>通过<strong>展开运算符</strong>实现:<code>...</code>这里和</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2,通过展开运算符实现浅拷贝</span><br><span class="line">var p1 &#x3D; &#123;</span><br><span class="line">  age: &#39;12&#39;,</span><br><span class="line">  foo: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">var p2 &#x3D; &#123; ...p1 &#125;</span><br><span class="line">p2.age &#x3D; 19</span><br><span class="line">console.log(p1);&#x2F;&#x2F;&#123; age: &#39;12&#39; &#125;</span><br><span class="line">console.log(p2);&#x2F;&#x2F;&#123; age: 19 &#125;</span><br><span class="line">console.log(p2.foo &#x3D;&#x3D; p1.foo);&#x2F;&#x2F;true,浅拷贝,拷贝的对象指向的是同一个内存空间</span><br></pre></td></tr></table></figure><ul><li><p>通过函数库中的<a href="https://lodash.com/docs/#clone" target="_blank" rel="noopener">loadsh的_.clone()</a>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 浅拷贝3. lodash.clone(value)</span><br><span class="line">var _ &#x3D; require(&#39;lodash&#39;);</span><br><span class="line">var b &#x3D; &#123;</span><br><span class="line">  name: &#39;zhangsan&#39;,</span><br><span class="line">  age: &#39;45&#39;,</span><br><span class="line">  foo: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">var c &#x3D; _.clone(b)</span><br><span class="line">console.log(c &#x3D;&#x3D; b);&#x2F;&#x2F;false</span><br><span class="line">console.log(b.foo &#x3D;&#x3D; c.foo);&#x2F;&#x2F;true,子对象指向同一个引用</span><br></pre></td></tr></table></figure></li><li><p><strong>Array.prototype.concat()</strong></p></li><li><p><strong>Array.prototype.slice()</strong></p></li></ul><h4 id="8-3-深拷贝"><a href="#8-3-深拷贝" class="headerlink" title="8.3 深拷贝"></a>8.3 深拷贝</h4><ul><li><strong>JSON.parse(JSON.Stringify())</strong>:将对象转成JSON字符串，再用JSON.parse把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。<ul><li>不足:<ul><li>会忽略 <code>undefined</code></li><li>会忽略 <code>symbol</code></li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; (1)JSON.parse(JSON.stringify(arr))</span><br><span class="line">var obj1 &#x3D; [2, 4, &#123; name: &#39;zhangsan&#39; &#125;]</span><br><span class="line">var obj2 &#x3D; JSON.parse(JSON.stringify(obj1));</span><br><span class="line">console.log(obj2);</span><br><span class="line">console.log(obj1 &#x3D;&#x3D; obj2);&#x2F;&#x2F;false</span><br><span class="line">console.log(obj1[2] &#x3D;&#x3D; obj2[2]);&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><ul><li>函数库<strong>lodash.cloneDeep()</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; (2)lodash.cloneDeep()</span><br><span class="line">var o1 &#x3D; &#123; name: &#39;ftt&#39;, foo: &#123;&#125; &#125;</span><br><span class="line">var o2 &#x3D; _.cloneDeep(o1)</span><br><span class="line">o2.name &#x3D; &#39;sss&#39;</span><br><span class="line">console.log(o2);&#x2F;&#x2F;&#123; name: &#39;sss&#39;, foo: &#123;&#125; &#125;</span><br><span class="line">console.log(o1);&#x2F;&#x2F;&#123; name: &#39;ftt&#39;, foo: &#123;&#125; &#125;</span><br><span class="line">console.log(o1.foo &#x3D;&#x3D; o2.foo);&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><ul><li>jquery.extend()</li><li><strong>手写递归方法实现深拷贝</strong>:<strong>遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝</strong>。<ul><li>ES6新提出的两种数据结构weakSet和weakMap,表示都是弱引用,对值的引用都不计入垃圾回收机制</li><li>hasOwnProperty()用来遍历对象中的属性</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; (3)手写实现递归函数</span><br><span class="line">function deepClone(obj, hash &#x3D; new WeakMap) &#123;</span><br><span class="line">  &#x2F;&#x2F;遍历每一种情况</span><br><span class="line">  if (obj &#x3D;&#x3D; null) return obj</span><br><span class="line">  if (obj &#x3D;&#x3D; Date) return new Date(obj);</span><br><span class="line">  if (obj &#x3D;&#x3D; RegExp) return new RegExp(obj)</span><br><span class="line">  &#x2F;&#x2F;如果是对象或者普通对象不需要拷贝</span><br><span class="line">  if (typeof obj !&#x3D;&#x3D; Object) return obj</span><br><span class="line">  &#x2F;&#x2F;是对象就要进行深度考别</span><br><span class="line">  if (hash.get(obj)) return obj;</span><br><span class="line">  &#x2F;&#x2F; 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span><br><span class="line">  let cloneObj &#x3D; new obj.constructor();</span><br><span class="line">  hash.set(obj, cloneObj);</span><br><span class="line">  &#x2F;&#x2F;循环遍历</span><br><span class="line">  for (let key in obj) &#123;</span><br><span class="line">    if (obj.hasOwnProperty(key))</span><br><span class="line">      cloneObj[key] &#x3D; deepClone(obj[key], hash)</span><br><span class="line">  &#125;</span><br><span class="line">  return cloneObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-js执行过程中堆-栈以及浏览器事件机制-even-loop-和Node中的even-loop"><a href="#9-js执行过程中堆-栈以及浏览器事件机制-even-loop-和Node中的even-loop" class="headerlink" title="9 js执行过程中堆,栈以及浏览器事件机制(even loop)和Node中的even loop"></a>9 <a href="https://juejin.im/post/5b1deac06fb9a01e643e2a95" target="_blank" rel="noopener">js执行过程中堆,栈以及浏览器事件机制(even loop)和Node中的even loop</a></h3><h4 id="9-1js内存机制"><a href="#9-1js内存机制" class="headerlink" title="9.1js内存机制"></a>9.1<strong>js内存机制</strong></h4><ul><li><p>javascript具有<strong>自动垃圾回收机制,</strong>js内存中的每个数据都需要存在内存空间,</p></li><li><p><strong>js内存空间</strong>分为</p><ul><li><strong>栈空间</strong>:存储基本数据类型和调用函数</li><li><strong>堆空间</strong>:存储的是引用数据类型,<strong>堆空间的引用数据类型是不能直接操作,需要在栈空间中声明变量(存储的是地址)作为引用来指向堆空间中的地址,如果需要操作堆空间中的数据必须通过===栈空间的引用变量===</strong></li></ul><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200625075703536.png" alt="image-20200625075703536" style="zoom:80%;"><p><strong>永远都是栈中的代码先执行,在从队列中依次读取事件事件,加入到栈中执行</strong></p></li></ul><h4 id="9-2-浏览器中的事件机制-Event-loop"><a href="#9-2-浏览器中的事件机制-Event-loop" class="headerlink" title="9.2 浏览器中的事件机制(Event loop)"></a>9.2 <strong>浏览器中的事件机制(Event loop)</strong></h4><h5 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别,"></a>进程和线程的区别,</h5><ul><li><p><strong>进程是资源分配的最小单位，线程是CPU调度的最小单位</strong></p></li><li><p>二者都是<strong>CPU工作时间段的描述</strong></p><ul><li>进程描述了<strong>运行指令及加载和保存上下文所需的时间</strong>,是一个程序</li><li>线程是进程中更小的单位,描述<strong>执行一个指令所需的时间</strong></li><li>一个进程中可以有很多线程</li><li>比如打开一个页面,就是创建了一个进程,一个进程可以有很多线程,比较js引擎线程,渲染线程,http请求线程,请求结束后,线程可能就销毁</li></ul></li></ul><h5 id="js单线程带来的好处"><a href="#js单线程带来的好处" class="headerlink" title="js单线程带来的好处"></a>js单线程带来的好处</h5><ul><li>js是单线程执行的,也就是每次只有主线程执行</li><li>js渲染引擎线程和页面渲染线程,在页面加载中js引擎线程会阻止界面的渲染,表明这两个线程是 <strong>互斥</strong>的,主要原因是:js可以操作dom元素会影响页面的渲染,单线程的话就可以解决这种问题</li><li>同时<strong>单线程可以节省内存,节约上下文切换时间</strong>(没有锁)</li></ul><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><ul><li>事件循环:指的是执行完一个宏任务之后,然后执行清空所有的微任务,在执行下一个宏任务,在执行所有的微任务的循环过程,<strong>每次任务执行完毕都要进行页面的渲染,保证js内部宏任务和dom同步</strong></li><li>任务:<strong>都是存放在回调队列中</strong><ul><li>宏任务task(macrotask):script,setTimeOut,setInterval<code>，</code>setImmediate,IO,UI render</li><li>微任务jobs(microtask):promise , ajax , Object.observe,MutationObserver,process.nextTick</li></ul></li></ul><h5 id="浏览器中的事件机制理解"><a href="#浏览器中的事件机制理解" class="headerlink" title="浏览器中的事件机制理解"></a>浏览器中的事件机制理解</h5><ul><li><p>执行栈:<strong>存储函数调用</strong>的执行栈</p></li><li><p><code>JS</code> 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 <code>Task</code>（有多种 <code>task</code>） 队列中。一旦执行栈为空，<code>Event Loop</code> 就会从 <code>Task</code> 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 <code>JS</code> 中的异步还是同步行为</p></li><li><p>Even loop完整的执行顺序</p><ul><li>执行同步代码,这是宏任务</li><li>执行完宏任务之后,判断是不是有微任务</li><li>执行完所有微任务清空栈</li><li>从回调队列中执行下一次的宏任务,宏任务中异步代码的执行</li></ul><p><strong>在even loop中,如果宏任务中的异步代码有大量的计算和dom操作,为了更快的响应界面,可以把它们放在微任务中</strong></p></li></ul><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200625083724213.png" alt="image-20200625083724213" style="zoom:80%;"><h4 id="9-3-Node中的Event-Loop"><a href="#9-3-Node中的Event-Loop" class="headerlink" title="9.3 Node中的Event Loop"></a>9.3 Node中的Event Loop</h4><p>面试中问题:Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？</p><ul><li><p>Node中的Event loop和浏览器中事件循环集中是完全不同的</p></li><li><p>Node 中的Event loop是<strong>划分为6个阶段</strong>,他们<strong>会按照顺序反复执行,</strong>每当进入一个阶段,都会从回调队列中拿出函数进行执行,当队列空或者回调函数数量达到系统执行的阈值,就会进入下一个阶段</p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200626163855213.png" alt="image-20200626163855213" style="zoom:80%;"><ul><li><p><strong>timer阶段</strong>:执行的是setTimeOut和setInterval回调,并且是由<strong>poll阶段控制</strong>的,<strong>在node中执行的时间也是准确时间,只能是尽快执行</strong></p></li><li><p><strong>I/o阶段</strong>:会处理上一轮循环中的少数未执行的I/O回调</p></li><li><p><strong>idle,prepare阶段</strong>:内部已经实现</p></li><li><p><strong>poll阶段</strong>:是非常重要的阶段,</p><ul><li>系统会两件事<ul><li>回到timer阶段执行回调</li><li>执行I/O回调</li></ul></li><li>进入poll阶段,如果<strong>没有设定timer</strong>,会发生以下<ul><li>poll队列不为空,会遍历回调队列并同步执行,直到队列为空或者达到系统阈值 </li><li>poll队列为空,会进行如下操作<ul><li>如果有<code>setImmediate</code>回调需要执行,poll阶段会停止,回到check阶段执行回调</li><li>没有<code>setImmediate</code>回调需要执行,会等待回调加入到执行队列中并立即执行(这里同样会设置超时时间,防止一直等待下去)</li></ul></li></ul></li><li>如果<strong>设定了timer并且队列为空</strong>,会判断是都有timer超时,有的话直接回到timer阶段执行回调</li></ul></li><li><p><strong>check阶段</strong>:执行<code>setImmediate</code>回调</p></li><li><p><strong>close callbacks阶段</strong>:执行close事件</p></li><li><p>上面是宏任务执行情况,<strong>微任务执行会在每个阶段完成前清空微任务队列</strong></p></li></ul><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200626173525761.png" alt="image-20200626173525761" style="zoom:80%;"></li></ul><p><strong>注意</strong>:Node中的event loop和浏览器中Event loop相同点:微任务永远在宏任务之前执行</p><h5 id="process-nextTick执行顺序"><a href="#process-nextTick执行顺序" class="headerlink" title="process.nextTick执行顺序"></a><strong>process.nextTick执行顺序</strong></h5><ul><li>这个函数是<strong>独立于event loop之外</strong>的,有自己的队列,<strong>每个阶段完成之后    ,如果存在nextTick队列,就会清空队列中的所有回调函数,并且优先于其他 microtask 执行。</strong></li></ul><h4 id="9-4-小结"><a href="#9-4-小结" class="headerlink" title="9.4 小结"></a>9.4 小结</h4><ul><li>栈:(执行栈:存储函数调用的栈结构,先进后出)<ul><li>存储的基本数据类型和调用函数</li><li>按值访问</li><li>存储的值大小固定</li><li>由系统自动分配内存空间</li><li>空间小，运行效率高</li><li>栈中的DOM，ajax，setTimeout会依次进入到队列中,当栈中代码执行完毕后，再将队列中的事件放到执行栈中依次执行。</li><li>微任务和宏任务</li></ul></li></ul><p><strong>执行栈的存储是有限制的,递归的过程中存过多的调用函数没有及时的释放会出现栈溢出的情况</strong></p><ul><li>堆<ul><li>存储引用数据类型</li><li>按引用访问</li><li>存储的值大小不定，可动态调整</li><li>主要用来存放对象</li><li>空间大，但是运行效率相对较低</li><li>无序存储，可根据引用直接获取</li></ul></li></ul><p><strong>js中存储的对象,数组Array，它们值的大小是不固定的。引用数据类型的值是保存在堆内存中的对象</strong></p><h3 id="10-原型和原型链"><a href="#10-原型和原型链" class="headerlink" title="10 原型和原型链"></a>10 原型和原型链</h3><h4 id="10-1-原型"><a href="#10-1-原型" class="headerlink" title="10.1 原型"></a>10.1 原型</h4><ul><li>每个函数都有属性<code>prototype</code>属性,除了<code>Function.prototype.bind()</code>,指向自己的原型对象</li><li>每个实例对象都有<code>__proto__</code>属相,指向创建该对象的contructor的原型,其实这个属性指向的是了<code>prototype</code>,<code>prototype</code>是内部属性外部无法进行访问,通过<code>_proto__</code>来访问</li><li>对象可以通过<code>__proto__</code>来查找不属于自己的属性,<code>__proto__</code>将原型连接起来形成原型链</li></ul><h4 id="10-2-小结"><a href="#10-2-小结" class="headerlink" title="10.2 小结"></a>10.2 小结</h4><ul><li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li><li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li><li>函数的 <code>prototype</code> 是一个对象</li><li>对象的 <code>__proto__</code> 属性指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链</li></ul><h3 id="11-原型继承和class继承"><a href="#11-原型继承和class继承" class="headerlink" title="11 原型继承和class继承"></a>11 原型继承和class继承</h3><h4 id="11-1-原型如何实现继承"><a href="#11-1-原型如何实现继承" class="headerlink" title="11.1 原型如何实现继承"></a>11.1 原型如何实现继承</h4><ul><li>本质是将<strong>子类的原型指向父类</strong></li><li>组合继承:在子类的构造函数中通过 <code>Parent.call(this)</code> 继承父类的属性，然后改变子类的原型为 <code>new Parent()</code> 来继承父类的函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.组合继承:将子类的原型指向父类,就可以直接继承父类的方法和属性</span><br><span class="line">function Father(name) &#123;</span><br><span class="line">this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.getName &#x3D; function () &#123;</span><br><span class="line">return this.name</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;定义子类</span><br><span class="line">function Child(name) &#123;</span><br><span class="line">&#x2F;&#x2F;继承父类的属性</span><br><span class="line">Father.call(this, name)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;将子类的原型指向父类的实例,继承父类的方法</span><br><span class="line">Child.prototype &#x3D; new Father();</span><br><span class="line">const c &#x3D; new Child(&#39;张三&#39;);</span><br><span class="line">console.log(c.name)&#x2F;&#x2F;张三</span><br><span class="line">console.log(c.getName())&#x2F;&#x2F;张三</span><br><span class="line">console.log(c instanceof Father)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h4 id="11-2-class如何实现继承"><a href="#11-2-class如何实现继承" class="headerlink" title="11.2 class如何实现继承"></a>11.2 class如何实现继承</h4><ul><li><code>class</code> 实现继承的核心在于使用 <code>extends</code> 表明继承自哪个父类，并且在子类构造函数中必须调用 <code>super</code>，因为这段代码可以看成 <code>Parent.call(this, value)</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2. class继承实现</span><br><span class="line">class CFather&#123;</span><br><span class="line">constructor(name)&#123;</span><br><span class="line">this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName()&#123;</span><br><span class="line">return this.name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过extends实现继承,通过super继承父类中的方法</span><br><span class="line">class CChild extends CFather&#123;</span><br><span class="line">constructor(name)&#123;</span><br><span class="line">&#x2F;&#x2F;继承父类中的属性和方法</span><br><span class="line">super(name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cchild &#x3D; new CChild(&#39;王富贵&#39;);</span><br><span class="line">console.log(cchild.name);&#x2F;&#x2F;王富贵</span><br><span class="line">console.log(cchild.getName());&#x2F;&#x2F;王富贵</span><br><span class="line">console.log(cchild instanceof CFather);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h4 id="11-3-class的本质"><a href="#11-3-class的本质" class="headerlink" title="11.3 class的本质"></a>11.3 class的本质</h4><ul><li>class的本质是function</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">construnctor(name)&#123;</span><br><span class="line">this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">person instanceof Function &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h1 id="ES6常考知识点"><a href="#ES6常考知识点" class="headerlink" title="ES6常考知识点"></a>ES6常考知识点</h1><h3 id="1-var-let-const"><a href="#1-var-let-const" class="headerlink" title="1. var let const"></a>1. var let const</h3><ul><li>let 和const是ES6中,<ul><li>存在块级作用域,</li><li>没有变量的提升,使用之前必须先声明</li><li>const 用于定义常量,内存地址,</li><li>let用于定于变量,该块处于从块开始到初始化处理的<code>暂时性死区</code></li></ul></li><li>var <ul><li>存在变量的提升,会自动在内存中创建空间,可以先使用后使用,此时变量的值undefined</li><li>let并不会自动在内存总创建空间,而是在初始化的时候才会开辟内存空间</li></ul></li><li>小结<ul><li>函数提升优先于变量提升，函数提升会把<strong>整个函数</strong>挪到作用域顶部，变量提升只会把声明挪到作用域顶部</li><li><code>var</code> 存在提升，我们能在声明之前使用。<code>let</code>、<code>const</code> 因为暂时性死区的原因，不能在声明前使用</li><li><code>var</code> 在<strong>全局作用域下</strong>声明变量会导致变量挂载在 <code>window</code> 上，其他两者不会</li><li><code>let</code> 和 <code>const</code> 作用基本一致，但是后者声明的变量不能再次赋值</li></ul></li></ul><h3 id="2-promise-解决异步编程"><a href="#2-promise-解决异步编程" class="headerlink" title="2 .promise(解决异步编程)"></a>2 .promise(解决异步编程)</h3><h4 id="2-1-promise的api"><a href="#2-1-promise的api" class="headerlink" title="2.1 promise的api"></a>2.1 promise的api</h4><ul><li><p>解决的问题:promise解决了回调<strong>地狱问题</strong></p></li><li><p>promise的API:promise是ES6中提出解决 <strong>异步编程的问题</strong>,可以进行 <strong>then方式链式调用</strong>,<strong>用来进行延迟和异步计算</strong></p><ul><li>promise中存在的状态有pending状态,fullfilled,rejected三种状态,初始状态时pending,一旦转变为其他两种状态就不能在改变</li><li>主要是promise中传入的函数参数resolve()和reject()函数会根据promise的状态进行调用,fullfilled状态调用resolve函数,rejected状态调用reject函数</li><li>promise的then()方式返回的都是promise实例(和<strong>之前的实例时不一样</strong>的),传递的参数是两个函数,函数中掺入值用于异步接收resolve()和reject()函数传递过来的值,<strong>then方式可以链式调用,当状态发生改变时执行promise的回调栈中加入的回调函数</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure></li><li><p><strong>promise在执行过程中是同步执行</strong>,<strong>then方法在执行过程中是异步执行,</strong>会加入入到循环队列中(次数可扩展even loop继续讲解)</p></li></ul><h4 id="2-2-promise的实现"><a href="#2-2-promise的实现" class="headerlink" title="2.2 promise的实现"></a>2.2 promise的实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 三个常量用于表示状态</span><br><span class="line">const PENDING &#x3D; &#39;pending&#39;</span><br><span class="line">const RESOLVED &#x3D; &#39;resolved&#39;</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39;</span><br><span class="line"></span><br><span class="line">function MyPromise(fn) &#123;</span><br><span class="line">  const that &#x3D; this</span><br><span class="line">  this.state &#x3D; PENDING</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; value 变量用于保存 resolve 或者 reject 中传入的值</span><br><span class="line">  this.value &#x3D; null</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 用于保存 then 中的回调，因为当执行完 Promise 时状态可能还是等待中，这时候应该把 then 中的回调保存起来用于状态改变时使用</span><br><span class="line">  that.resolvedCallbacks &#x3D; []</span><br><span class="line">  that.rejectedCallbacks &#x3D; []</span><br><span class="line"></span><br><span class="line">  function resolve(value) &#123;</span><br><span class="line">    &#x2F;&#x2F; 首先两个函数都得判断当前状态是否为等待中</span><br><span class="line">    if (that.state &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">      that.state &#x3D; RESOLVED</span><br><span class="line">      that.value &#x3D; value</span><br><span class="line">      &#x2F;&#x2F; 遍历回调数组并执行</span><br><span class="line">      that.resolvedCallbacks.map(cb &#x3D;&gt; cb(that.value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function reject(value) &#123;</span><br><span class="line">    if (that.state &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">      that.state &#x3D; REJECTED</span><br><span class="line">      that.value &#x3D; value</span><br><span class="line">      that.rejectedCallbacks.map(cb &#x3D;&gt; cb(that.value))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 完成以上两个函数以后，我们就该实现如何执行 Promise 中传入的函数了</span><br><span class="line">  try &#123;</span><br><span class="line">    fn(resolve, reject)</span><br><span class="line">  &#125;catch(e)&#123;</span><br><span class="line">    reject(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 最后我们来实现较为复杂的 then 函数</span><br><span class="line">MyPromise.prototype.then &#x3D; function (onFulfilled, onRejected) &#123;</span><br><span class="line">  const that &#x3D; this</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 判断两个参数是否为函数类型，因为这两个参数是可选参数</span><br><span class="line">  onFulfilled &#x3D; typeof onFulfilled &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onFulfilled : v &#x3D;&gt; v</span><br><span class="line">  onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onRejected : e &#x3D;&gt;&#123;throw e&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 当状态不是等待态时，就去执行相对应的函数。如果状态是等待态的话，就往回调函数中 push 函数</span><br><span class="line">    if (this.state &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">      this.resolvedCallbacks.push(onFulfilled)</span><br><span class="line">      this.rejectedCallbacks.push(onRejected)</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.state &#x3D;&#x3D;&#x3D; RESOLVED) &#123;</span><br><span class="line">      onFulfilled(that.value)</span><br><span class="line">    &#125;</span><br><span class="line">    if (this.state &#x3D;&#x3D;&#x3D; REJECTED) &#123;</span><br><span class="line">      onRejected(that.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-generator-解决异步编程"><a href="#3-generator-解决异步编程" class="headerlink" title="3 generator(解决异步编程)"></a>3 generator(解决异步编程)</h3><ul><li><strong>遍历器对象</strong>生成函数,可以<strong>交出函数的执行权</strong>,可以解决<strong>异步编程</strong>的问题</li><li>特点<ul><li><code>function</code>和函数名之间通过<code>*</code>连接</li><li>函数体内部通过表达式<code>yield</code>来控制状态(暂停代码)</li><li>通过next()来控制下一步状态的执行</li></ul></li><li>实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function* test() &#123;</span><br><span class="line">  let a &#x3D; 4;</span><br><span class="line">  yield 2;</span><br><span class="line">  yield 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let b &#x3D; test();</span><br><span class="line">console.log(b.next());&#x2F;&#x2F;&#123; value: 2, done: false &#125;</span><br><span class="line">console.log(b.next());&#x2F;&#x2F;&#123; value: 3, done: false &#125;</span><br><span class="line">console.log(b.next());&#x2F;&#x2F;&#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure><h3 id="4-async-await-解决异步编程-使用前提是promise对象"><a href="#4-async-await-解决异步编程-使用前提是promise对象" class="headerlink" title="4 async/await(解决异步编程,使用前提是promise对象)"></a>4 async/await(解决异步编程,使用前提是promise对象)</h3><ul><li>异步函数是generator函数的语法糖。有更好的语义、更好的适用性、返回值是 <code>Promise</code>。</li><li>async-&gt;<code>*</code>(同步执行)</li><li>await-&gt;yield(异步执行)  ,await返回的是一个promise对象,会被加入到队列中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">async function timeout (ms) &#123;</span><br><span class="line">  await new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(resolve, ms)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">async function asyncConsole (value, ms) &#123;</span><br><span class="line">  await timeout(ms)</span><br><span class="line">  console.log(value)</span><br><span class="line">&#125;</span><br><span class="line">asyncConsole(&#39;hello async and await&#39;, 1000)</span><br></pre></td></tr></table></figure><h3 id="5-异步编程的小结"><a href="#5-异步编程的小结" class="headerlink" title="5 异步编程的小结"></a>5 异步编程的小结</h3><ul><li>async/await和promise的区别<ul><li><code>async</code> 和 <code>await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 then 的调用链，能够更清晰准确的写出代码。缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的<strong>异步代码</strong>并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性</li></ul></li><li>异步编程的实现<ul><li>传统的异步编程<ul><li>回调函数(不利于维护，代码耦合高)</li><li>事件监听(事件驱动型，流程不够清晰)</li><li>发布订阅(观察者)(类似于事件监听,可以通过消息中心,了解现有多少发布者有多少订阅者)</li></ul></li><li>ES6中的实现方式:<ul><li>promise</li><li>generator</li><li>async/await</li></ul></li></ul></li><li>传统的异步编程实现方式之一:协程，多个线程互相协作，完成异步任务。</li></ul><h3 id="6-模块化"><a href="#6-模块化" class="headerlink" title="6 模块化"></a>6 模块化</h3><h4 id="6-1模块化优势"><a href="#6-1模块化优势" class="headerlink" title="6.1模块化优势"></a>6.1模块化优势</h4><ul><li>解决命名冲突</li><li>提高代码的复用性</li><li>提高代码的可维护性</li></ul><h4 id="6-2模块化实现的方式"><a href="#6-2模块化实现的方式" class="headerlink" title="6.2模块化实现的方式"></a>6.2模块化实现的方式</h4><ul><li>立即执行函数IIFE </li><li>AMD/CMD</li><li>CommonJS(在node中使用,现在在webpack中也使用)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var module &#x3D; require(&#39;.&#x2F;a.js&#39;)</span><br><span class="line">module.exports &#x3D;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ES module(ES6中提出来的模块化概念)主要在前端中使用(浏览器)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入模块 API</span><br><span class="line">import XXX from &#39;.&#x2F;a.js&#39;</span><br><span class="line">import &#123; XXX &#125; from &#39;.&#x2F;a.js&#39;</span><br><span class="line">&#x2F;&#x2F; 导出模块 API</span><br><span class="line">export function a() &#123;&#125;</span><br><span class="line">export default function() &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>CommonJS和ES Module的区别</strong></p><ul><li>ES Module 是<strong>原生实现的模块化方案</strong>，与 CommonJS 有以下几个区别<ul><li>CommonJs是<strong>动态导入</strong>的,导入就会立即执行,后者不支持</li><li>CommonJs是<strong>同步导入</strong>,用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大;后者是异步导入,因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响</li><li>CommonJs在导出的时候是<strong>值拷贝</strong>,每次导出的值变了,必须重新进行导入,后者采用的是实时绑定的方式,导入和导出都是指向同一个内存空间,是<strong>地址拷贝</strong></li><li>ES Module 会编译成 <code>require/exports</code> 来执行的</li></ul></li></ul><h3 id="7-proxy可以实现什么功能"><a href="#7-proxy可以实现什么功能" class="headerlink" title="7 proxy可以实现什么功能"></a>7 proxy可以实现什么功能</h3><h4 id="7-1-基本概念"><a href="#7-1-基本概念" class="headerlink" title="7.1 基本概念"></a>7.1 基本概念</h4><ul><li><p>proxy:代理,<strong>可以自定义对象中的操作(traps)</strong>,通过操作new的<strong>proxy实例对象就可以直接操作被代理的对象,</strong></p><p>Proxy 就像在目标对象之间的一个代理，任何对目标的操作都要经过代理。代理就可以对外界的操作进行<strong>过滤和改写</strong>。</p></li><li><p>用法:<code>let p = proxy(target,handle)</code></p><ul><li>target:被代理的对象</li><li>handle(参数是代理函数对象):<code>handler</code>是一个<strong>对象</strong>，其属性是当执行一个操作时定义代理的行为的函数。,其中的traps包括如下图</li></ul><p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200625191808948.png" alt="image-20200625191808948"></p></li><li><p>应用: Vue3.0 中将会通过 <code>Proxy</code> 来替换原本的 <code>Object.defineProperty</code> 来实现<strong>数据响应式</strong></p></li></ul><h4 id="7-2补充Reflect"><a href="#7-2补充Reflect" class="headerlink" title="7.2补充Reflect"></a>7.2<strong><a href="https://juejin.im/post/5c7e6857e51d4542194f8c6f#heading-0" target="_blank" rel="noopener">补充Reflect</a></strong></h4><ul><li><p><code>Reflect</code>是一个内置的对象，它提供<strong>拦截 JavaScript 操作</strong>的方法。Reflect不是一个函数对象，因此它是不可构造的。<code>Reflect</code>的所有的方法都是<strong>静态</strong>的就和<code>Math</code>一样，目前它还没有静态属性。</p><p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法相同。有十三种静态方法</p><ul><li><code>has(target, key)</code> 与<code>in</code>操作符一样，让判断操作都变成函数行为。</li><li><code>deleteProperty(target, key)</code> 与<code>delete</code>操作符一样，让删除操作变成函数行为，返回布尔值代表成功或失败。</li><li><code>construct(target, argumentsList[, newTarget])</code> 与<code>new</code>操作符一样，<code>target</code>构造函数，第二参数是构造函数参数类数组，第三个是<a href="https://juejin.im/post/5c7a6fb0e51d4539982f5039#heading-4" target="_blank" rel="noopener">new.target</a>的值。</li><li><code>get(target, key[, receiver])</code> 与<code>obj[key]</code>一样，第三个参数是当要取值的<code>key</code>部署了<code>getter</code>时，访问其函数的<code>this</code>绑定为<code>receiver</code>对象。注意这里的receiver在代理中指向的是proxy</li><li><code>set(target, key, value[, receiver])</code> 设置<code>target</code>对象的<code>key</code>属性等于<code>value</code>，第三个参数和<code>set</code>一样。返回一个布尔值。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">reflect是ES6中新添加的方法,用于拦截javascript操作</span><br><span class="line">新老写法的对比</span><br><span class="line">console.log(&#39;assign&#39; in Object);&#x2F;&#x2F;true</span><br><span class="line">console.log(Reflect.has(Object,&#39;assign&#39;));&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">这里的Function.prototype.apply.call(a,b,arg)&#x3D;&#x3D;b.a(args)</span><br><span class="line">*&#x2F;</span><br><span class="line">Function.prototype.apply.call(Math.floor,undefined,[1.75])&#x2F;&#x2F;1</span><br><span class="line">Reflect.apply(Math.floor,undefined,[1.75])&#x2F;&#x2F;1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除</span><br><span class="line">delete obj.foo;</span><br><span class="line">Reflect.deleteProperty(obj,&#39;foo&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;new</span><br><span class="line">const p &#x3D; new Object(&#39;张三&#39;)</span><br><span class="line">const p1 &#x3D; Reflect.constructor(Object,[&#39;张三&#39;])&#x2F;&#x2F;注意参数是一个数组的像是</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重新定于属性,参数3是一个对象(定义或者修改的属性描述符),</span><br><span class="line">Object.defineProperty(myDate,&#39;now&#39;,&#123;</span><br><span class="line">value:()&#x3D;&gt;Date.now()</span><br><span class="line">&#125;)</span><br><span class="line">Reflect.defineProperty(myDate,&#39;now&#39;,&#123;</span><br><span class="line">value:()&#x3D;&gt;Date.now()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">foo:1,</span><br><span class="line">bar:2,</span><br><span class="line">get bar()&#123;</span><br><span class="line">return this.foo+this.bar</span><br><span class="line">&#125;,</span><br><span class="line">get foo()&#123;</span><br><span class="line">return this.foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var receiveObj &#x3D; &#123;</span><br><span class="line">foo:5,</span><br><span class="line">bar:6,</span><br><span class="line">&#125;</span><br><span class="line">var res &#x3D; Reflect.get(obj,&#39;bar&#39;,receiveObj)&#x2F;&#x2F;11将bar的get方法的this指向receiveObj</span><br><span class="line">var res &#x3D; Reflect.get(obj,&#39;foo&#39;,receiveObj)&#x2F;&#x2F;5将foo的get方法的this指向receiveObj</span><br></pre></td></tr></table></figure><h4 id="7-3-this的指向"><a href="#7-3-this的指向" class="headerlink" title="7.3 this的指向"></a>7.3 this的指向</h4><ul><li>虽然 Proxy 可以代理针对目标对象的访问，但它不是<strong>目标对象的透明代理</strong>，即<strong>不做任何拦截的情况下</strong>，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下<strong>，目标对象内部的<code>this</code>关键字会指向 Proxy 代理</strong>。</li></ul><h4 id="7-4通过proxy实现数据的响应式"><a href="#7-4通过proxy实现数据的响应式" class="headerlink" title="7.4通过proxy实现数据的响应式"></a>7.4通过proxy实现数据的响应式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">let onWatch &#x3D; (obj, setBind, getLogger) &#x3D;&gt; &#123;</span><br><span class="line">  let handler &#x3D; &#123;</span><br><span class="line">    get(target, property, receiver) &#123;</span><br><span class="line">      getLogger(target, property)</span><br><span class="line">      &#x2F;&#x2F;这里receiver始终指向proxy,表示的是target中的getter方法的this</span><br><span class="line">      return Reflect.get(target, property, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    set(target, property, value, receiver) &#123;</span><br><span class="line">      setBind(value, property)</span><br><span class="line">      return Reflect.set(target, property, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return new Proxy(obj, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj &#x3D; &#123; a: 1 &#125;</span><br><span class="line">let p &#x3D; onWatch(</span><br><span class="line">  obj,</span><br><span class="line">  (v, property) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;监听到属性$&#123;property&#125;改变为$&#123;v&#125;&#96;)</span><br><span class="line">  &#125;,</span><br><span class="line">  (target, property) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;&#39;$&#123;property&#125;&#39; &#x3D; $&#123;target[property]&#125;&#96;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">p.a &#x3D; 2 &#x2F;&#x2F; 监听到属性a改变</span><br><span class="line">p.a &#x2F;&#x2F; &#39;a&#39; &#x3D; 2</span><br></pre></td></tr></table></figure><ul><li>自定义 <code>set</code> 和 <code>get</code> 函数的方式，在原本的逻辑中插入了我们的函数逻辑，实现了在对对象任何属性进行读写时发出通知。</li><li>需要实现一个 Vue 中的响应式，需要我们在 <code>get</code> 中<strong>收集依赖</strong>，在 <code>set</code> 派发更新，之所以 Vue3.0 要使用 <code>Proxy</code> 替换原本的 API 原因在于 <code>Proxy</code> 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 <code>Proxy</code> 可以完美监听到任何方式的数据改变，唯一缺陷可能就是浏览器的兼容性不好了</li></ul><h3 id="8-reduce-map-filter"><a href="#8-reduce-map-filter" class="headerlink" title="8 reduce map filter"></a>8 reduce map filter</h3><ul><li><p>map:用于生成一个新的数组,将每个元素拿出来做完变换在存储在新的数组中</p><ul><li><p><code>map</code> 的回调函数接受三个参数，分别是当前<strong>索引元素，索引</strong>，<strong>原数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].map(v &#x3D;&gt; v + 1) &#x2F;&#x2F; -&gt; [2, 3, 4]</span><br><span class="line"></span><br><span class="line">[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map(parseInt)</span><br><span class="line">第一轮遍历 parseInt(&#39;1&#39;, 0) -&gt; 1  转化为八进制</span><br><span class="line">第二轮遍历 parseInt(&#39;2&#39;, 1) -&gt; NaN  </span><br><span class="line">第三轮遍历 parseInt(&#39;3&#39;, 2) -&gt; NaN,2进制的表示中不存在3</span><br></pre></td></tr></table></figure></li><li><p>parseint(string,radix),</p><ul><li>radix表示的进制,范围在2-36,在这个范围之外是不能转化为数字的返回NaN</li><li>radix为0,undefined或者未指定会默认做以下情况<ul><li>string以<code>0x</code>开头默认十六进制</li><li>string以<code>0</code>开头默认八进制</li><li>string以任何其他值开头的,默认为十进制</li></ul></li></ul></li></ul></li><li><p>filter:返回一个新的数组,遍历的时候将条件返回为true的元素存在新的数组中,可以过滤数组中的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;filter</span><br><span class="line">var arrFilter &#x3D; [1,4,6].filter(function(index) &#123;</span><br><span class="line">return index&gt;4;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arrFilter)&#x2F;&#x2F;[6]</span><br></pre></td></tr></table></figure></li><li><p>reduce:<code>reduce</code> 可以将数组中的元素通过回调函数最终转换为一个值。实现累加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;reduce用于累加求和,第三个参数表示acc的初始值</span><br><span class="line">var arrSum &#x3D; [3,4,6,7].reduce((acc,cur)&#x3D;&gt;acc+&#x3D;cur,0)</span><br><span class="line">console.log(arrSum)&#x2F;&#x2F;20</span><br><span class="line"></span><br><span class="line">var arrSum1 &#x3D; [3,6,7,9].reduce((acc,cur)&#x3D;&gt;&#123;</span><br><span class="line">acc.push(cur);</span><br><span class="line">return acc&#x2F;&#x2F;注意这里一定要返回acc赋值给acc</span><br><span class="line">&#125;,[])</span><br><span class="line">console.log(arrSum1)&#x2F;&#x2F;[3,6,7,9]是数组的拷贝</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-JS异步编程及常考面试题"><a href="#9-JS异步编程及常考面试题" class="headerlink" title="9 JS异步编程及常考面试题"></a>9 JS异步编程及常考面试题</h3><h4 id="9-1-并发和并行的区别"><a href="#9-1-并发和并行的区别" class="headerlink" title="9.1 并发和并行的区别"></a>9.1 并发和并行的区别</h4><ul><li>并发:是宏观概念,当有两个任务,在一段时间内通过任务间的切换完成了两个任务,实际是同一个时刻只有任务在执行</li><li>并行:微观概念,两个任务在同一个时刻同时执行的情况是并行情况</li></ul><h4 id="9-2异步编程的集中方式举例分析"><a href="#9-2异步编程的集中方式举例分析" class="headerlink" title="9.2异步编程的集中方式举例分析"></a>9.2异步编程的集中方式举例分析</h4><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a><strong>回调函数</strong></h5><ul><li><p>通过逻辑嵌套的方式实现异步编程,<strong>会出现回调地狱的问题</strong></p></li><li><p>回调函数的根本问题:</p><ul><li>逻辑嵌套,耦合性太高,牵一发而动全身</li><li>不利于处理错误,</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajax(url, () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 处理逻辑</span><br><span class="line">    ajax(url1, () &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 处理逻辑</span><br><span class="line">        ajax(url2, () &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 处理逻辑</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h5 id="generator"><a href="#generator" class="headerlink" title="generator"></a><strong>generator</strong></h5><ul><li><p>理解:</p><ul><li>generator是一个遍历器生成函数,<strong>可以交出控制权,实现异步编程</strong></li><li>返回的是一个迭代器</li><li>通过yield控制状态</li><li>通过next控制下一步的执行</li></ul></li><li><p>可以解决回调函数中的回调地狱问题</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function *fetch() &#123;</span><br><span class="line">    yield ajax(url, () &#x3D;&gt; &#123;&#125;)</span><br><span class="line">    yield ajax(url1, () &#x3D;&gt; &#123;&#125;)</span><br><span class="line">    yield ajax(url2, () &#x3D;&gt; &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let it &#x3D; fetch()</span><br><span class="line">let result1 &#x3D; it.next()</span><br><span class="line">let result2 &#x3D; it.next()</span><br><span class="line">let result3 &#x3D; it.next()</span><br></pre></td></tr></table></figure><h5 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h5><ul><li><code>Promise</code> 实现了链式调用，也就是说每次调用 <code>then</code> 之后返回的都是一个 <code>Promise</code>，并且是一个全新的 <code>Promise</code>，原因也是因为状态不可变。如果你在 <code>then</code> 中 使用了 <code>return</code>，那么 <code>return</code> 的值会被 <code>Promise.resolve()</code> 包装</li><li><code>Promise</code> 也很好地解决了回调地狱的问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ajax(url)</span><br><span class="line">  .then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">      return ajax(url1)</span><br><span class="line">  &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">      return ajax(url2)</span><br><span class="line">  &#125;).then(res &#x3D;&gt; console.log(res))</span><br></pre></td></tr></table></figure><ul><li><p>缺点:无法取消promise,错误需要通过回调函数捕获</p></li><li><p>Promise 构造函数执行和 then 函数执行有什么区别？前者同步执行,后者异步执行</p></li></ul><h5 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a><strong>async/await</strong></h5><ul><li>特点<ul><li>函数加上<code>async</code> 返回的就是一个promise对象,将函数的返回值通过promise.resolve()进行了包装,和then中处理返回值一样,通过await直接接收到返回值</li><li>await必须和async同时使用</li><li>await 内部实现了 <code>generator</code>，其实 <code>await</code> 就是 <code>generator</code> 加上 <code>Promise</code> 的语法糖，且内部实现了自动执行 <code>generator</code></li><li>await是解决回到地狱问题的终极方案</li></ul></li><li>优势:相对于promise来说,异步函数的优势在于then的调用链,代码简洁,也能很优雅的解决回调地狱的问题</li><li>问题:滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的<strong>异步代码</strong>并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性</li></ul><h5 id="常用的定时器函数-setTimeout、setInterval、requestAnimationFrame"><a href="#常用的定时器函数-setTimeout、setInterval、requestAnimationFrame" class="headerlink" title="常用的定时器函数(setTimeout、setInterval、requestAnimationFrame)"></a><strong>常用的定时器函数(setTimeout、setInterval、requestAnimationFrame)</strong></h5><ul><li><p>setTimeOut: 并不是延时多久就多久执行,js是单线程执行的,前面的代码如果影响性能,后面的代码并不会定时执行</p></li><li><p>setInterval:和前者类似,是每隔一段时间执行一次,也不能保证准时执行</p><ul><li>不建议使用:(1)不能保证在于其时间执行任务,(2)存在累计执行的问题</li></ul></li><li><p><strong>requestAnimationFrame:自带函数的节流功能,可以保证在16.6毫秒内只执行一次(不掉帧的情况),该函数的延时效果是精确的</strong>(多数显示屏的默认频率是60HZ,即1秒刷新60次,1/60*1000 = 16.6ms)调用还函数的是windows所以显示屏的默认刷新频率是有关系的</p><ul><li>通过requestAnimationFrame实现循环定时器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过requestAnimationFrame实现循环定时器</span><br><span class="line">function intervalTimer(callback, interval) &#123;</span><br><span class="line">  let timer;</span><br><span class="line">  const now &#x3D; Date.now;&#x2F;&#x2F;这里只是声明,并没有调用</span><br><span class="line">  let startTime &#x3D; now();&#x2F;&#x2F;调用now()方法</span><br><span class="line">  let endTime &#x3D; startTime;</span><br><span class="line">  &#x2F;&#x2F;浏览器重绘之前调用的执行的回调函数</span><br><span class="line">  const loop &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;设置定时器,浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame()</span><br><span class="line">    timer &#x3D; window.requestAnimationFrame(loop);</span><br><span class="line">    endTime &#x3D; now();&#x2F;&#x2F;最终时间就是当前时间</span><br><span class="line">    if (endTime - startTime &gt;&#x3D; interval) &#123;</span><br><span class="line">      &#x2F;&#x2F;达到指定时间执行函数,并肩记录时间的值初始化</span><br><span class="line">      endTime &#x3D; startTime &#x3D; now()</span><br><span class="line">      &#x2F;&#x2F; 执行回调函数</span><br><span class="line">      callback(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  timer &#x3D; window.requestAnimationFrame(loop);</span><br><span class="line">  return timer</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;调用</span><br><span class="line">let a &#x3D; 0;</span><br><span class="line">intervalTimer((timer) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  a++</span><br><span class="line">  if (a &#x3D;&#x3D; 3) &#123;</span><br><span class="line">    &#x2F;&#x2F;取消</span><br><span class="line">    window.cancelAnimationFrame(timer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-3面试题-通过js封装一个定时器"><a href="#9-3面试题-通过js封装一个定时器" class="headerlink" title="9.3面试题:通过js封装一个定时器"></a><strong>9.3面试题</strong>:通过js封装一个定时器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">用js封装一个定时器</span><br><span class="line">timer:json对象</span><br><span class="line">&#123;</span><br><span class="line">count:定时器次数</span><br><span class="line">action:回调函数</span><br><span class="line">interval:时间间隔</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">function Timer(timer)&#123;</span><br><span class="line">    this.loop &#x3D; function()&#123;</span><br><span class="line">        &#x2F;&#x2F;如果指定了定时器执行次数则处理次数控制逻辑</span><br><span class="line">    if (timer.count)&#123;</span><br><span class="line">        &#x2F;&#x2F;在timer对象上通过晚绑定一个属性用于充当计数器作用</span><br><span class="line">    if (!timer.value)&#123;</span><br><span class="line">        &#x2F;&#x2F;如果这个属性不存在则进行晚绑定,并设置初始值为0</span><br><span class="line">    timer.value&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line">    timer.value++;</span><br><span class="line">    &#x2F;&#x2F;如果执行次数大于了总次数则退出该函数,不再递归执行</span><br><span class="line">    if (timer.value&gt;timer.count)&#123;    </span><br><span class="line">    return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果指定了回调函数则执行回调函数</span><br><span class="line">    if (timer.action)&#123;</span><br><span class="line">    timer.action(timer.value?timer.value:&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;递归调用当前匿名函数(arguments对象的callee属性,取得当前函数对象,实现函数匿名引用)</span><br><span class="line">    window.setTimeout(arguments.callee,timer.interval);</span><br><span class="line">    &#x2F;&#x2F;arguments.callee:指向拥有这个 arguments 对象的函数</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F;开始执行定时器的方法</span><br><span class="line">    this.start&#x3D;function()&#123;</span><br><span class="line">        window.setTimeout(this.loop,timer.interval);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="js进阶知识点"><a href="#js进阶知识点" class="headerlink" title="js进阶知识点"></a>js进阶知识点</h1><h3 id="1-bind-amp-call-amp-amp-apply"><a href="#1-bind-amp-call-amp-amp-apply" class="headerlink" title="1 bind&amp;call&amp;&amp;apply"></a>1 bind&amp;call&amp;&amp;apply</h3><h4 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h4><ul><li>相同点:三者都是用来改变this的指向</li><li>不同点:<ul><li>call和apply作用相同,除了接收第一个参数相同之外<ul><li>call还可以接收一个参数列表</li><li>apply接收一个参数数组</li></ul></li><li>bind和其他方法作用一样,bind返回的是一个函数,bind可以实现函数柯里化</li></ul></li></ul><h4 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h4><h5 id="apply实现"><a href="#apply实现" class="headerlink" title="apply实现"></a>apply实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2.模拟实现apply(可接收数组列列表)</span><br><span class="line">Function.prototype.myApply &#x3D; function (context) &#123;</span><br><span class="line">  var context &#x3D; context || window;</span><br><span class="line">  context.fn &#x3D; this;</span><br><span class="line">  var result;</span><br><span class="line">  &#x2F;&#x2F;参数判断</span><br><span class="line">  if (arguments[1]) &#123;</span><br><span class="line">    result &#x3D; context.fn(...arguments[1])</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    result &#x3D; context.fn();</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;删除fn</span><br><span class="line">  delete context.fn;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="call实现"><a href="#call实现" class="headerlink" title="call实现"></a>call实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.模拟实现call(可接受参数列表)</span><br><span class="line">Function.prototype.myCall &#x3D; function (context) &#123;</span><br><span class="line">  var context &#x3D; context || window;</span><br><span class="line">  &#x2F;&#x2F; 将this指向fn</span><br><span class="line">  context.fn &#x3D; this;</span><br><span class="line">  var args &#x3D; [...arguments].slice(1);</span><br><span class="line">  var result &#x3D; context.fn(args);</span><br><span class="line">  &#x2F;&#x2F;删除临时函数</span><br><span class="line">  delete context.fn;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bind实现"><a href="#bind实现" class="headerlink" title="bind实现"></a>bind实现</h5><ul><li><code>bind</code> 返回了一个函数，对于函数来说有两种方式调用，一种是直接调用，一种是通过 <code>new</code> 的方式，我们先来说直接调用的方式</li><li>对于直接调用来说，这里选择了 <code>apply</code> 的方式实现，但是对于参数需要注意以下情况：因为 <code>bind</code> 可以实现类似这样的代码 <code>f.bind(obj, 1)(2)</code>，所以我们需要将两边的参数拼接起来，于是就有了这样的实现 <code>args.concat(...arguments)</code></li><li>最后来说通过 <code>new</code> 的方式，在之前的章节中我们学习过如何判断 <code>this</code>，对于 <code>new</code> 的情况来说，不会被任何方式改变 <code>this</code>，所以对于这种情况我们需要忽略传入的 <code>this</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myBind &#x3D; function (context) &#123;</span><br><span class="line">  if (typeof this !&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    throw new TypeError(&#39;Error&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  const _this &#x3D; this</span><br><span class="line">  const args &#x3D; [...arguments].slice(1)</span><br><span class="line">  &#x2F;&#x2F; 返回一个函数</span><br><span class="line">  return function F() &#123;</span><br><span class="line">    &#x2F;&#x2F; 因为返回了一个函数，我们可以 new F()，所以需要判断</span><br><span class="line">    if (this instanceof F) &#123;</span><br><span class="line">      return new _this(...args, ...arguments)</span><br><span class="line">    &#125;</span><br><span class="line">    return _this.apply(context, args.concat(...arguments))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-new"><a href="#2-new" class="headerlink" title="2 new"></a>2 new</h3><h4 id="2-1-new的原理"><a href="#2-1-new的原理" class="headerlink" title="2.1 new的原理"></a>2.1 new的原理</h4><ul><li>在调用new的过程中共发生了四件事<ul><li>创建一个新的对象</li><li>链接到;原型</li><li>绑定了this</li><li>返回新对象</li></ul></li><li>手动实现new</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function create() &#123;</span><br><span class="line">  &#x2F;&#x2F;创建对象</span><br><span class="line">  const obj &#x3D; &#123;&#125;;</span><br><span class="line">  &#x2F;&#x2F;绑定原型</span><br><span class="line">  let Con &#x3D; [].shift().call(arguments);</span><br><span class="line">  obj.__proto__ &#x3D; Con.prototype;</span><br><span class="line">  &#x2F;&#x2F;指定this</span><br><span class="line">  let result &#x3D; Con.apply(obj, arguments);</span><br><span class="line">  &#x2F;&#x2F;返回对象</span><br><span class="line">  return result instanceof Object ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-通过new创建的对象和通过字面量创建的对象有什么区别"><a href="#2-2-通过new创建的对象和通过字面量创建的对象有什么区别" class="headerlink" title="2.2 通过new创建的对象和通过字面量创建的对象有什么区别"></a>2.2 通过new创建的对象和通过字面量创建的对象有什么区别</h4><ul><li>两者创建方式实质都是<strong>通过new来创建的</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;&#125;</span><br><span class="line">const a &#x3D; new fun()------&gt;通过作用域找到Object</span><br><span class="line">const b &#x3D; &#123;&#125;---&gt;字面量内部也是使用new Object来创建的</span><br></pre></td></tr></table></figure><ul><li>从性能还是可读性方面来说,推荐使用字面量的创建方式<ul><li>通过new创建对象需要通过<strong>作用域链一层一层找到Object</strong>,</li><li>使用字面量的方式,可以直接找到Object,没有查找的过程</li></ul></li></ul><h3 id="3-instanceof原理和手动实现"><a href="#3-instanceof原理和手动实现" class="headerlink" title="3 instanceof原理和手动实现"></a>3 instanceof原理和手动实现</h3><ul><li><p>instanceof可以准确的判断对象的类型,原理:通过查找原型链的方式判断是不是含有该类的原型</p></li><li><p>手动实现;</p><ul><li>首先获取类型的原型</li><li>然后获得对象的原型</li><li>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 <code>null</code>，因为原型链最终为 <code>null</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function myInstanceof(instance, className) &#123;</span><br><span class="line">  let prototype &#x3D; className.prototype;</span><br><span class="line">  let instance &#x3D; instance.__proto__;</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    if (instance &#x3D;&#x3D; null || intance &#x3D;&#x3D; undefined) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">    if (instance &#x3D;&#x3D; prototype) &#123;</span><br><span class="line">      return true</span><br><span class="line">    &#125;</span><br><span class="line">    instance &#x3D; instance.__proto__</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-面试题-为什么-0-1-0-2-0-3"><a href="#4-面试题-为什么-0-1-0-2-0-3" class="headerlink" title="4 面试题:为什么 0.1 + 0.2 != 0.3"></a>4 面试题:为什么 0.1 + 0.2 != 0.3</h3><ul><li><p>原因:</p><ul><li>js中采用的是<strong>浮点数标准</strong>(IEEE754双精度版本),很多十进制小数用二进制表示都是<strong>无限循环</strong>的,循环的数字被裁剪了，就会出现精度丢失的问题,造成0.1在二进制中并不是准确的值</li></ul></li><li><p>解决</p><ul><li><p>通过原生的方式来解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseFloat((0.1 + 0.2).toFixed(10)) &#x3D;&#x3D;&#x3D; 0.3</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-垃圾回收机制-GC-Garbage-collection-in-V8"><a href="#5-垃圾回收机制-GC-Garbage-collection-in-V8" class="headerlink" title="5 垃圾回收机制(GC[Garbage collection in V8])"></a>5 垃圾回收机制(GC[Garbage collection in <em>V8</em>])</h3><h4 id="5-1-面试题-V8引擎中的垃圾回收机制-自动进行了内存的分配和管理"><a href="#5-1-面试题-V8引擎中的垃圾回收机制-自动进行了内存的分配和管理" class="headerlink" title="5.1 面试题:V8引擎中的垃圾回收机制(自动进行了内存的分配和管理)"></a>5.1 面试题:V8引擎中的垃圾回收机制(自动进行了内存的分配和管理)</h4><ul><li><p>V8实现了准确的GC,GC采用的是 <strong>分代式垃圾回收机制</strong>,根据<strong>对象的存活时间</strong>将内存的垃圾进行不同的分代,然后对不同的分代采用不同的垃圾回收算法</p></li><li><p>V8将内存分为新生代和老生代两部分</p><ul><li><p>新生代算法</p><ul><li>新生代中的对象存活时间一般较短,采用的是<strong>Scavenge GC</strong>算法</li><li>新生代中内存分为from空间和to空间,两个空间中必定有一个空间是使用的,另一个是空闲的,新创建的对象会先被加入到from空间,当from空间满时,调用新生代GC算法,,算法检查from空间中存活的对象并复制到to空间,有失活的对象就会销毁</li><li>当复制完成后from空间和to空间就会交换,GC结束</li></ul></li><li><p>老生代算法</p><ul><li><p>老生代中的对象存活时间较长且数量较多,采用的是两个算法: <strong>标记清除算法和标记压缩算法</strong></p></li><li><p>对象来源:</p><ul><li>老生代中的对象是经历过一次scavenge算法的存活对象,会从新生代空间移动到老生代空间</li><li>当to空间的大小超过25%,为了不影响内存空间的分配,会将对象从新生代空间转移到老生代空间中 </li></ul></li><li><p><strong>标记清除算法</strong>的启动的情况</p><ul><li>某一个空间没有分块的时候</li><li>空间对象超过限制</li><li>空间不能保证新生代内存中的对象移动到老生代空间中</li></ul><p>在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象</p></li><li><p>经过标记清除算法清除对象后会造成堆内存出现碎片,碎片超过一定的限制就会启动<strong>标记压缩算法</strong>:压缩过程中会将存活的对象移动到一端,直到所有对象都移动完成然后清理掉不需要的内存。</p></li></ul></li></ul></li></ul><h4 id="5-2-V8引擎内存有限制的原因-1-5G-64位"><a href="#5-2-V8引擎内存有限制的原因-1-5G-64位" class="headerlink" title="5.2 V8引擎内存有限制的原因(1.5G,64位):"></a>5.2 V8引擎内存有限制的原因(1.5G,64位):</h4><ul><li>js的单线程机制</li><li>垃圾回收机制</li><li>首先JS是单线程运行的，这意味着一旦进入到垃圾回收，那么其它的各种运行逻辑都要暂停; 另一方面垃圾回收其实是非常耗时间的操作,如果内存空间没有限制,JS代码执行会一直没有响应，造成应用卡顿，导致应用性能和响应能力直线下降</li></ul><h3 id="6-js面试思考题"><a href="#6-js面试思考题" class="headerlink" title="6 js面试思考题"></a>6 js面试思考题</h3><h4 id="6-1-JS-分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？"><a href="#6-1-JS-分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？" class="headerlink" title="6.1 JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？"></a>6.1 JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？</h4><ul><li>对于原始类型来说，你可以指出 <code>null</code> 和 <code>number</code> 存在的一些问题。对于对象类型来说，你可以从垃圾回收的角度去切入，也可以说一下对象类型存在深浅拷贝的问题。</li><li>对于判断类型来说，你可以去对比一下 <code>typeof</code> 和 <code>instanceof</code> 之间的区别，也可以指出 <code>instanceof</code> 判断类型也不是完全准确的。</li></ul><h4 id="6-2-原型的理解"><a href="#6-2-原型的理解" class="headerlink" title="6.2 原型的理解"></a>6.2 原型的理解</h4><ul><li>起码说出原型小节中的总结内容，然后还可以指出一些小点，比如并不是所有函数都有 <code>prototype</code> 属性，然后引申出原型链的概念，提出如何使用原型实现继承，继而可以引申出 ES6 中的 <code>class</code> 实现继承。</li></ul><h4 id="6-3-bind、call-和-apply-各自有什么区别？"><a href="#6-3-bind、call-和-apply-各自有什么区别？" class="headerlink" title="6.3 bind、call 和 apply 各自有什么区别？"></a>6.3 bind、call 和 apply 各自有什么区别？</h4><ul><li>首先肯定是说出三者的不同，如果自己实现过其中的函数，可以尝试说出自己的思路。然后可以聊一聊 <code>this</code> 的内容，有几种规则判断 <code>this</code> 到底是什么，<code>this</code> 规则会涉及到 <code>new</code>，那么最后可以说下自己对于 <code>new</code> 的理解。</li></ul><h4 id="6-4-ES6中使用过什么"><a href="#6-4-ES6中使用过什么" class="headerlink" title="6.4 ES6中使用过什么"></a>6.4 ES6中使用过什么</h4><ul><li>class-&gt;原型-&gt;继承</li><li>promise-&gt;异步编程</li><li>proxy-&gt;响应式原理</li><li>let-&gt;变量提升-&gt;块级作用域-&gt;三者区别</li></ul><h4 id="6-5-JS-是如何运行的？"><a href="#6-5-JS-是如何运行的？" class="headerlink" title="6.5 JS 是如何运行的？"></a>6.5 JS 是如何运行的？</h4><ul><li>js单线程机制,内存机制</li><li>进程和线程的区别</li><li>执行栈</li><li>浏览器中的event loop&amp;node中的even loop对比</li><li>宏任务和微任务</li><li>垃圾回收机制</li></ul><h1 id="浏览器基础知识及常考知识点"><a href="#浏览器基础知识及常考知识点" class="headerlink" title="浏览器基础知识及常考知识点"></a>浏览器基础知识及常考知识点</h1><h3 id="1-事件机制"><a href="#1-事件机制" class="headerlink" title="1.事件机制"></a>1.事件机制</h3><p>面试题:    事件的触发过程是怎样的?了解事件代理吗</p><h4 id="1-1-事件触发的三个阶段"><a href="#1-1-事件触发的三个阶段" class="headerlink" title="1.1 事件触发的三个阶段:"></a>1.1 事件触发的三个阶段:</h4><p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200627182640963.png" alt="image-20200627182640963"></p><ul><li><p>document向事件触发处传播,遇到注册的捕获事件会触发(事件捕获阶段)</p></li><li><p>传播到事件触发处时触发注册的事件</p></li><li><p>从事件触发阶段往document处传播,遇到注册的冒泡事件会触发(事件冒泡阶段)</p><p><strong>事件触发一般会按照上面的顺序执行,如果在同一个目标节点同时注册冒泡事件和捕获事件,事件触发会按照注册的顺序执行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">node.addEventlistener(&#39;click&#39;,(event)&#x3D;&gt;&#123;</span><br><span class="line">console.log(&#39;冒泡&#39;)</span><br><span class="line">&#125;,false)&#x2F;&#x2F;冒泡事件第三个参数数false</span><br><span class="line">node.addEventListener(&#39;click&#39;,(event)&#x3D;&gt;&#123;</span><br><span class="line">console.log(;捕获)</span><br><span class="line">&#125;,true)&#x2F;&#x2F;捕获事件第三个参数是false</span><br><span class="line">执行顺序是先冒泡后捕获</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-2-事件注册"><a href="#1-2-事件注册" class="headerlink" title="1.2 事件注册"></a>1.2 事件注册</h4><ul><li><p>注册事件使用<code>addEventListener</code>,该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 <code>useCapture</code> 参数来说，该参数默认值为 <code>false</code> ，<code>useCapture</code> 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性</p><ul><li><code>capture</code>：布尔值，和 <code>useCapture</code> 作用一样</li><li><code>once</code>：布尔值，值为 <code>true</code> 表示该回调只会调用一次，调用后会移除监听</li><li><code>passive</code>：布尔值，表示永远不会调用 <code>preventDefault</code></li></ul></li><li><p>阻止事件执行:希望事件只触发在目标上,</p><ul><li>使用<code>stopPropagation</code>来阻止事件的进一步传播,通常我们认为 <code>stopPropagation</code> 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。(能<strong>阻止事件冒泡和事件捕获</strong>)</li><li><code>stopImmediatePropagation</code> 同样也能实现阻止事件，但是还能阻止该事件<strong>目标执行别的注册事件</strong>。(<strong>除了阻止事件冒泡和事件捕获之外,还能阻止事件目标处其他事件的执行</strong>)</li></ul></li></ul><h4 id="1-3-事件代理"><a href="#1-3-事件代理" class="headerlink" title="1.3 事件代理"></a>1.3 事件代理</h4><ul><li>如果一个父节点的子节点是动态生成的,子节点需要注册事件就需要将事件注册代理到父节点上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">let ul &#x3D; document.querySelector(&#39;#ul&#39;)</span><br><span class="line">ul.addEventListener(&#39;click&#39;, (event) &#x3D;&gt; &#123;</span><br><span class="line">console.log(event.target);&#x2F;&#x2F;获取点击的目标对象</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>事件代理较直接给目标注册事件好处<ul><li>节省内存</li><li>不需要给子节点注销事件</li></ul></li></ul><h3 id="2-跨域"><a href="#2-跨域" class="headerlink" title="2 跨域"></a>2 跨域</h3><p>面试题:什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？</p><h4 id="2-1-跨域"><a href="#2-1-跨域" class="headerlink" title="2.1 跨域"></a>2.1 跨域</h4><ul><li>跨域出现主要是对浏览器的限制,出于浏览器的安全考虑,有同源策略。即端口，域名，协议不同的就是跨域，ajax请求就会失败</li><li><strong>同源策略主要防止的是CSRF攻击</strong>，CSRF(跨站请求伪造)主要是利用用户的登录状态发起恶意的请求,该种策略并不能完全防止攻击,因为<strong>在请求跨域的情况下,请求确实是发送出去的,但是响应会被浏览器拦截</strong></li></ul><h4 id="2-2-跨域解决"><a href="#2-2-跨域解决" class="headerlink" title="2.2 跨域解决"></a>2.2 跨域解决</h4><h5 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h5><ul><li>JSONP方式:利用<code>script</code>标签没有跨域限制的漏洞,通过script标签指向一个目标地址并提供一个回调函数来接收数据在通信的时候</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;domain&#x2F;api?param1&#x3D;a&amp;param2&#x3D;b&amp;callback&#x3D;jsonp&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function jsonp(data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>优缺点:</p><ul><li>简单且兼容性好</li><li>只能应用于get请求</li></ul></li><li><p>jsonp封装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function handleParams(data) &#123;</span><br><span class="line">  let params &#x3D; &#39;&#39;;</span><br><span class="line">  for (let attr in data) &#123;</span><br><span class="line">    data[key] &amp;&amp; (params +&#x3D; &#39;&amp;&#39; + attr + &#39;&#x3D;&#39; + data[attr]);</span><br><span class="line">  &#125;</span><br><span class="line">  return params</span><br><span class="line">&#125;</span><br><span class="line">export default function (options) &#123;</span><br><span class="line">  &#x2F;&#x2F; 1.获取jsonp的url</span><br><span class="line">  const url &#x3D; options.url;</span><br><span class="line">  &#x2F;&#x2F; 2.创建script标签</span><br><span class="line">  const script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">  &#x2F;&#x2F; 3.创建callback函数名(不重复)</span><br><span class="line">  const callback &#x3D; &#39;jsonp&#39; + Math.random().toString().replace(&#39;.&#39;, &#39;&#39;);</span><br><span class="line">  &#x2F;&#x2F; 4.监听windows上的jsonp调用</span><br><span class="line">  window[callback] &#x3D; options.success;</span><br><span class="line">  &#x2F;&#x2F; 5.拼接参数,发送请求</span><br><span class="line">  let params &#x3D; handleParams(options.data);</span><br><span class="line">  script.src &#x3D; url + &#39;?callback&#x3D;&#39; + callback + params</span><br><span class="line">  &#x2F;&#x2F; 6.标签追加到页面</span><br><span class="line">  document.body.appendChild(script);</span><br><span class="line">  &#x2F;&#x2F; script添加onload()事件,执行结束,移出script标签</span><br><span class="line">  script.onload &#x3D; function () &#123;</span><br><span class="line">    document.body.removeChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><ul><li><p>CORS:跨域资源共享</p></li><li><p>需要浏览器和服务器端同时支持,IE 8 和 9 需要通过 <code>XDomainRequest</code> 来实现。</p></li><li><p>浏览器会自动进行CORS通信,实现跨域资源共享的关键是后端,需要开启跨域访问的权限,服务器端需要设置<code>Access-Control-Allow-origin</code>,表明哪些域名可以访问,设置通配符的话表示所有的网站可以</p></li><li><p>本方案和前端没有什么关系,通过这种方式解决跨域问题发送请求分为 <strong>简单请求和复杂请求</strong></p><ul><li><p>简单请求(ajax为例,发送简单请求的情况)</p><ul><li>方法之一:get,head,post</li><li>content-Type下列之一:text/plain,multipart/form-data,application/x-www-form-urlencoded</li></ul><p>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器； <code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</p></li><li><p>复杂请求:(简单请求之外)</p><ul><li><p>首先会发起一个<strong>预检请求</strong>，该请求是 <code>option</code> 方法的，通过该请求来知道服务端是否允许跨域请求。</p></li><li><p>预检请求来说，如果你使用过 Node 来设置 CORS 的话,该请求会验证你的 <code>Authorization</code> 字段.预检请求也会进入回调中，也会触发 <code>next</code> 方法，因为预检请求并不包含 <code>Authorization</code> 字段，所以服务端会报错。</p></li><li><p>解决方案:</p><ul><li><p>在回调中过滤掉options方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.statusCode &#x3D; 204</span><br><span class="line">res.setHeader(&#39;Content-Length&#39;, &#39;0&#39;)</span><br><span class="line">res.end()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h5 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h5><ul><li>该方式只适用于 <strong>二级域名相同的情况</strong>, <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式</li><li>只需要给页面添加 <code>document.domain = &#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域</li></ul><h5 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h5><ul><li>该方式主要用于获取嵌入页面中的第三方页面的数据,一个页面发送数据,另一个页面判断来源并接受数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 发送消息端</span><br><span class="line">window.parent.postMessage(&#39;message&#39;, &#39;http:&#x2F;&#x2F;test.com&#39;)</span><br><span class="line">&#x2F;&#x2F; 接收消息端</span><br><span class="line">var mc &#x3D; new MessageChannel()</span><br><span class="line">mc.addEventListener(&#39;message&#39;, event &#x3D;&gt; &#123;</span><br><span class="line">  var origin &#x3D; event.origin || event.originalEvent.origin</span><br><span class="line">  if (origin &#x3D;&#x3D;&#x3D; &#39;http:&#x2F;&#x2F;test.com&#39;) &#123;</span><br><span class="line">    console.log(&#39;验证通过&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="服务器端解决"><a href="#服务器端解决" class="headerlink" title="服务器端解决"></a>服务器端解决</h5><ul><li>同源策略是浏览器给ajax限制的,服务器端没有限制,可以让服务器端去获取信息在响应给自己的客户端(引入express框架中的request第三方模块)</li></ul><h5 id="nginx代理服务器"><a href="#nginx代理服务器" class="headerlink" title="nginx代理服务器"></a>nginx代理服务器</h5><ul><li>在代理服务器中拦截请求转发给实际的请求网站</li></ul><h5 id="websocket通信"><a href="#websocket通信" class="headerlink" title="websocket通信"></a>websocket通信</h5><ul><li>:是一种双向通信协议,在建立连接之后客户端和服务器端都能主动向对方发送或者接收数据而不受同源策略的限制</li></ul><h3 id="3-存储-浏览器"><a href="#3-存储-浏览器" class="headerlink" title="3. 存储(浏览器)"></a>3. 存储(浏览器)</h3><p>涉及面试题：有几种方式可以实现存储功能，分别有什么优缺点？什么是 Service Worker？</p><h4 id="3-1cookie-sessionStorage-localStorage-indexDB"><a href="#3-1cookie-sessionStorage-localStorage-indexDB" class="headerlink" title="3.1cookie,sessionStorage,localStorage,indexDB"></a>3.1cookie,sessionStorage,localStorage,indexDB</h4><p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200627201555954.png" alt="image-20200627201555954"></p><ul><li><p>cookie不建议用于存储,没有大量存储要求使用localStorage和sessionStorage,对于不怎么改变的数据使用localStorage存储    ,否则使用sessionStorage</p></li><li><p>对于cookie来说涉及到安全问题</p><p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200627202407379.png" alt="image-20200627202407379"></p></li></ul><h3 id="3-2-session和cookie"><a href="#3-2-session和cookie" class="headerlink" title="3.2 session和cookie"></a>3.2 session和cookie</h3><ul><li><code>session</code>： 是一个抽象概念，开发者为了实现中断和继续等操作，将 <code>user agent</code>和 <code>server</code> 之间一对一的交互，抽象为“会话”，进而衍生出“会话状态”，也就是 <code>session</code> 的概念</li><li><code>cookie</code>：它是一个实际存在的东西，<code>http</code> 协议中定义在 <code>header</code> 中的字段，可以认为是 <code>session</code> 的一种后端无状态实现</li></ul><blockquote><p>现在我们常说的 <code>session</code>，是为了绕开 <code>cookie</code> 的各种限制，通常借助 <code>cookie</code>本身和后端存储实现的，一种更高级的会话状态实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session&#96; 的常见实现要借助&#96;cookie&#96;来发送 &#96;sessionID</span><br></pre></td></tr></table></figure><h3 id="3-3-Service-Worker"><a href="#3-3-Service-Worker" class="headerlink" title="3.3 Service Worker"></a>3.3 Service Worker</h3><ul><li>Service Worker 是运行在浏览器背后的<strong>独立线程</strong>，一般可以用来实现<strong>缓存功能</strong>。使用 Service Worker的话，传输协议必须为 <strong>HTTPS</strong>。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。</li><li>Service Worker <strong>实现缓存功能一般分为三个步骤</strong>：首先需要先注册 Service Worker，然后监听到 <code>install</code> 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过<strong>拦截请求的方式</strong>查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</li><li>开发者工具中的 <code>Application</code> 看到 Service Worker 已经启动,在 Cache 中也可以发现我们所需的文件已被缓存</li></ul><h3 id="4-浏览器的缓存-性能优化"><a href="#4-浏览器的缓存-性能优化" class="headerlink" title="4 浏览器的缓存(性能优化)"></a>4 浏览器的缓存(性能优化)</h3><h4 id="4-1-缓存优势"><a href="#4-1-缓存优势" class="headerlink" title="4.1 缓存优势"></a>4.1 缓存优势</h4><ul><li>浏览器缓存是<strong>性能优化</strong>中一种简单高效的方式,可以显著<strong>减少网络传输所带来的的损耗</strong>(因为在网络请求中一般分为三个阶段:发送请求,服务器端处理,浏览器响应,缓存可以在第一阶段和第三阶段都会进行优化,有缓存的情况下可以不发送请求,或者发送请求但是发现数据没变不用返回数据,这样就减少了数据的响应)</li></ul><h4 id="4-2-缓存位置"><a href="#4-2-缓存位置" class="headerlink" title="4.2 缓存位置"></a>4.2 缓存位置</h4><ul><li>从缓存位置上来说,是具有 <strong>优先级的</strong>,<strong>会依次查找缓存都没有找到</strong>,才会去发送请求    </li><li>划分:<ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li><li>网络请求</li></ul></li></ul><p><strong>Service Worker</strong></p><ul><li>优点:它的缓存机制和浏览器内建的其他缓存机制不同,它允许我们 <strong>自由控制</strong>缓存哪些文件,如何匹配缓存,如何读取缓存,并且缓存是 <strong>持续性</strong>     </li><li>如果在Service Worker中没有命中缓存的话,他会通过<strong>fetch()函数去获取数据.</strong>也就是说,在SW中没有命中缓存就会通过<strong>缓存查找优先级去查找数据</strong>,但是不管我们是从MemoryCache还是从网络请求中回去的数据,都会显示是从Service Worker中获取的数据</li></ul><p><strong>Memory Cache</strong></p><ul><li>是内存中的缓存,<strong>读取内存中的数据肯定是要比磁盘中的数据快</strong>,</li><li>缺点:内存中的缓存虽然 <strong>读取高效,但是持续性较短,随着进程的释放而释放</strong>,一旦页面关闭,内存中的缓存也就释放了</li><li><strong>注意:虽然内存中的缓存高效,但是不能将所有的额文件都放在内存中,毕竟内存空间有限,是比硬盘小很多</strong></li></ul><p><strong>Disk Cache</strong></p><ul><li>是硬盘中的缓存,读取速度慢,什么都能存储,胜在 <strong>容量和存储时效上</strong></li><li>所有浏览器的缓存机制中,DiskCache是覆盖面最大的,他可以根据http header中字段判断哪些资源需要缓存,哪些资源不缓存直接使用,哪些资源已经过期需要重新缓存.<strong>并且在跨站的情况下,相同地址的资源一旦被硬盘缓存下来,就不会在去请求数据</strong></li></ul><p><strong>Push Cache</strong></p><ul><li>是http2中的内容,当以上的三种缓存都没有命中的情况下才会去使用. <strong>缓存时间较短,随着会话的释放而释放</strong></li></ul><p><strong>网络请求</strong></p><ul><li>在以上情况都没有命中的情况下只能发送网络请求,网络请求的每个接口都是选好缓存策略的</li></ul><h4 id="4-3-缓存策略"><a href="#4-3-缓存策略" class="headerlink" title="4.3 缓存策略"></a>4.3 缓存策略</h4><p>浏览器的缓存策略分为: <strong>强缓存和协商缓存</strong>,所有的缓存都是在<strong>http header中</strong>进行设置的</p><h5 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h5><ul><li><p>强缓存可以设置两种http header来实现:<strong>Expires和Cache-Control</strong>.使用强缓存期间不必请求,返回的状态码为<strong>200</strong></p></li><li><p>Expires是http1中内容,表示在该时间之后过期, <strong>受限于本地时间</strong>,本地时间改变可能造成缓存失效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed, 22 Oct 2018 08:41:00 GMT</span><br></pre></td></tr></table></figure></li><li><p>Cache-Control是http1.1内容,表示缓存在设置的一段时间之后过期, <strong>优先级高于Expires</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-control: max-age&#x3D;30</span><br></pre></td></tr></table></figure><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200628085007840.png" alt="image-20200628085007840" style="zoom:70%;"></li></ul><h5 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h5><ul><li><p>在强缓存失效的情况下,就会使用协商缓存,发送请求验证资源是否有更新</p></li><li><p>协商缓存通过设置http header两种方式:<strong>Last-Modified和ETag</strong></p></li><li><p><strong>当浏览器发起请求验证资源时,如果资源没有发生改变,就会返回304状态码,并修改缓存有效的时间</strong></p><p><strong>Last-Modified 和 If-Modified-Since</strong></p><ul><li><code>Last-Modified</code> 表示本地文件最后修改日期，<code>If-Modified-Since</code> 会将 <code>Last-Modified</code> 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。</li></ul><p><strong>ETag 和 If-None-Match</strong></p><ul><li><code>ETag</code> 类似于文件指纹，<code>If-None-Match</code> 会将当前 <code>ETag</code> 发送给服务器，询问该资源 <code>ETag</code> 是否变动，有变动的话就将新的资源发送回来。并且 <code>ETag</code> <strong>优先级</strong>比 <code>Last-Modified</code> 高。</li></ul></li></ul><h4 id="4-4-应用场景应用缓存策略"><a href="#4-4-应用场景应用缓存策略" class="headerlink" title="4.4 应用场景应用缓存策略"></a>4.4 应用场景应用缓存策略</h4><p><strong>频繁变动的资源</strong>:首先需要使用 <code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器，然后配合 <code>ETag</code> 或者 <code>Last-Modified</code> 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><p><strong>代码文件</strong>:这里特指html文件之外的文件,html文件不存要缓存或者缓存的时间较短</p><p>一般通过工具包来打包代码,通过对文件名进行哈希处理,只有当代码修改后才会产生新的文件名,可以给文件设置缓存的期限cache-control:为一年,这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p><h3 id="5-浏览器渲染"><a href="#5-浏览器渲染" class="headerlink" title="5 浏览器渲染"></a>5 浏览器渲染</h3><h4 id="5-1-浏览器渲染原理"><a href="#5-1-浏览器渲染原理" class="headerlink" title="5.1 浏览器渲染原理"></a>5.1 浏览器渲染原理</h4><ul><li><p><strong>浏览器接收到 HTML 文件并转换为 DOM 树</strong></p><p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200628092930019.png" alt="image-20200628092930019"></p></li><li><p><strong>将 CSS 文件转换为 CSSOM 树</strong>(这一过程其实是<strong>很消耗资源</strong>浏览器得<strong>递归</strong> CSSOM 树，然后确定具体的元素到底是什么样式。应该尽可能的避免写<strong>过于具体</strong>的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证<strong>层级扁平</strong>。)</p><p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200628092954075.png" alt="image-20200628092954075"></p></li><li><p><strong>生成渲染树</strong>:我们生成 <code>DOM</code> 树和 <code>CSSOM</code> 树以后，就需要将这两棵树组合为渲染树,当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流），然后调用 <code>GPU</code>绘制，合成图层，显示在屏幕上。</p></li></ul><h4 id="5-2-操作dom慢的原因"><a href="#5-2-操作dom慢的原因" class="headerlink" title="5.2 操作dom慢的原因"></a>5.2 操作dom慢的原因</h4><ul><li>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。操作 DOM 次数一多，也就等同于一直在进行线程之间的通信，并且操作 DOM 可能还会带来<strong>重绘回流的情况</strong>，所以也就导致了性能上的问题。</li></ul><h4 id="5-3-插入几万个DOM如何实现界面不卡"><a href="#5-3-插入几万个DOM如何实现界面不卡" class="headerlink" title="5.3 插入几万个DOM如何实现界面不卡"></a>5.3 插入几万个DOM如何实现界面不卡</h4><ul><li>本质:分批次部分渲染dom</li><li>实现方式:<ul><li>通过window属性<code>requestAnimationFrame</code>(要求浏览器在下次重绘之前调用指定的回调函数更新动画)去循环的插入dom</li><li>通过<strong>虚拟滚动(virtual Scroll)</strong>的方式:<strong>这种技术的原理就是只渲染可视区域内的内容，非可见区域的那就完全不渲染了，当用户在滚动的时候就实时去替换渲染的内容。</strong></li></ul></li></ul><h4 id="5-4-阻塞界面渲染的情况"><a href="#5-4-阻塞界面渲染的情况" class="headerlink" title="5.4 阻塞界面渲染的情况"></a>5.4 阻塞界面渲染的情况</h4><ul><li>渲染的前提是生成渲染树,<strong>html和css会阻塞</strong>,(<strong>降低一开始需要渲染的文件大小</strong>，并且<strong>扁平层级，优化选择器</strong>。)</li><li><strong>解析<code>script</code>标签,</strong>会暂停dom,完成之后再从暂停位置继续构建(首屏渲染块,需要将script标签的加载放在<code>body</code>或者通过 <strong>延迟(defer)和异步(async)</strong>)<ul><li>defer:表示js文件可以并行下载,会在页面加载完成之后执行</li><li>async:没有任何依赖的js文件,加上async不会阻塞渲染</li></ul></li></ul><h4 id="5-5-重绘和回流-影响性能"><a href="#5-5-重绘和回流-影响性能" class="headerlink" title="5.5 重绘和回流(影响性能)"></a>5.5 重绘和回流(影响性能)</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul><li>重绘和回流会在设置节点样式的时候频繁出现</li><li>重绘是当节点需要<strong>更改外观</strong>而不会<strong>影响布局</strong>的，比如改变 <code>color</code> 就叫称为重绘</li><li>回流是<strong>布局或者几何属性</strong>需要改变就称为回流。</li><li>关系:回流一定引起重绘,重绘不一定会引起回流,回流所需的成本比重绘高</li></ul><h5 id="发生情况"><a href="#发生情况" class="headerlink" title="发生情况"></a>发生情况</h5><ul><li>改变<code>window</code>的大小</li><li>改变文字的大小</li><li>字体改变</li><li>增加或者删除节点</li><li>盒模型</li><li>浮动或定位</li></ul><h5 id="重绘和回流和event-loop有关-一帧可能会做的"><a href="#重绘和回流和event-loop有关-一帧可能会做的" class="headerlink" title="重绘和回流和event loop有关(一帧可能会做的)"></a>重绘和回流和event loop有关(一帧可能会做的)</h5><ul><li><p>event loop每次执行完微任务都需要判断是否进行页面的渲染,保证js操作和dom的同步性,因为浏览器是 60Hz 的刷新率，每 16.6ms 才会更新一次。</p></li><li><p>然后判断是不是有resize和scroll操作,如果有的话触发事件,至少也是16.6ms触发一次,并且知道节流功能</p></li><li><p>判断是否触发了media query</p></li><li><p>更新动画并发送事件</p></li><li><p>判断是否有全屏操作事件</p></li><li><p>执行requestAnimationFrame回调</p></li><li><p>执行<code>intersectionObserver</code>会回调,该方法用于判断元素是否可见,可以用于懒加载,但是兼容性不好</p></li><li><p>更新界面</p></li></ul><h4 id="5-6-减少重绘和回流方案"><a href="#5-6-减少重绘和回流方案" class="headerlink" title="5.6 减少重绘和回流方案"></a>5.6 减少重绘和回流方案</h4><ul><li>用<code>transform</code>代替<code>top</code></li><li>用<code>visibility</code> 代替<code>display:none</code></li><li>css选择符<strong>从右往左</strong>匹配查找,避免节点层级过高</li><li>不使用table布局</li><li>频繁重绘和回流的节点设置为图层,图层能够阻止该节点的渲染行为影响别的节点,<code>video标签</code>可以自动转化为图层<ul><li><code>will-change</code></li><li><code>video</code>,<code>iframe</code></li></ul></li></ul><h4 id="5-7-思考题-关键渲染路径"><a href="#5-7-思考题-关键渲染路径" class="headerlink" title="5.7 思考题(关键渲染路径)"></a>5.7 思考题(关键渲染路径)</h4><p>面试题:在不考虑缓存和优化网络协议的前提下，考虑可以通过哪些方式来最快的渲染页面，也就是常说的<strong>关键渲染路径</strong>，这部分也是性能优化中的一块内容。</p><ul><li><p>当发生 <code>DOMContentLoaded</code> 事件后，就会生成渲染树，生成渲染树就可以进行渲染了，这一过程更大程度上和硬件有关系了。</p></li><li><p>从文件大小考虑</p></li><li><p>从 <code>script</code> 标签使用上来考虑</p></li><li><p>从 CSS、HTML 的代码书写上来考虑</p></li><li><p>从需要下载的内容是否需要在首屏使用上来考虑</p></li></ul><h3 id="6-浏览器内核的理解-以及主流浏览器的内核"><a href="#6-浏览器内核的理解-以及主流浏览器的内核" class="headerlink" title="6 浏览器内核的理解,以及主流浏览器的内核"></a>6 浏览器内核的理解,以及主流浏览器的内核</h3><h4 id="6-1-浏览器内核的理解"><a href="#6-1-浏览器内核的理解" class="headerlink" title="6.1 浏览器内核的理解"></a>6.1 浏览器内核的理解</h4><ul><li>内核主要分为两部分:渲染引擎和js引擎</li><li>渲染引擎负责取得网页的内容和计算网页的显示方式,然后输出到显示器或者打印机.浏览器内核的不同对网页的解析方式会有所不同</li><li>.js引擎主要是解析和执行javascript代码实现页面的动态效果</li></ul><h4 id="6-3-主流浏览器的内核"><a href="#6-3-主流浏览器的内核" class="headerlink" title="6.3 主流浏览器的内核"></a>6.3 主流浏览器的内核</h4><ul><li>IE:  trident内核</li><li>firefox:gecko内核</li><li>safari:webkit内核</li><li>opera:起初presto-&gt;谷歌内核blink</li><li>谷歌:blink</li></ul><h3 id="7-浏览器性能优化"><a href="#7-浏览器性能优化" class="headerlink" title="7 浏览器性能优化"></a>7 浏览器性能优化</h3><ul><li>图片优化<ul><li><strong>减少像素点</strong></li><li><strong>减少每个像素点能够显示的颜色</strong></li></ul></li><li>图片加载优化:base64格式,雪碧图,正确的图片格式,webp(更好的数据图像压缩算法),小图使用png/svg,图片使用jpeg</li><li>DNS预解析</li><li>节流防抖</li><li>预加载</li><li>预渲染</li><li>懒执行</li><li>懒加载</li><li><strong>CDN</strong>:<ul><li>原理:CDN 的原理是<strong>尽可能的在各个地方分布机房缓存数据</strong>，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源。</li><li>使用:可以将<strong>静态资源尽量使用 CDN 加载</strong>，由于<strong>浏览器对于单个域名有并发请求上限</strong>，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。</li></ul></li><li>重绘和回流</li></ul><h4 id="7-1-防抖和节流"><a href="#7-1-防抖和节流" class="headerlink" title="7.1 防抖和节流"></a>7.1 防抖和节流</h4><ul><li><p>防抖 (debounce): 将<strong>多次高频操作优化为只在最后一次执行</strong>，通常使用的场景是：用户输入，只需再输入完成后做一次输入校验即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function debounce(fun,waittime)&#123;</span><br><span class="line">  var timer &#x3D; 0;</span><br><span class="line">  return function (...args)&#123;</span><br><span class="line">    if(timer) clearTimeOut(timer);</span><br><span class="line">      timer &#x3D; setTimeOut(()&#x3D;&gt;&#123;</span><br><span class="line">      &#x2F;&#x2F;this的真是指向并不是debounce的调用者,而是返回闭包的调用者</span><br><span class="line">      fun.apply(this,args)</span><br><span class="line">      &#125;,waittime)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节流(throttle):每隔一段时间后执行一次，也就是降低频率，将高频操作优化成低频操作，通常使用场景: 滚动条事件 或者 <code>resize</code> 事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function throttle(fun,waitTime)&#123;</span><br><span class="line">var lastTime &#x3D; Date.now()</span><br><span class="line">return function(...args)&#123;</span><br><span class="line">&#x2F;&#x2F;当前时间</span><br><span class="line">  if(Date.now()-lastTime&gt;waitTime)&#123;</span><br><span class="line">  lastTime &#x3D; Date.now()</span><br><span class="line">    fun.apply(this,args)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-从输入URL到浏览器页面展示的步骤"><a href="#8-从输入URL到浏览器页面展示的步骤" class="headerlink" title="8 从输入URL到浏览器页面展示的步骤"></a>8 从输入URL到浏览器页面展示的步骤</h3><ul><li>首先我们需要通过 DNS（域名解析系统）将 URL 解析为对应的 IP 地址，(<strong>DNS 解析</strong>)</li><li>然后与这个 IP 地址确定的那台服务器建立起 TCP 网络连接， (<strong>TCP 连接</strong>)</li><li>随后我们向服务端抛出我们的 HTTP 请求，(<strong>HTTP 请求抛出</strong>)</li><li>服务端处理完我们的请求之后，把目标数据放在 HTTP 响应里返回给客户端，(<strong>服务端处理请求，HTTP 响应返回</strong>)</li><li>拿到响应数据的浏览器就可以开始走一个渲染的流程。 (<strong>浏览器拿到响应数据，解析响应内容，把解析的结果展示给用户</strong>)</li><li>渲染完毕，页面便呈现给了用户，并时刻等待响应用户的操作</li></ul><h3 id="9-安全防范-XSS-CSRF"><a href="#9-安全防范-XSS-CSRF" class="headerlink" title="9 安全防范(XSS,CSRF)"></a>9 安全防范(XSS,CSRF)</h3><h4 id="9-1-XSS"><a href="#9-1-XSS" class="headerlink" title="9.1 XSS"></a>9.1 XSS</h4><ul><li>XSS:<code>XSS</code> 通过修改 <code>HTML</code>节点或者执行 <code>JS</code>代码来攻击网站。<ul><li>分为持久性和非持久性<ul><li>持久性:就是恶意 的代码被服务器写入数据库 中</li><li>非持久性: <strong>修改url参数</strong>的方式加入攻击代码,诱导用户访问链接从而进行攻击</li></ul></li><li>预防:<ul><li>最普遍的做法是<strong>转义输入输出的内容</strong>，对于引号，尖括号，斜杠进行转义</li><li><strong>CSP</strong>(Content-Security-Policy)方式:本质就是设置白名单,开发者明确告诉浏览器哪些外部资源可以加载和执行。</li></ul></li></ul></li></ul><h4 id="9-2-CSRF"><a href="#9-2-CSRF" class="headerlink" title="9.2 CSRF"></a>9.2 CSRF</h4><ul><li>CSRF:跨站请求伪造（英语：<code>Cross-site request forgery</code>），也被称为 <code>one-click attack</code>或者 <code>session riding</code>，通常缩写为 <code>CSRF</code> 或者 <code>XSRF</code>， 是一种挟制用户在当前已登录的<code>Web</code>应用程序上执行非本意的操作的攻击方法,<ul><li><code>CSRF</code> 就是利用用户的登录态发起恶意请求</li><li>预防遵循以下几个规则:<ul><li><code>Get</code> 请求不对数据进行修改</li><li>不让第三方网站访问到用户 <code>Cookie</code></li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 <code>token</code></li></ul></li><li>具体<ul><li><strong>same-sit属性</strong>:设置cookie属性中的same-sit表示不允许携带cookie信息在跨域请求 的时候</li><li><strong>验证Referer</strong>:通过验证 Referer 来判断该请求是否为第三方网站发起的。</li><li><strong>token</strong>:服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。</li></ul></li></ul></li><li>密码安全<ul><li><strong>加盐</strong>:通常需要对密码加盐，然后进行几次不同加密算法的加密</li></ul></li></ul><p><strong>面试题:cookie 和 token 都存放在 header 中，为什么不会劫持 token？</strong></p><ul><li>token是为了防止SCRF攻击,不是xss攻击,CSRF攻击的原因是浏览器会自动带上cookie，而浏览器不会自动带上token</li></ul><p><strong>面试题2:介绍如何实现token加密</strong></p><ul><li>需要一个secret（随机数）</li><li>后端利用secret和加密算法(如：HMAC-SHA256)对payload(如账号密码)生成一个字符串(token)，返回前端</li><li>前端每次request在header中带上token</li><li>后端用同样的算法解密</li></ul><h4 id="9-3-点击劫持"><a href="#9-3-点击劫持" class="headerlink" title="9.3 点击劫持"></a>9.3 点击劫持</h4><ul><li><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 <code>iframe</code> 嵌套的方式嵌入自己的网页中，并将 <code>iframe</code> 设置为透明，在页面中<strong>透出一个按钮诱导用户点击</strong>。</p></li><li><p>预防:</p><ul><li>X-FROM-OPTION:<code>X-FRAME-OPTIONS</code> 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 <code>iframe</code> 嵌套的点击劫持攻击。</li><li>JS防御:当通过 <code>iframe</code> 的方式加载页面时，攻击者的网页直接不显示所有内容了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style id&#x3D;&quot;click-jack&quot;&gt;</span><br><span class="line">    html &#123;</span><br><span class="line">      display: none !important;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    if (self &#x3D;&#x3D; top) &#123;</span><br><span class="line">      var style &#x3D; document.getElementById(&#39;click-jack&#39;)</span><br><span class="line">      document.body.removeChild(style)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      top.location &#x3D; self.location</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-4-中间人攻击"><a href="#9-4-中间人攻击" class="headerlink" title="9.4 中间人攻击"></a>9.4 中间人攻击</h4><ul><li>中间人攻击就是同时和服务器端和客户端建立连接,并且让双方认为该连接时安全的,此时攻击人已经控制了整个通信过程,不仅能获取双方的通信信息,还能修改通信信息</li><li>场景:不建议在公共的wifi中使用上网很容易发生攻击人攻击</li><li>预防: <strong>增加一个安全通道来传输信息</strong>,https就可以防止中间人攻击,也不是绝对安全,攻击人会将https为http进行攻击</li></ul><h1 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h1><h3 id="1-http和https的区别"><a href="#1-http和https的区别" class="headerlink" title="1. http和https的区别"></a>1. http和https的区别</h3><h4 id="1-1-http请求"><a href="#1-1-http请求" class="headerlink" title="1.1 http请求"></a>1.1 http请求</h4><ul><li>组成:请求行,首部和实体</li></ul><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码:"></a>状态码:</h5><ul><li><p><strong>2XX 成功</strong></p><ul><li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li><li>204 No content，表示请求成功，但响应报文不含实体的主体部分</li><li>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li><li>206 Partial Content，进行范围请求</li></ul><p><strong>3XX 重定向</strong></p><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</li><li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li><li>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</li><li>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</li></ul><p><strong>4XX 客户端错误</strong></p><ul><li>400 bad request，请求报文存在语法错误</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝</li><li>404 not found，表示在服务器上没有找到请求的资源</li></ul><p><strong>5XX 服务器错误</strong></p><ul><li>500 internal sever error，表示服务器端在执行请求时发生了错误</li><li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li></ul></li></ul><h4 id="1-2-GET和POST请求的区别"><a href="#1-2-GET和POST请求的区别" class="headerlink" title="1.2 GET和POST请求的区别"></a>1.2 GET和POST请求的区别</h4><ul><li>Get 请求能缓存，Post 不能</li><li>Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里（当然你想写到 <code>body</code> 里也是可以的），且会被浏览器保存历史纪录。Post 不会，但是在抓包的情况下都是一样的。</li><li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li><li>Post 支持更多的编码类型且不对数据类型限制</li></ul><h4 id="1-3-TLS-传输层安全协议"><a href="#1-3-TLS-传输层安全协议" class="headerlink" title="1.3 TLS(传输层安全协议)"></a>1.3 TLS(传输层安全协议)</h4><ul><li>H<strong>TTPS 还是通过了 HTTP 来传输信息，</strong>但是信息通过 <strong>TLS 协议和ssl协议进行了加密</strong>(在传输层和应用层传输之间)</li><li>TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT( Round-Trip Time):往返时延) ，接下来可以通过 Session Resumption 减少到一个 RTT。</li><li>使用到两种加密技术<ul><li>对称加密:加密和解密都采用同一种算法</li><li>非对称加密:有公钥和私钥之分,公钥公开用于加密,私钥用于解密(<strong>注意和数字签名正好是反的,数字签名是私钥加密公钥解密</strong>)</li></ul></li></ul><h4 id="1-4-http2的多路复用"><a href="#1-4-http2的多路复用" class="headerlink" title="1.4 http2的多路复用"></a>1.4 http2的多路复用</h4><ul><li>HTTP2采用二进制格式传输，取代了HTTP1.x的文本格式，二进制格式解析更高效。</li><li>多路复用代替了HTTP1.x的<strong>序列和阻塞机制</strong>，所有的相同域名请求都通过同一个TCP连接并发完成。在HTTP1.x中，并发多个请求需要多个TCP连接，浏览器为了控制资源会有6-8个TCP连接都限制。<br>HTTP2中<ul><li>同域名下所有通信都在单个连接上完成，消除了因多个 TCP 连接而带来的延时和内存消耗。</li><li>单个连接上可以并行交错的请求和响应，之间互不干扰</li></ul></li><li>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。<br>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的<strong>队头阻塞问题</strong>，极大的提高传输性能。</li></ul><p><strong>面试题:http1为什么不能实现多路复用</strong></p><ul><li>HTTP/1.1 不是二进制传输，而是通过文本进行传输。由于没有流的概念，在使用并行传输（多路复用）传递数据时，接收端在接收到响应后，并不能区分多个响应分别对应的请求，所以无法将多个响应的结果重新进行组装，也就实现不了多路复用。</li></ul><h4 id="1-4-https的握手过程"><a href="#1-4-https的握手过程" class="headerlink" title="1.4 https的握手过程"></a>1.4 https的握手过程</h4><ul><li>客户端使用https的url访问web服务器,要求与服务器建立<strong>ssl</strong>连接</li><li>web服务器收到客户端请求后, 会将<strong>网站的证书(包含公钥)传送一份给客户端</strong></li><li>客户端收到网站证书后会检查证书的颁发机构以及过期时间, 如果没有问题就<strong>随机产生一个秘钥</strong></li><li>客户端利用公钥将会话秘钥加密, 并传送给服务端, 服务端利用自己的<strong>私钥解密出会话秘钥</strong></li><li>之后服务器与客户端使用<strong>秘钥加密传输</strong></li></ul><h4 id="1-5-https握手过程中如何验证证书的合法性"><a href="#1-5-https握手过程中如何验证证书的合法性" class="headerlink" title="1.5 https握手过程中如何验证证书的合法性"></a>1.5 https握手过程中如何验证证书的合法性</h4><ul><li>（1）首先浏览器读取证书中的证书所有者、有效期等信息进行校验，校验证书的网站域名是否与证书颁发的域名一致，校验证书是否在有效期内 （2）浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发 （3）如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的。 （4）如果找到，那么浏览器就会从操作系统中取出颁发者CA 的公钥(多数浏览器开发商发布 版本时，会事先在内部植入常用认证机关的公开密钥)，然后对服务器发来的证书里面的签名进行解密 （5）<strong>浏览器使用相同的hash算法计算出服务器发来的证书的hash值</strong>，将这个计算的hash值与证书中签名做对比 （6）对比结果一致，则证明服务器发来的证书合法，没有被冒充</li></ul><h4 id="1-6-HTTPS中间人攻击的过程"><a href="#1-6-HTTPS中间人攻击的过程" class="headerlink" title="1.6 HTTPS中间人攻击的过程"></a>1.6 HTTPS中间人攻击的过程</h4><ul><li>过程<ul><li>服务器向客户端发送公钥。</li><li>攻击者截获公钥，保留在自己手上。</li><li>然后攻击者自己生成一个【伪造的】公钥，发给客户端。</li><li>客户端收到伪造的公钥后，生成加密hash值发给服务器。</li><li>攻击者获得加密hash值，用自己的私钥解密获得真秘钥。</li><li>同时生成假的加密hash值，发给服务器。</li><li>服务器用私钥解密获得假秘钥。</li><li>服务器用加秘钥加密传输信息</li></ul></li><li>解决:务端在发送浏览器的公钥中加入CA证书(CA中加入非对称的公钥)，浏览器可以验证CA证书的有效性</li></ul><h4 id="1-7-http1-http-1和http2的区别"><a href="#1-7-http1-http-1和http2的区别" class="headerlink" title="1.7 http1,http.1和http2的区别"></a>1.7 http1,http.1和http2的区别</h4><ul><li><p>http1:无状态,无连接</p><ul><li>无状态:不记录状态鑫信息,通过cookie进行身份认证和状态记录</li><li>无连接:出现缺陷:<strong>无法复用连接,队头阻塞</strong></li></ul></li><li><p>http1.1:</p><ul><li><strong>长连接</strong>:keep-alive</li><li><strong>管道化</strong>:请求可以不按照顺序发送,响应还是按照顺序响应的</li><li><strong>缓存处理</strong>:cache-control</li><li><strong>断点传输</strong>:在上传/下载资源时，如果资源过大，将其分割为多个部分，分别上传/下载，如果遇到网络故障，可以从已经上传/下载好的地方继续请求，不用从头开始，提高效率</li></ul></li><li><p>http2:</p><ul><li>多路复用</li><li>二进制分帧</li><li>头部压缩</li><li>服务器传送:主动推送其他资源</li></ul></li></ul><h4 id="1-8-http301和302状态码"><a href="#1-8-http301和302状态码" class="headerlink" title="1.8 http301和302状态码"></a>1.8 http301和302状态码</h4><h5 id="对seo优化的影响"><a href="#对seo优化的影响" class="headerlink" title="对seo优化的影响:"></a>对seo优化的影响:</h5><ul><li>301表示永久性转移,更利于seo优化,301重定向是网页更改地址后对搜索引擎友好的最好方法，只要不是暂时搬移的情况,都建议使用301来做转址。 如果我们把一个地址采用301跳转方式跳转的话，<strong>搜索引擎会把老地址的PageRank等信息带到新地址，同时在搜索引擎索引库中彻底废弃掉原先的老地址</strong>。旧网址的排名等完全清零</li></ul><h5 id="二者的应用场景"><a href="#二者的应用场景" class="headerlink" title="二者的应用场景"></a>二者的应用场景</h5><ul><li>301应用场景: 域名到期不想继续用这个,换了地址</li><li>302应用场景: 做活动时候,从首页跳到活动页面,</li></ul><h4 id="1-9-接口如何进行防刷"><a href="#1-9-接口如何进行防刷" class="headerlink" title="1.9 接口如何进行防刷"></a>1.9 接口如何进行防刷</h4><ul><li>总调用次数受限制。这个一般是在后端做限制，单位时间内最多可调用次数。</li><li>同一客户端次数限制。这个前端的一般使用是给接口调用加锁，在返回结果或者一定时间之后解锁。</li></ul><h3 id="2-tcp和udp的区别"><a href="#2-tcp和udp的区别" class="headerlink" title="2 tcp和udp的区别"></a>2 tcp和udp的区别</h3><ul><li><p>UDP<strong>:面向无连接</strong>的,以<strong>数据报文</strong>的方式传送数据,存在数据丢失的的情况(<strong>不可靠性</strong>),<strong>没有流量控制的算法</strong>,(<strong>高效</strong>)不用建立连接 UDP 的头部开销小，只有八字节;(<strong>传输方式</strong>)支持单播,多播,广播</p><ul><li><p>应用:直播和王者荣誉,应用在比较实时的场景</p></li><li><p>小结:</p><ul><li>UDP 相比 TCP 简单的多，<strong>不需要建立连接，不需要验证数据报文，不需要流量控制，</strong>只会把想发的数据报文一股脑的丢给对端</li><li>虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li></ul></li></ul></li></ul><h3 id="3-tcp"><a href="#3-tcp" class="headerlink" title="3 tcp"></a>3 tcp</h3><h4 id="3-1-tcp的三次握手"><a href="#3-1-tcp的三次握手" class="headerlink" title="3.1 tcp的三次握手"></a>3.1 tcp的三次握手</h4><ul><li>客户端发送位码为syn＝1,随机产生seq number=1234567的数据包到服务器，服务器由SYN=1知道客户端要求建立联机(SYN_SEND)</li><li>服务器收到请求后要确认联机信息，向A发送ack number=(客户端的seq+1),syn=1,ack=1,随机产生seq=7654321的包(SYN_RECEIVED)</li><li>客户端收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，客户端会再发送ack number=(服务器的seq+1),ack=1，服务器收到后确认seq值与ack=1则连接建立成功。(ESTABLISED)</li></ul><h4 id="3-2为什么需要三次握手"><a href="#3-2为什么需要三次握手" class="headerlink" title="3.2为什么需要三次握手"></a>3.2为什么需要三次握手</h4><ul><li>防止出现<strong>失效的连接请求报文段被服务端接收</strong>的情况，从而产生错误。</li></ul><h4 id="3-3-tcp四次回收"><a href="#3-3-tcp四次回收" class="headerlink" title="3.3 tcp四次回收"></a>3.3 tcp四次回收</h4><ul><li><p>lient向Server发送FIN包，表示Client主动要关闭连接，然后进入FIN_WAIT_1状态，等待Server返回ACK包。此后Client不能再向Server发送数据，但能读取数据。</p></li><li><p>Server收到FIN包后向Client发送ACK包，然后进入CLOSE_WAIT状态，此后Server不能再读取数据，但可以继续向Client发送数据。</p></li><li><p>Client收到Server返回的ACK包后进入FIN_WAIT_2状态，等待Server发送FIN包。</p></li><li><p>Server完成数据的发送后，将FIN包发送给Client，然后进入LAST_ACK状态，等待Client返回ACK包，此后Server既不能读取数据，也不能发送数据。</p></li><li><p>Client收到FIN包后向Server发送ACK包，然后进入TIME_WAIT状态，接着等待足够长的时间（2MSL）以确保Server接收到ACK包，最后回到CLOSED状态，释放网络资源。</p></li><li><p>Server收到Client返回的ACK包后便回到CLOSED状态，释放网络资源。</p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-4/image-20200629071139821.png" alt="image-20200629071139821" style="zoom:80%;"><p><strong>为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？</strong></p><ul><li>了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。</li></ul></li></ul><h4 id="3-4-为什么需要四次"><a href="#3-4-为什么需要四次" class="headerlink" title="3.4 为什么需要四次"></a>3.4 为什么需要四次</h4><ul><li>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</li></ul><h4 id="3-5-ARQ协议"><a href="#3-5-ARQ协议" class="headerlink" title="3.5 ARQ协议"></a>3.5 ARQ协议</h4><ul><li>ARQ (Automatic Repeat-reQuest，<em>ARQ</em>）协议也就是<strong>自动重传协议</strong>。通过<strong>确认和超时机制保证了数据的正确送达</strong>，ARQ 协议包含<strong>停止等待 ARQ</strong> 和<strong>连续 ARQ</strong> 两种协议。</li></ul><h4 id="3-6-小结"><a href="#3-6-小结" class="headerlink" title="3.6 小结"></a>3.6 小结</h4><ul><li>建立连接需要三次握手，断开连接需要四次握手</li><li>滑动窗口解决了<strong>数据的丢包、顺序不对和流量控制问题</strong>(作用服务器端)</li><li>拥塞处理实现了对流量的控制，保证在全天候环境下最优的传递数据(作用于网络)<ul><li>包括四种算法<ul><li>慢开始</li><li>拥塞避免</li><li>快速重传</li><li>快速恢复</li></ul></li></ul></li></ul><h1 id="webpack-amp-Vue"><a href="#webpack-amp-Vue" class="headerlink" title="webpack&amp;Vue"></a>webpack&amp;Vue</h1><h3 id="1-webpack性能优化"><a href="#1-webpack性能优化" class="headerlink" title="1 webpack性能优化"></a>1 webpack性能优化</h3><p>面试题:有哪些方式可以减少 Webpack 的打包时间?有哪些方式可以让 Webpack 打出来的包更小?</p><h4 id="1-1-有哪些方式可以减少WebPack的打包时间"><a href="#1-1-有哪些方式可以减少WebPack的打包时间" class="headerlink" title="1.1 有哪些方式可以减少WebPack的打包时间"></a>1.1 有哪些方式可以减少WebPack的打包时间</h4><ul><li><strong>优化loader的文件搜索范围</strong></li><li><strong>将babel编译过的文件缓存起来</strong></li><li><strong>Happypack将Loader的同步执行转化为并行</strong></li><li><strong>DllPlugin</strong>可以将特定的类库提前打包引入</li><li>开启<strong>代码压缩</strong>:uglifyJS</li></ul><h4 id="1-2-减少Webpack打包后的体积"><a href="#1-2-减少Webpack打包后的体积" class="headerlink" title="1.2 减少Webpack打包后的体积"></a>1.2 减少Webpack打包后的体积</h4><ul><li>按需加载:<strong>我们就可以使用按需加载，将每个路由页面单独打包为一个文件</strong>(路由懒加载)</li><li><strong>Scope Hoisting</strong>:分析模块之间的依赖关系,尽可能的将打包出来的文件合并到一个函数中去</li><li><strong>Tree Shaking</strong>:实现删除项目中未被引入的代码 </li></ul><h4 id="1-3-打包工具的核心原理"><a href="#1-3-打包工具的核心原理" class="headerlink" title="1.3 打包工具的核心原理:"></a>1.3 打包工具的核心原理:</h4><ul><li>找出入口文件所有的依赖关系</li><li>通过构建CommonJs代码来获取<code>exports</code>导出的内容</li></ul><h3 id="2-MVVM"><a href="#2-MVVM" class="headerlink" title="2 MVVM"></a>2 MVVM</h3><h4 id="2-1MVVM理解"><a href="#2-1MVVM理解" class="headerlink" title="2.1MVVM理解"></a>2.1MVVM理解</h4><ul><li><p>组成:view(视图),viewModel(连接view和model的连接层,主要是组件),model(数据模型)</p></li><li><p>在mvvm架构下,view和model之见时没有直接联系的,是通过viewmodel进行交互,model和viewmodel之间的交互的双向的,因此view的数据变换会同步到model,model的数据变化也会反应在view中</p></li><li><p>viewmodel通过<strong>双向数据绑定</strong>将view和model联系起来,view和model之间的同步工作完全是自动化的不需要人为的干涉.开发者只需要关注业务和逻辑处理即可,不需要操作dom,不要关注数据同步问题,复杂的状态维护完全有mvvm来统一管理</p></li><li><p>UI 也是通过 <strong>数据驱动</strong>来完成,数据一旦更新就会刷新相应的的UI,UI改变也会同步对应的数据</p></li><li><p><strong>mvvm中最核心的就是数据的双向绑定</strong>(比如<strong>vue中的数据劫持</strong>)</p><ul><li><code>Vue</code> 内部使用了 <code>Object.defineProperty()</code> 来实现双向绑定，通过这个函数可以监听到 <code>set</code> 和 <code>get</code> 的事件。</li><li>proxy也可以实现数据的双向绑定</li></ul></li><li><p><strong>通过 ViewModel 将视图中的状态和用户的行为分离出一个抽象，这才是 MVVM 的精髓</strong>。</p></li></ul><h4 id="2-2-虚拟dom可以提高性能"><a href="#2-2-虚拟dom可以提高性能" class="headerlink" title="2.2 虚拟dom可以提高性能"></a>2.2 虚拟dom可以提高性能</h4><ul><li><p>虚拟<code>dom</code>相当于在<code>js</code>和真实<code>dom</code>中间加了一个缓存，利用<code>dom diff</code>算法避免了没有必要的<code>dom</code>操作，从而提高性能</p></li><li><p>具体实现</p><ul><li>用 <code>JavaScript</code> 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 <code>DOM</code> 树，插到文档当中</li><li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li><li>把2所记录的差异应用到步骤1所构建的真正的<code>DOM</code>树上，进行局部视图更新</li></ul></li><li><p><strong>Virtual Dom优势</strong>:</p><ul><li>将 Virtual DOM 作为一个兼容层，让我们还能对接非 Web 端的系统，<strong>实现跨端开发。</strong></li><li>同样的，通过 <strong>Virtual DOM 我们可以渲染到其他的平台</strong>，比如实现 SSR、同构渲染等等。</li><li><strong>实现组件的高度抽象化</strong></li></ul></li></ul><h3 id="3-前端路由的原理"><a href="#3-前端路由的原理" class="headerlink" title="3 前端路由的原理"></a>3 前端路由的原理</h3><ul><li>原理:<strong>监听url的变化,然后匹配路由规则</strong>,显示相应的页面并且<strong>无须刷新页面,</strong></li><li>目前前端使用的路由方式有两种<ul><li>hash模式:<code>www.test.com/#/</code>当<code>#</code>后面的哈希值发生变化时,可以通过<code>hashChange</code>事件来监听url的变化从而进行页面的跳转.无论哈希值如何变化,服务器端接收到的url请求永远是不变的``<a href="http://www.test.com`" target="_blank" rel="noopener">www.test.com`</a><ul><li>hash模式兼容性较好并且简单</li></ul></li><li>history模式: 是html5新提出的功能,主要使用<code>history.pushState</code>和<code>history.replaceState</code>改变url<ul><li>通过 History 模式改变 URL 同样<strong>不会引起页面的刷新，只会更新浏览器的历史记录。</strong></li></ul></li></ul></li><li>两种模式的对比<ul><li>Hash 模式只可以更改 <code>#</code> 后面的内容，History 模式可以通过 API 设置任意的同源 URL</li><li>History 模式可以通过 API 添加任意类型的数据到历史记录中，Hash 模式只能更改哈希值，也就是字符串</li><li>Hash 模式无需后端配置，并且兼容性好。History 模式在用户手动输入地址或者刷新页面的时候会发起 URL 请求，后端需要配置 <code>index.html</code> 页面用于匹配不到静态资源的时候</li></ul></li></ul><h3 id="4-Vue基础知识"><a href="#4-Vue基础知识" class="headerlink" title="4 Vue基础知识"></a>4 Vue基础知识</h3><h4 id="4-1-vue生命周期-钩子函数"><a href="#4-1-vue生命周期-钩子函数" class="headerlink" title="4.1 vue生命周期(钩子函数)"></a>4.1 vue生命周期(钩子函数)</h4><ul><li>vue生命周期:vue实例从创建到销毁的过程,从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</li><li>总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后<ul><li>创建前/后： 在<code>beforeCreate</code>阶段，<code>vue</code>实例的挂载元素<code>el</code>和数据对象<code>data</code>都为<code>undefined</code>，还未初始化。在<code>created</code>阶段，<code>vue</code>实例的数据对象<code>data</code>有了，el还没有</li><li>载入前/后：在<code>beforeMount</code>阶段，<code>vue</code>实例的<code>$el</code>和<code>data</code>都初始化了，但还是挂载之前为虚拟的<code>dom</code>节点，<code>data.message</code>还未替换。在<code>mounted</code>阶段，<code>vue</code>实例挂载完成，<code>data.message</code>成功渲染。</li><li>更新前/后：当<code>data</code>变化时，会触发<code>beforeUpdate</code>和<code>updated</code>方法</li><li>销毁前/后：在执行<code>destroy</code>方法后，对<code>data</code>的改变不会再触发周期函数，说明此时<code>vue</code>实例已经解除了事件监听以及和<code>dom</code>的绑定，但是<code>dom</code>结构依然存在</li><li><code>keep-alive</code> 独有的生命周期，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</li></ul></li></ul><h4 id="4-2-组件通信"><a href="#4-2-组件通信" class="headerlink" title="4.2 组件通信"></a>4.2 组件通信</h4><ul><li>组件通信划分为以下一种<ul><li>父子组件通信</li><li>兄弟组件通信</li><li>跨多层级组件通信</li><li>任意组件</li></ul></li></ul><h5 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h5><ul><li><p>父组件通过 <code>props</code> 传递数据给子组件，子组件通过 <code>emit</code> 发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。(易于监控数据的流动)</p><ul><li><strong>典型的单向数据流</strong>父组件通过 <code>props</code> 传递数据，子组件不能直接修改 <code>props</code>， 而是必须通过发送事件的方式告知父组件修改数据。</li></ul></li><li><p>使用语法糖<code>v-model</code>直接实现,<code>v-model</code>会默认会解析称为value的<code>props</code>和<code>input</code>事件,这种语法糖是典型的<strong>双向绑定</strong></p></li><li><p>通过访问 <code>$parent</code> 或者 <code>$children</code> 对象来访问组件实例中的方法和数据。</p></li><li><p>使用 <code>$listeners</code> 和 <code>.sync</code> 这两个属性。</p><ul><li><code>$listeners</code> 属性会将父组件中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器传递给子组件，子组件可以通过访问 <code>$listeners</code> 来自定义监听器。</li></ul></li></ul><h5 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h5><ul><li>通过查找父组件中的子组件实现，也就是 <code>this.$parent.$children</code>，在 <code>$children</code> 中可以通过组件 <code>name</code> 查询到需要的组件实例，然后进行通信。</li></ul><h5 id="跨多层次组件通信"><a href="#跨多层次组件通信" class="headerlink" title="跨多层次组件通信"></a>跨多层次组件通信</h5><ul><li>使用 Vue 2.2 新增的 API <code>provide / inject</code>，</li></ul><h5 id="任意组件"><a href="#任意组件" class="headerlink" title="任意组件"></a>任意组件</h5><ul><li>Event Bus事件总线的方式</li><li>vuex</li></ul><h4 id="4-3-extend"><a href="#4-3-extend" class="headerlink" title="4.3 extend"></a>4.3 extend</h4><ul><li><strong>扩展组件生成构造器</strong>,与<code>$mount</code>一起使用</li></ul><h4 id="4-3-mixin-和-mixins-区别"><a href="#4-3-mixin-和-mixins-区别" class="headerlink" title="4.3 mixin 和 mixins 区别"></a>4.3 mixin 和 mixins 区别</h4><ul><li>mixin:用于全局混入,会影响到每一个组件实例,通常插件就是这样使用</li><li>mixins是最常用的扩展组件的方式,如果多个组件有相同的业务逻辑,可以单独抽离出来,通过mixins混入代码,比如上拉加载数据这种业务逻辑</li><li><strong>注意:mixins中混入的钩子函数会优先于组件内的函数执行,并且在遇到同名选项的时候会进行选择性的合并</strong></li></ul><h4 id="4-4-computed和watch的区别"><a href="#4-4-computed和watch的区别" class="headerlink" title="4.4 computed和watch的区别"></a>4.4 computed和watch的区别</h4><ul><li>computed是计算属性,,依赖于其他属性计算值,并且congputed的属性有缓存,只要计算值发生变化才会返回内容</li><li>wath监听到值的变化就会执行回调,在回调中可以进行一些逻辑操作</li><li>使用场景:一般来说需要依赖别的属性来动态获得值的时候可以使用 <code>computed</code>，对于监听到值的变化需要做一些复杂业务逻辑的情况可以使用 <code>watch</code>。</li></ul><h4 id="4-5-v-show和v-if的区别"><a href="#4-5-v-show和v-if的区别" class="headerlink" title="4.5 v-show和v-if的区别"></a>4.5 v-show和v-if的区别</h4><ul><li><code>v-show</code> 只是在 <code>display: none</code> 和 <code>display: block</code> 之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 CSS，DOM 还是一直保留着的。所以总的来说 <code>v-show</code> 在初始渲染时有更高的开销，但是切换开销很小，<strong>更适合于频繁切换的场景。</strong></li><li><code>v-if</code> 的话就得说到 Vue 底层的编译了。当属性初始为 <code>false</code> 时，组件就不会被渲染，直到条件为 <code>true</code>，并且切换条件时会触发销毁/挂载组件，所以总的来说在切换时开销更高，<strong>更适合不经常切换的场景。</strong></li><li>v-if是<strong>惰性加载机制,</strong>只有在必要的时候才会进行渲染组件,减少整个页面的初始化开销</li></ul><h4 id="4-6-组件中的data什么时候可以使用对象"><a href="#4-6-组件中的data什么时候可以使用对象" class="headerlink" title="4.6 组件中的data什么时候可以使用对象"></a>4.6 组件中的data什么时候可以使用对象</h4><ul><li>组件复用的时候所有组件都会共享data,修改其中的data会影响其他所有的组件,所以需要将data写成函数,每次用到就调用一次函数获得新的数据</li><li>在创建new Vue的时候可以使用data对象,根组件中的data数据不进行共享的</li></ul><h4 id="4-7-vue中使用key的原因"><a href="#4-7-vue中使用key的原因" class="headerlink" title="4.7 vue中使用key的原因:"></a>4.7 vue中使用key的原因:</h4><ul><li>key的作用就是更新组件时<strong>判断两个节点是否相同</strong>。相同就复用，不相同就删除旧的创建新的。</li></ul><h3 id="5-Vue进阶"><a href="#5-Vue进阶" class="headerlink" title="5 Vue进阶"></a>5 Vue进阶</h3><h4 id="5-1-响应式原理-数据双向绑定的原理"><a href="#5-1-响应式原理-数据双向绑定的原理" class="headerlink" title="5.1 响应式原理(数据双向绑定的原理)"></a>5.1 响应式原理(数据双向绑定的原理)</h4><ul><li><p><code>vue</code>实现数据双向绑定主要是：采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 <code>Javascript</code> 对象传给 Vue 实例来作为它的 <code>data</code> 选项时，Vue 将遍历它的属性，用 <code>Object.defineProperty()</code> 将它们转为 <code>getter/setter</code>。用户看不到 <code>getter/setter</code>，但是在内部它们让 <code>Vue</code>追踪依赖，在属性被访问和修改时通知变化。(<strong>通过 defineProperty 实现的数据劫持，getter 收集依赖，setter 调用更新回调，</strong>)</p></li><li><p>vue的数据双向绑定 将<code>MVVM</code>作为数据绑定的入口，整合<code>Observer</code>，<code>Compile</code>和<code>Watcher</code>三者，通过<code>Observer</code>来监听自己的<code>model</code>的数据变化，通过<code>Compile</code>来解析编译模板指令（<code>vue</code>中是用来解析 <code>模板字符串的</code>），最终利用<code>watcher</code>搭起<code>observer</code>和<code>Compile</code>之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（<code>input</code>）—&gt;数据<code>model</code>变更双向绑定效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id&#x3D;&quot;input&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;text&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">let input &#x3D; document.getElementById(&quot;input&quot;);</span><br><span class="line">let text &#x3D; document.getElementById(&quot;text&quot;);</span><br><span class="line">let data &#x3D; &#123; value: &quot;&quot; &#125;;</span><br><span class="line">Object.defineProperty(data, &quot;value&quot;, &#123;</span><br><span class="line">  set: function(val) &#123;</span><br><span class="line">    text.innerHTML &#x3D; val;</span><br><span class="line">    input.value &#x3D; val;</span><br><span class="line">  &#125;,</span><br><span class="line">  get: function() &#123;</span><br><span class="line">    return input.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">input.onkeyup &#x3D; function(e) &#123;</span><br><span class="line">  data.value &#x3D; e.target.value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>缺陷:不能监控数组下标的变化(<strong>解决:采用数组方法操作数组</strong>),每次都都需要遍历data中的所有属性,并且只劫持属性,不能劫持对象</li></ul></li><li><p><strong>还可以通过proxy代理实现双向绑定</strong></p></li></ul><h4 id="5-2编译过程"><a href="#5-2编译过程" class="headerlink" title="5.2编译过程"></a>5.2编译过程</h4><ul><li>Vue通过编译器将模板通过几个阶段编译为render函数,然后通过执行render函数生成virtual dom,最终映射为真是的dom</li><li>编译过程:<ul><li>将模板解析为AST</li><li>优化AST</li><li>将AST转化为render函数</li></ul></li><li>总的来说,，<code>Vue complier</code> 是将 <code>template</code> 转化成一个 <code>render</code> 字符串。</li></ul><h4 id="5-3-NextTick-原理分析"><a href="#5-3-NextTick-原理分析" class="headerlink" title="5.3 NextTick 原理分析"></a>5.3 NextTick 原理分析</h4><ul><li>nextTick:可以让我们在dom更新循环之后执行延迟回调,用于获取更新后的dom</li></ul><h3 id="6-bable原理"><a href="#6-bable原理" class="headerlink" title="6 bable原理"></a>6 bable原理</h3><ul><li><code>ES6、7</code>代码输入 -&gt; <code>babylon</code>进行解析 -&gt; 得到<code>AST</code>（抽象语法树）-&gt; <code>plugin</code>用b<code>abel-traverse</code>对<code>AST</code>树进行遍历转译 -&gt;得到新的<code>AST</code>树-&gt;用<code>babel-generator</code>通过<code>AST</code>树生成<code>ES5</code>代码</li></ul><h3 id="7-前端监控"><a href="#7-前端监控" class="headerlink" title="7 前端监控"></a>7 前端监控</h3><ul><li>前端监控分为三种:<ul><li>页面埋点:一般会监控以下数据<ul><li>PV / UV(页面被访问的次数,访问用户数)</li><li>停留时长</li><li>流量来源</li><li>用户交互</li></ul></li><li>性能监控:只需要调用 <code>performance.getEntriesByType(&#39;navigation&#39;)</code> 这行代码</li><li>异常监控<ul><li>是使用 <code>window.onerror</code> 拦截报错</li><li>对于跨域的代码运行错误会显示 <code>Script error.</code> 对于这种情况我们需要给 <code>script</code> 标签添加 <code>crossorigin</code> 属性</li><li>对于某些浏览器可能不会显示调用栈信息，这种情况可以通过 <code>arguments.callee.caller</code> 来做栈递归</li><li>对于异步代码来说，可以使用 <code>catch</code> 的方式捕获错误</li><li>接口异常就相对来说简单了，可以列举出出错的状态码</li></ul></li></ul></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1.工厂模式"></a>1.工厂模式</h3><ul><li>工厂起到的作用就是隐藏了创建实例的复杂度，只需要提供一个接口，简单清晰。(提供结构就可以创建实例)</li></ul><h3 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2 单例模式"></a>2 单例模式</h3><ul><li>全局缓存和全局状态管理(vuex)只需要一个对象,采用单例模式,(全文只会创建一个,创建之前都会进行判断,存在责部门则不会再创建实例对象)</li></ul><h3 id="3-适配器模式"><a href="#3-适配器模式" class="headerlink" title="3 适配器模式"></a>3 适配器模式</h3><ul><li>适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。</li></ul><h3 id="4-装饰者模式"><a href="#4-装饰者模式" class="headerlink" title="4 装饰者模式"></a>4 装饰者模式</h3><ul><li>装饰模式不需要改变已有的接口，作用是给对象添加功能。</li></ul><h3 id="5-代理模式"><a href="#5-代理模式" class="headerlink" title="5 代理模式"></a>5 代理模式</h3><ul><li>代理是为了控制对对象的访问，不让外部直接访问到对象。(事件代理就用到了代理模式。)</li></ul><h3 id="6-发布订阅模式"><a href="#6-发布订阅模式" class="headerlink" title="6 发布订阅模式"></a>6 发布订阅模式</h3><ul><li>也叫观察者模式,通过一对一或者一对多的依赖关系，当对象发生改变时，订阅方都会收到通知</li><li>如何实现响应式也是使用了该模式。对于需要实现响应式的对象来说，在 <code>get</code> 的时候会进行依赖收集，当改变了对象的属性时，就会触发派发更新。</li></ul><h3 id="7-外观模式"><a href="#7-外观模式" class="headerlink" title="7 外观模式"></a>7 外观模式</h3><ul><li>外观模式提供了一个接口，隐藏了内部的逻辑，更加方便外部调用。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://sparkparis.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="随笔" scheme="https://sparkparis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>刷题汇总</title>
    <link href="https://sparkparis.github.io/2020/06/10/%E9%9D%A2%E8%AF%95-3/"/>
    <id>https://sparkparis.github.io/2020/06/10/%E9%9D%A2%E8%AF%95-3/</id>
    <published>2020-06-10T02:55:41.000Z</published>
    <updated>2020-06-29T09:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">前端面试题库<a id="more"></a><h1 id="JavaScript-ES6"><a href="#JavaScript-ES6" class="headerlink" title="JavaScript(ES6)"></a>JavaScript(ES6)</h1><h3 id="1-Promise"><a href="#1-Promise" class="headerlink" title="1. Promise"></a>1. Promise</h3><h4 id="1-1-promise-的了解"><a href="#1-1-promise-的了解" class="headerlink" title="1.1 promise 的了解"></a>1.1 promise 的了解</h4><ul><li><p>依照 <code>Promise/A+</code> 的定义，<code>Promise</code> 有四种状态：</p><ul><li><code>pending:</code> 初始状态, 非 <code>fulfilled</code> 或 <code>rejected.</code></li><li><code>fulfilled:</code> 成功的操作.</li><li><code>rejected:</code> 失败的操作.</li><li><code>settled: Promise</code>已被<code>fulfilled</code>或<code>rejected</code>，且不是<code>pending</code></li></ul></li><li><p>另外， <code>fulfilled</code>与 <code>rejected</code>一起合称 <code>settled</code></p></li><li><p><code>Promise</code> 对象用来进行<strong>延迟</strong>(<code>deferred</code>) 和<strong>异步</strong>(<code>asynchronous</code>) 计算</p></li><li><p><code>Promise</code> 实例拥有 <code>then</code> 方法（具有 <code>then</code> 方法的对象，通常被称为<code>thenable</code>）。它的使用方法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><ul><li>接收两个函数作为参数，一个在 <code>fulfilled</code> 的时候被调用，一个在<code>rejected</code>的时候被调用，接收参数就是 <code>future</code>，<code>onFulfilled</code> 对应<code>resolve</code>, <code>onRejected</code>对应 <code>reject</code></li></ul></li></ul><h4 id="1-2-promise的实现"><a href="#1-2-promise的实现" class="headerlink" title="1.2 promise的实现"></a>1.2 promise的实现</h4><ul><li><p><code>Promise</code> 是 <code>ES6</code> 新增的语法，解决了<strong>回调地狱</strong>的问题。</p></li><li><p>可以把 <code>Promise</code>看成一个状态机。初始是 <code>pending</code> 状态，可以通过函数 <code>resolve</code> 和 <code>reject</code>，将状态转变为 <code>resolved</code> 或者 <code>rejected</code> 状态，状态一旦改变就不能再次变化。</p></li><li><p><code>then</code> 函数会返回一个 <code>Promise</code> 实例，并且该返回值是一个新的实例而不是之前的实例。因为 <code>Promise</code> 规范规定除了 <code>pending</code> 状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个 <code>then</code> 调用就失去意义了。 对于 <code>then</code> 来说，本质上可以把它看成是 <code>flatMap</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 三个常量用于表示状态</span><br><span class="line">const PENDING &#x3D; &#39;pending&#39;</span><br><span class="line">const RESOLVED &#x3D; &#39;resolved&#39;</span><br><span class="line">const REJECTED &#x3D; &#39;rejected&#39;</span><br><span class="line"></span><br><span class="line">function MyPromise(fn) &#123;</span><br><span class="line">    const that &#x3D; this</span><br><span class="line">    this.state &#x3D; PENDING</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; value 变量用于保存 resolve 或者 reject 中传入的值</span><br><span class="line">    this.value &#x3D; null</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 用于保存 then 中的回调，因为当执行完 Promise 时状态可能还是等待中，这时候应该把 then 中的回调保存起来用于状态改变时使用</span><br><span class="line">    that.resolvedCallbacks &#x3D; []</span><br><span class="line">    that.rejectedCallbacks &#x3D; []</span><br><span class="line"></span><br><span class="line">    function resolve(value) &#123;</span><br><span class="line">         &#x2F;&#x2F; 首先两个函数都得判断当前状态是否为等待中</span><br><span class="line">        if(that.state &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">            that.state &#x3D; RESOLVED</span><br><span class="line">            that.value &#x3D; value</span><br><span class="line">            &#x2F;&#x2F; 遍历回调数组并执行</span><br><span class="line">            that.resolvedCallbacks.map(cb&#x3D;&gt;cb(that.value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function reject(value) &#123;</span><br><span class="line">        if(that.state &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">            that.state &#x3D; REJECTED</span><br><span class="line">            that.value &#x3D; value</span><br><span class="line">            that.rejectedCallbacks.map(cb&#x3D;&gt;cb(that.value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 完成以上两个函数以后，我们就该实现如何执行 Promise 中传入的函数了</span><br><span class="line">    try &#123;</span><br><span class="line">        fn(resolve,reject)</span><br><span class="line">    &#125;cach(e)&#123;</span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 最后我们来实现较为复杂的 then 函数</span><br><span class="line">MyPromise.prototype.then &#x3D; function(onFulfilled,onRejected)&#123;</span><br><span class="line">  const that &#x3D; this</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 判断两个参数是否为函数类型，因为这两个参数是可选参数</span><br><span class="line">  onFulfilled &#x3D; typeof onFulfilled &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onFulfilled : v&#x3D;&gt;v</span><br><span class="line">  onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onRejected : e&#x3D;&gt;throw e</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 当状态不是等待态时，就去执行相对应的函数。如果状态是等待态的话，就往回调函数中 push 函数</span><br><span class="line">  if(this.state &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">      this.resolvedCallbacks.push(onFulfilled)</span><br><span class="line">      this.rejectedCallbacks.push(onRejected)</span><br><span class="line">  &#125;</span><br><span class="line">  if(this.state &#x3D;&#x3D;&#x3D; RESOLVED) &#123;</span><br><span class="line">      onFulfilled(that.value)</span><br><span class="line">  &#125;</span><br><span class="line">  if(this.state &#x3D;&#x3D;&#x3D; REJECTED) &#123;</span><br><span class="line">      onRejected(that.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-ES6"><a href="#2-ES6" class="headerlink" title="2. ES6"></a>2. ES6</h3><h4 id="2-1-ES6中增加了新的特性-理解"><a href="#2-1-ES6中增加了新的特性-理解" class="headerlink" title="2.1 ES6中增加了新的特性(理解)"></a>2.1 ES6中增加了新的特性(理解)</h4><ul><li>新增模板字符串（为<code>JavaScript</code>提供了简单的字符串插值功能）</li><li><strong>箭头函数</strong>,</li><li><code>for-of</code>（用来遍历数据—例如数组中的值。）</li><li><code>arguments</code>对象可被不定参数和默认参数完美代替。</li><li><code>ES6</code>将p<code>romise</code>对象纳入规范，提供了原生的<code>Promise</code>对象。generator</li><li>增加了<code>let</code>和<code>const</code>命令，用来声明变量。</li><li>增加了块级作用域。</li><li><code>let</code>命令实际上就增加了块级作用域。</li><li>还有就是引入<code>module</code>模块的概念</li></ul><h4 id="2-1-箭头函数与普通函数的区别"><a href="#2-1-箭头函数与普通函数的区别" class="headerlink" title="2.1 箭头函数与普通函数的区别"></a>2.1 箭头函数与普通函数的区别</h4><ul><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用<code>Rest</code>参数代替</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数</li><li><strong>箭头函数的特点</strong>:<ul><li>箭头函数其实是没有 <code>this</code> 的，这个函数中的 <code>this</code> 只取决于他外面的第一个不是箭头函数的函数的 <code>this</code>。在这个例子中，因为调用 <code>a</code> 符合前面代码中的第一个情况，所以 <code>this</code> 是<code>window</code>。并且 <code>this</code>一旦绑定了上下文，就不会被任何代码改变</li></ul></li></ul><h4 id="2-2-let-var-const"><a href="#2-2-let-var-const" class="headerlink" title="2.2  let var const"></a>2.2  let var const</h4><p><strong>let</strong></p><ul><li>允许你声明一个<strong>块级作用域</strong>被限制在块级中的变量、语句或者表达式</li><li>let绑定不受<strong>变量提升</strong>的约束，这意味着let声明不会被提升到当前</li><li>该变量处于从<strong>块开始到初始化处理的“暂存死区”</strong></li></ul><p><strong>var</strong></p><ul><li>声明变量的作用域限制在其声明位置的上下文中，而非声明变量总是全局的</li><li>由于变量声明（以及其他声明）总是在任意代码执行之前处理的，所以在代码中的任意位置声明变量总是等效于在代码开头声明</li></ul><p><strong>const</strong></p><ul><li>声明创建一个值的只读引用 (即指针)</li><li>基本数据当值发生改变时，那么其对应的指针也将发生改变，故造成 <code>const</code>申明基本数据类型时</li><li>再将其值改变时，将会造成报错， 例如 <code>const a = 3</code> ; <code>a = 5</code>时 将会报错</li><li>但是如果是复合类型时，如果只改变复合类型的其中某个<code>Value</code>项时， 将还是正常使用</li></ul><h3 id="3-异步编程的实现方式"><a href="#3-异步编程的实现方式" class="headerlink" title="3. 异步编程的实现方式"></a>3. 异步编程的实现方式</h3><ul><li><strong>回调函数</strong><ul><li>优点：简单、容易理解</li><li>缺点：不利于维护，代码耦合高</li></ul></li><li><strong>事件监听</strong>(采用时间驱动模式，取决于某个事件是否发生)：<ul><li>优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数</li><li>缺点：事件驱动型，流程不够清晰</li></ul></li><li><strong>发布/订阅(观察者模式)</strong><ul><li>类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者</li></ul></li><li><strong>Promise对象</strong><ul><li>优点：可以利用then方法，进行链式写法；可以书写错误时的回调函数；</li><li>缺点：编写和理解，相对比较难</li></ul></li><li><strong>Generator函数</strong><ul><li>优点：函数体内外的数据交换、错误处理机制</li><li>缺点：流程管理不方便</li><li><code>Generator</code> 是 <code>ES6</code>中新增的语法，和 <code>Promise</code> 一样，都可以用来异步编程</li></ul></li><li><strong>async函数</strong><ul><li>优点：内置执行器、更好的语义、更广的适用性、返回的是Promise、结构清晰。</li><li>缺点：错误处理机制</li></ul></li></ul><p><strong>async和promise的区别</strong></p><ul><li><code>async</code> 和 <code>await</code> 相比直接使用 <code>Promise</code> 来说，优势在于处理 then 的调用链，能够更清晰准确的写出代码。缺点在于滥用 <code>await</code> 可能会导致性能问题，因为 <code>await</code> 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性</li><li></li></ul><h3 id="4-html5"><a href="#4-html5" class="headerlink" title="4. html5"></a>4. html5</h3><h4 id="4-1-html5有哪些新特性-移出了哪些元素"><a href="#4-1-html5有哪些新特性-移出了哪些元素" class="headerlink" title="4.1 html5有哪些新特性,移出了哪些元素"></a>4.1 html5有哪些新特性,移出了哪些元素</h4><ul><li>增加的元素:主要是对图像,位置,存储,多任务等功能的增加<ul><li>绘画canvas</li><li>用于媒介回放的video和audio</li><li>本地离线存储localstorage,用于长期存储数据,关闭;浏览器页面依然存在</li><li>sessionStorage会话存储在浏览器关闭之后自动删除</li><li>语义化更好的内容标签header nav article section footer aside</li><li>表单控件calendar,date ,time,email,url search</li><li>新的技术websocket,webworker</li></ul></li><li>移出的元素<ul><li>纯表现的元素:basefont,center,tt,strike</li><li>对可用性产生负面影响的元素frame,noframes,frameset</li></ul></li></ul><h4 id="4-2-html5-的离线存储怎么使用-解释一下工作原理"><a href="#4-2-html5-的离线存储怎么使用-解释一下工作原理" class="headerlink" title="4.2 html5 的离线存储怎么使用,解释一下工作原理"></a>4.2 html5 的离线存储怎么使用,解释一下工作原理</h4><ul><li><p>用户在没有与英特网进行连接时,可以正常访问站点应用,在连接时会更新用户机器上的缓存文件</p></li><li><p>原理:html5的离线存储是基于新建的.appcache文件的缓存机制,通过这个文件上的缓存清单离线存储资源,这些资源就会像cookie保存下来,之后当网络处于离线状态,就会调用离线存储的资源来显示页面</p></li><li><p>如何使用:</p><ul><li>在页面头部的下面添加manifest属性</li><li>在cache.manifest文件中编写离线存储资源</li><li>在离线状态下调用<strong>window.applicationCache</strong>进行需求实现</li></ul></li></ul><h4 id="4-3-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"><a href="#4-3-浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢" class="headerlink" title="4.3 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"></a>4.3 浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</h4><ul><li>在线的情况下,浏览器发现html的头部有manifest属性,如果用户是<strong>第一次访问</strong>,浏览器就会根据manifest文件下载资源并进行离线存储.如果<strong>已经访问</strong>过并且已经离线存储了就会<strong>直接访问离线的资源加载页面</strong>,浏览器会<strong>对比新的manifest文件和旧的manifest文件</strong>,如果文件发生改变就会<strong>重新下载离线存储资源</strong>,反之不做任何改变</li><li>离线的情况下浏览器就会直接使用下载存储的资源显示页面</li></ul><h4 id="4-4-iframe的缺点"><a href="#4-4-iframe的缺点" class="headerlink" title="4.4 iframe的缺点"></a>4.4 iframe的缺点</h4><ul><li>iframe会阻塞页面的加载,    iframe和主页面共享连接池,而浏览器对相同域的链接有限制,所有对页面的并行加载有影响</li><li>搜索引擎的检索无法解读这种页面,不利于SEO优化</li><li>如果需要使用<code>iframe</code>，最好是通过<code>javascript</code>动态给<code>iframe</code>添加<code>src</code>属性值，这样可以<strong>绕开以上两个问题</strong></li></ul><h4 id="4-5-canvas和svg的区别"><a href="#4-5-canvas和svg的区别" class="headerlink" title="4.5 canvas和svg的区别"></a>4.5 canvas和svg的区别</h4><ul><li>svg绘制的每一个图像都是一个单独的dom节点,可以方便的进行元素的修改和事件的绑定,canvas绘制的就是一张画布</li><li>svg输入的是矢量图像,可以进行缩放不会产生锯齿和失真,canvas和图片一样会产生锯齿和失真</li></ul><h4 id="4-6-src和href的区别"><a href="#4-6-src和href的区别" class="headerlink" title="4.6 src和href的区别"></a>4.6 src和href的区别</h4><ul><li>src是替换当前元素,href是将文档和资源建立连接</li><li><code>&lt;link href=&#39;base.css&#39; ref=&#39;stylesheet&#39;</code> 那么浏览器会识别该文档为<code>css</code>文件，就会并行下载资源并且不会停止<strong>对当前文档的处理</strong>。这也是为什么建议使用<code>link</code>方式来加载<code>css</code>，而不是使用<code>@import</code></li></ul><h4 id="4-7-网页中用到的图片格式"><a href="#4-7-网页中用到的图片格式" class="headerlink" title="4.7 网页中用到的图片格式"></a>4.7 网页中用到的图片格式</h4><ul><li>webp:在加快图片加载速度的图片格式。图片压缩体积大约只有<code>JPEG</code>的<code>2/3</code></li><li>Apng:是PNG的位图动画扩展</li><li>png-8,png-16,jpeg,gif,svg</li></ul><h4 id="4-8刷新页面-一次js请求会有哪些缓存"><a href="#4-8刷新页面-一次js请求会有哪些缓存" class="headerlink" title="4.8刷新页面,一次js请求会有哪些缓存"></a>4.8刷新页面,一次js请求会有哪些缓存</h4><ul><li>DNS缓存,CDN缓存,浏览器缓存,服务器缓存</li></ul><h4 id="4-9网页有大量图片一次性加载很慢的优化方案"><a href="#4-9网页有大量图片一次性加载很慢的优化方案" class="headerlink" title="4.9网页有大量图片一次性加载很慢的优化方案"></a>4.9网页有大量图片一次性加载很慢的优化方案</h4><ul><li>图片的懒加载:在图片的未加载区域添加滚动事件,当当图片与浏览器顶端的距离与页面的距离,如果前者小于后者优先加载</li><li>图片预加载:当有一些幻灯片,相册等</li><li>一些CSS图片可以采用CSSsprite,SVGsprite,base64,iconfont等技术处理图片</li><li>如果图片过大可以使用特殊编码的图片,先加载一张压缩比较严重的图片提高用户体验</li><li>如果图片展示区域小于图片的真实大小,先在服务器端将图片压缩到显示区域的大小在进行展示</li></ul><h3 id="5-JS进阶基础"><a href="#5-JS进阶基础" class="headerlink" title="5 JS进阶基础"></a>5 JS进阶基础</h3><h4 id="5-1-变量提升的理解"><a href="#5-1-变量提升的理解" class="headerlink" title="5.1 变量提升的理解"></a>5.1 变量提升的理解</h4><ul><li>两种执行环境:当js代码执行庭时会产生执行环境,只要代码不是写在函数内部,就会在全局执行环境中,在函数内部执行的会产生函数执行环境,全局执行的产生全局执行环境</li><li>在生成执行环境会有两个阶段,创建阶段和代码执行阶段;</li><li>创建阶段:js解释器就会找到所有需要提升的变量和函数,并给他们提前在内存中开辟好内次空间,函数会在保存在整个内存空间,变量声明并赋值为undefined,所以在第二个阶段就可以直接提前使用</li><li>在变量提升的过程中,相同的函数会覆盖上一层就的函数,,并且函数优先于变量提升</li></ul><h4 id="5-2-bind-call-apply的区别"><a href="#5-2-bind-call-apply的区别" class="headerlink" title="5.2 bind,call,apply的区别"></a>5.2 bind,call,apply的区别</h4><ul><li>相同点:三者都用于改变this的指向</li><li>call和apply作用相同,传参的方式不同,除了第一个参数以外<ul><li>call可以接受一个参数列表</li><li>apply可以接收一个参数数组</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; &#123;value:&#39;hello&#39;&#125;</span><br><span class="line">function getValue(name,age)&#123;</span><br><span class="line">  console.log(name),</span><br><span class="line">  console.log(age),</span><br><span class="line">  console.log(this.value)</span><br><span class="line">&#125;</span><br><span class="line">getValue.call(a,&#39;张三&#39;,&#39;18)</span><br><span class="line">getValue.apply(a,[&#39;张三&#39;,&#39;18&#39;])</span><br></pre></td></tr></table></figure><ul><li>bind和其他的 方法作用一致,会返回一个函数,<strong>可以通过bind实现函数柯里化(柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。)</strong></li></ul><h4 id="5-3-函数柯里化"><a href="#5-3-函数柯里化" class="headerlink" title="5.3  函数柯里化"></a>5.3  函数柯里化</h4><ul><li>概念:<strong>将接收多个参数的函数转化为接收一个参数的函数的技术</strong></li><li>理解:用闭包把参数保存起来，当参数的数量足够执行函数了，就开始执行函数。</li><li>应用:<strong>延迟计算、参数复用、动态生成函数的作用</strong></li><li>实现(基本实现)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function curry(fun,...args)&#123;</span><br><span class="line">if(args.length&gt;&#x3D;fun.length)&#123;</span><br><span class="line">return fn(...args)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return (...args1)&#x3D;&gt;&#123;return curry(fun,...args,...args1)&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">验证</span><br><span class="line"> const curryingFun &#x3D; currying(fun)</span><br><span class="line">    curryingFun(1)(2)(3);  &#x2F;&#x2F; 1 2 3 </span><br><span class="line">    curryingFun(1, 2)(3);  &#x2F;&#x2F; 1 2 3 </span><br><span class="line">    curryingFun(1, 2, 3);  &#x2F;&#x2F; 1 2 3 </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">两数相加的函数柯里化</span><br><span class="line">&#x2F;&#x2F;函数表达式定义</span><br><span class="line">var add &#x3D; function(x)&#123;</span><br><span class="line">    return function(y)&#123;</span><br><span class="line">        return x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F;函数调用</span><br><span class="line">add(3)(4);</span><br></pre></td></tr></table></figure><ul><li>通过bind实现函数柯里化<ul><li>bind()方法所返回的函数的length（形参数量）等于原函数的形参数量减去传入bind()方法中的实参数量（第一个参数以后的所有参数），因为传入bind中的实参都会绑定到原函数的形参</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function func(a,b,c,d)&#123;&#125;&#x2F;&#x2F;fun的length为4</span><br><span class="line">var after &#x3D; func.bind(null,2,3)&#x2F;&#x2F;2</span><br><span class="line">console.log(after.length)&#x2F;&#x2F;4-2&#x3D;2</span><br></pre></td></tr></table></figure><h4 id="5-4-模拟实现bind-call和apply函数"><a href="#5-4-模拟实现bind-call和apply函数" class="headerlink" title="5.4 模拟实现bind,call和apply函数"></a>5.4 模拟实现bind,call和apply函数</h4><ul><li>bind函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">不传入第一个参数，那么默认为 window</span><br><span class="line">改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</span><br><span class="line">*&#x2F;</span><br><span class="line">Function.prototype.myBind &#x3D; function(context)&#123;</span><br><span class="line">  if (typeof this !&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F;当前的this不是函数则抛出异常</span><br><span class="line">    throw new Error(&#39;EROOR&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;重新指定this,与前者不同的是这里返回的是一个函数</span><br><span class="line">  var _this &#x3D; this;</span><br><span class="line">  &#x2F;&#x2F;参数是数组</span><br><span class="line">  var args &#x3D; [...arguments].slice(1);</span><br><span class="line">  &#x2F;&#x2F;返回一个函数</span><br><span class="line"></span><br><span class="line">  return function F() &#123;</span><br><span class="line">    &#x2F;&#x2F;返回的函数需要new F,判断</span><br><span class="line">    if (this instanceof F) &#123;</span><br><span class="line">      return new _this(...args, ...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    return _this.apply(context, args.concat(...arguments))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>call函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.模拟实现call(可接受参数列表)</span><br><span class="line">Function.prototype.myCall &#x3D; function (context) &#123;</span><br><span class="line">  var context &#x3D; context || window;</span><br><span class="line">  &#x2F;&#x2F; 将this指向fn</span><br><span class="line">  context.fn &#x3D; this;</span><br><span class="line">  var args &#x3D; arguments.slice(1);</span><br><span class="line">  var result &#x3D; context.fn(args);</span><br><span class="line">  &#x2F;&#x2F;删除临时函数</span><br><span class="line">  delete context.fn;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>apply函数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2.模拟实现apply(可接收数组列列表)</span><br><span class="line">Function.prototype.myApply &#x3D; function(context) &#123;</span><br><span class="line">  var context &#x3D; context || window;</span><br><span class="line">  context.fn &#x3D; this;</span><br><span class="line">  var result;</span><br><span class="line">  &#x2F;&#x2F;参数判断</span><br><span class="line">  if (arguments[1]) &#123;</span><br><span class="line">    result &#x3D; context.fn(...arguments[1])</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    result &#x3D; context.fn();</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;删除fn</span><br><span class="line">  delete context.fn;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-原型链"><a href="#5-5-原型链" class="headerlink" title="5.5 原型链"></a>5.5 原型链</h4><ul><li>每个函数都有一个prototype属性,指向原型,除了Function.prototype.bind()</li><li>每个对象都有一个<code>__proto__</code>属性,指向的是该对象的构造函数的原型,这个属性气质执行的是<code>prototype</code>,但是<code>prototype</code>内部属性我们并不能直接访问到,通过<code>__proto__</code>来访问</li><li>对象可以通过<code>__proto__</code>来访问不属于对象中的属性,<code>__proto__</code>将对象连接起来形成了原型链</li></ul><h4 id="5-6-如何判断对象类型"><a href="#5-6-如何判断对象类型" class="headerlink" title="5.6 如何判断对象类型"></a>5.6 如何判断对象类型</h4><ul><li>通过<code>Object.prototype.toString.call(xx)</code></li><li>通过instanceof可以正确的判断对象的类型,因为内部机制是通过判断原型链中是否能找到该类的原型<code>prototype</code></li></ul><h4 id="5-7基本数据类型和引用数据类型在存储上的差别"><a href="#5-7基本数据类型和引用数据类型在存储上的差别" class="headerlink" title="5.7基本数据类型和引用数据类型在存储上的差别"></a>5.7基本数据类型和引用数据类型在存储上的差别</h4><ul><li>基本数据类型存在栈上</li><li>引用数据类型存储在堆上</li></ul><h4 id="5-8-深拷贝的方法"><a href="#5-8-深拷贝的方法" class="headerlink" title="5.8 深拷贝的方法"></a>5.8 深拷贝的方法</h4><ul><li>json.parse(Json.stringify(object))</li></ul><h4 id="5-9-防抖和节流"><a href="#5-9-防抖和节流" class="headerlink" title="5.9 防抖和节流"></a>5.9 防抖和节流</h4><ul><li><p>防抖 (debounce): 将多次高频操作优化为只在最后一次执行，通常使用的场景是：用户输入，只需再输入完成后做一次输入校验即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.防抖:返回的是一个闭包,这里使用的是普通函数,里面的setTimeOut使用的是箭头函数,这样做的目的是让this指向准确,this的真是指向并不是debounce的调用者,而是返回闭包的调用者;对传入闭包的参数进行透传</span><br><span class="line">function debounce(event, time) &#123;</span><br><span class="line">  let timer &#x3D; null</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    &#x2F;&#x2F;清除之前的定时器,重新启动定时器开始计算</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      event.apply(this, args)</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果需要理解执行在内部添加一个flag,第一次执行则立即执行</span><br><span class="line">function debounceIEF(event, time, flag) &#123;</span><br><span class="line">  let timer &#x3D; null;</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    if (flag &amp;&amp; !timer) &#123;</span><br><span class="line">      event.apply(this, args);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;设定延时</span><br><span class="line">    timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      event.apply(this, args)</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节流(throttle): 每隔一段时间后执行一次，也就是降低频率，将高频操作优化成低频操作，通常使用场景: 滚动条事件 或者 <code>resize</code> 事件，通常每隔 <code>100~500 ms</code>执行一次即可。两种实现方式</p><ul><li>时间戳</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2.防抖:时间戳和定时器两种实现方式</span><br><span class="line">&#x2F;&#x2F; 时间戳:第一次肯定触发,最后一次不会触发</span><br><span class="line">function throttle(event, time) &#123;</span><br><span class="line">  let pre &#x3D; 0;</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    if (Date.now - pre &gt; time) &#123;</span><br><span class="line">      pre &#x3D; Date.now;</span><br><span class="line">      event.apply(this, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定时器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定时器:第一次事件不会触发,最后一次一定会触发</span><br><span class="line">function throttleTime(event, time) &#123;</span><br><span class="line">  let timer &#x3D; null;</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    if (!timer) &#123;</span><br><span class="line">      let timer &#x3D; null;</span><br><span class="line">      timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        event.apply(this, args)</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结合版</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 定时器和时间戳的结合班,相当于是节流和防抖的结合版,第一次和最后一次都会触发 </span><br><span class="line">function throttleAll(event, time) &#123;</span><br><span class="line">  let pre &#x3D; 0;</span><br><span class="line">  let timer &#x3D; null;</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    if (Date.now - pre &gt; time) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer &#x3D; null;</span><br><span class="line">      pre &#x3D; Date.now;</span><br><span class="line">      event.apply(this, args)</span><br><span class="line">    &#125; else if (!timer) &#123;</span><br><span class="line">      timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        event.apply(this, args)</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-10-数组降为"><a href="#5-10-数组降为" class="headerlink" title="5.10 数组降为"></a>5.10 数组降为</h4><ul><li>一般的数组降维的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,[3]].flatMap(v&#x3D;&gt;v)</span><br></pre></td></tr></table></figure><ul><li><p>将一个多维数组彻底降维</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const flatDeep &#x3D; (arr)&#x3D;&gt;&#123;</span><br><span class="line">return Array.isArray(arr)?arr.reduce((a,b)&#x3D;&gt;[...a,flatDeep(b)],[]):[arr]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-11-typeof和instanceof-有什么区别"><a href="#5-11-typeof和instanceof-有什么区别" class="headerlink" title="5.11 typeof和instanceof()有什么区别"></a>5.11 typeof和instanceof()有什么区别</h4><ul><li><p>typeof对于基本数据类型,除了null都可以显示正确的类型</p></li><li><p>instanceof对于对象,除了函数都会显示object,<strong>instanceof 可以正确的判断对象的类型,因为他是通过原型链查找是是否含有该类的原型</strong></p></li><li><p>instanceof的湿实现</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function instance(right, left) &#123;</span><br><span class="line">  &#x2F;&#x2F; 类型的原型</span><br><span class="line">  var prototype &#x3D; right.prototype;</span><br><span class="line">  &#x2F;&#x2F;对象的原型</span><br><span class="line">  var left &#x3D; left.__proto__</span><br><span class="line">  &#x2F;&#x2F;判断对象是不是属于原型</span><br><span class="line">  while (true) &#123;</span><br><span class="line">    if (left &#x3D;&#x3D; null) &#123;</span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">    if (prototype &#x3D;&#x3D; left) &#123;</span><br><span class="line">      return true</span><br><span class="line">    &#125;</span><br><span class="line">    left &#x3D; left.__proto__;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h3 id="1-div-css相对于table标签的优势"><a href="#1-div-css相对于table标签的优势" class="headerlink" title="1.div+css相对于table标签的优势"></a>1.div+css相对于table标签的优势</h3><ul><li>改版的时候更加方便,只需要修改css样式即可</li><li>结构和样式分离</li><li>有利益SEO引擎的优化,排名更靠前</li><li>页面加载速度快,结构清晰,table标签会阻塞页面的加载</li></ul><h3 id="2-css-sprite是什么-优缺点"><a href="#2-css-sprite是什么-优缺点" class="headerlink" title="2. css sprite是什么?优缺点"></a>2. css sprite是什么?优缺点</h3><ul><li>是将多个图片合并到一张图片中,中background-position和元素尺寸调节需要显示的背景图案</li><li>优点:<ul><li>减少了服务器请求的数量,缓解服务器的压力</li><li>增加图片信息重复度,增加压缩比,减小图片的大小</li><li>更换风格方便只需要在一张图片上更换颜色和样式即可</li></ul></li><li>缺点:<ul><li>合并麻烦</li><li>维护麻烦</li></ul></li></ul><h3 id="3-display-none和visibility-hidden区别"><a href="#3-display-none和visibility-hidden区别" class="headerlink" title="3. display:none和visibility:hidden区别"></a>3. display:none和visibility:hidden区别</h3><ul><li>二者都可以让元素不可见</li><li>区别<ul><li>是否在渲染树:前者会从渲染树中消失,不占据然和空间;后者不会,会占据空间,只是内容不显示</li><li>继承性:前者是非继承性元素,修改子孙节点,无法显示;后者是继承性元素,修改子孙节点可以进行显示</li><li>是否回流和重排:前者修改普通流中的display会造成回流;后者只会发生重绘</li><li>是否读取元素的内容:读屏器不会读取前者的元素内容,会读取后者的内容</li></ul></li></ul><h3 id="4-link和-import的区别"><a href="#4-link和-import的区别" class="headerlink" title="4. link和@import的区别"></a>4. link和@import的区别</h3><ul><li>link是html的方式,import是css的方式</li><li>link在页面加载时和页面<strong>并行</strong>加载,不会阻塞页面;import在页面加载完成在进行<strong>串行</strong>加载,会阻塞页面,不利于SEO优化,也会出现<strong>FOUC(Flash Of Unstyled Content)情况</strong>(文档样式短暂失效)</li><li>浏览器对link样式的支持早于import,可以使用import对老式浏览器隐藏样式</li><li>link可以通过rel指定候选样式</li><li>import必须在样式之前引入,可以在css中引入其他文件</li><li>link由于@import</li></ul><h3 id="5-FOUC是什么-如何避免"><a href="#5-FOUC是什么-如何避免" class="headerlink" title="5. FOUC是什么?如何避免"></a>5. FOUC是什么?如何避免</h3><ul><li><strong>FOUC:flash of Unstyled Content</strong>-&gt;用户定义的文档样式加载之前浏览器使用默认样式显示,用户样式渲染加载完成之后重新显示样式,<strong>造成页面闪烁</strong></li><li>解决方法:将样式表放在head标签中和页面一起加载</li></ul><h3 id="6-什么是BFC-如何创建BFC-BFC的作用"><a href="#6-什么是BFC-如何创建BFC-BFC的作用" class="headerlink" title="6.什么是BFC,如何创建BFC,BFC的作用"></a>6.什么是BFC,如何创建BFC,BFC的作用</h3><ul><li>BFC:块级格式化上下文(block format coontent),是页面中一块独立渲染的区域</li><li>创建规则<ul><li>根元素</li><li>float</li><li>position为absolute或者fixed</li><li>display为inlion-block,block,table-cell,table-caption,flex,inline-flex</li><li>overflow不为visible(auto,hidden,scroll)</li></ul></li><li>布局规则<ul><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于<strong>同一个BFC</strong>的两个相邻Box的margin会发生重叠(解决方案:给其中一个包裹一成div并将div设置成BFC)</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如 此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算</li></ul></li><li>作用:<ul><li>设置自适应的两栏布局</li><li><strong>清除内部浮动</strong>(将父元素设置成BFC)</li><li><strong>防止垂直方向margin的重叠</strong></li></ul></li></ul><h3 id="7-position-float-display关系"><a href="#7-position-float-display关系" class="headerlink" title="7. position.float,display关系"></a>7. position.float,display关系</h3><ul><li>display为none,positionhe float都不起作用</li><li>否则，如果<code>position</code>取值为<code>absolute</code>或者<code>fixed</code>，框就是绝对定位的，<code>float</code>的计算值为<code>none</code>，<code>display</code>根据下面的表格进行调整。</li><li>否则，如果<code>float</code>不是<code>none</code>，框是浮动的，<code>display</code>根据下表进行调整</li><li>否则，如果元素是根元素，<code>display</code>根据下表进行调整</li><li>其他情况下<code>display</code>的值为指定值</li><li>总结起来：<strong>绝对定位、浮动、根元素都需要调整<code>display</code></strong></li></ul><h3 id="8-清除浮动"><a href="#8-清除浮动" class="headerlink" title="8.清除浮动"></a>8.清除浮动</h3><ul><li>在父元素添加height</li><li>在结尾处添加div元素并设置clear:both</li><li><strong>给父元素的div定义伪类:after和zoom</strong></li><li>给父元素div设置overflow:hidden(BFC清除内部浮动)</li><li>设置父级div浮动,同时要设置宽度</li><li>结尾处添加br标签并clear:both</li><li>建议使用第三种方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.clear-fix:after&#123;</span><br><span class="line">clear:both;</span><br><span class="line">content:&#39;&#39;;</span><br><span class="line">display:block;</span><br><span class="line">width:0;</span><br><span class="line">height:0;</span><br><span class="line">visibility:hidden</span><br><span class="line">&#125;</span><br><span class="line">.clear-fix&#123;</span><br><span class="line">zoom:1&#x2F;&#x2F;解决ie的浮动问题</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-为什么要初始化css样式"><a href="#8-为什么要初始化css样式" class="headerlink" title="8. 为什么要初始化css样式"></a>8. 为什么要初始化css样式</h3><ul><li>浏览器的兼容性问题:不同的浏览器对样式的默认值是不同的,如果没有初始化或造成浏览器之间的页面显示存在差异</li><li>初始化会对SEO产生影响,但这也是不可避免</li></ul><h3 id="9-css3有哪些新的特性"><a href="#9-css3有哪些新的特性" class="headerlink" title="9. css3有哪些新的特性"></a>9. css3有哪些新的特性</h3><ul><li><p>新增的特性</p><ul><li>新增了各种css选择器</li><li>border-radius</li><li>多列布局</li><li>阴影和反射</li><li>文字特性text-shadow</li><li>旋转</li><li>线性渐变</li></ul></li><li><p>新增的伪类:p:first-of</p></li></ul><h1 id="网络和浏览器"><a href="#网络和浏览器" class="headerlink" title="网络和浏览器"></a>网络和浏览器</h1><h3 id="1-http状态码"><a href="#1-http状态码" class="headerlink" title="1. http状态码:"></a>1. http状态码:</h3><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-3/image-20200610111505236.png" alt="image-20200610111505236" style="zoom:80%;"><h3 id="2-安全-XSS-CSRF"><a href="#2-安全-XSS-CSRF" class="headerlink" title="2. 安全(XSS,CSRF)"></a>2. 安全(XSS,CSRF)</h3><ul><li>XSS:<code>XSS</code> 通过修改 <code>HTML</code>节点或者执行 <code>JS</code>代码来攻击网站。<ul><li>分为持久性和非持久性<ul><li>持久性:就是恶意 的代码被服务器写入数据中</li><li>非持久性: <strong>修改url参数</strong>的方式加入攻击代码,有道用户访问连接从而进行攻击</li></ul></li><li>预防:最普遍的做法是<strong>转义输入输出的内容</strong>，对于引号，尖括号，斜杠进行转义</li></ul></li><li>CSRF:跨站请求伪造（英语：<code>Cross-site request forgery</code>），也被称为 <code>one-click attack</code>或者 <code>session riding</code>，通常缩写为 <code>CSRF</code> 或者 <code>XSRF</code>， 是一种挟制用户在当前已登录的<code>Web</code>应用程序上执行非本意的操作的攻击方法,<ul><li><code>CSRF</code> 就是利用用户的登录态发起恶意请求 </li><li>预防:<ul><li><code>Get</code> 请求不对数据进行修改</li><li>不让第三方网站访问到用户 <code>Cookie</code></li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 <code>token</code></li></ul></li></ul></li><li>密码安全<ul><li><strong>加盐</strong>:通常需要对密码加盐，然后进行几次不同加密算法的加密</li></ul></li></ul><h3 id="3-跨域解决方案"><a href="#3-跨域解决方案" class="headerlink" title="3. 跨域解决方案"></a>3. 跨域解决方案</h3><h4 id="3-1-跨域引起的原因"><a href="#3-1-跨域引起的原因" class="headerlink" title="3.1 跨域引起的原因"></a>3.1 跨域引起的原因</h4><ul><li>跨域问题:浏览器处于安全考虑,有同源策略,如果协议,端口或者域名有一个不同,发送ajax请求就会失败    </li></ul><h4 id="3-1-解决"><a href="#3-1-解决" class="headerlink" title="3.1 解决"></a>3.1 解决</h4><ul><li>Jsonp的原理:利用script标签没有跨域限制的漏洞.通过动态的创建script标签指向一个需要发送的地址并提供一个回调函数来接收数据<ul><li>jsonp简单兼容性可以,但是只限于get请求</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">script src&#x3D;&quot;http:&#x2F;&#x2F;domain&#x2F;api?param1&#x3D;a&amp;param2&#x3D;b&amp;callback&#x3D;jsonp&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function jsonp(data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>CORS:跨域资源共享,需要前后端同时支持<ul><li>实现主要在后端,只要后端开启Access-Control-Allow-Origin,表示哪些域名可以进行访问,设置通配符宝石所有终端都可以访问</li></ul></li><li>服务器端解决:同源策略是浏览器给ajax限制的,服务器端没有限制,可以让服务器端去获取信息在响应给自己的客户端(引入express框架中的request第三方模块)</li><li>nginx代理服务器:在代理服务器中拦截请求转发给实际的请求网站</li><li>possMessage跨域:允许来自不同源的的脚本采用异步方式进行有限通信,可以实现跨文本,多窗口,跨域消息传递,使用场景(iframe通信,同浏览器多窗口跨域访问)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 发送消息端</span><br><span class="line">window.parent.postMessage(&#39;message&#39;, &#39;http:&#x2F;&#x2F;test.com&#39;);</span><br><span class="line">&#x2F;&#x2F; 接收消息端</span><br><span class="line">var mc &#x3D; new MessageChannel();</span><br><span class="line">mc.addEventListener(&#39;message&#39;, (event) &#x3D;&gt; &#123;</span><br><span class="line">    var origin &#x3D; event.origin || event.originalEvent.origin;</span><br><span class="line">    if (origin &#x3D;&#x3D;&#x3D; &#39;http:&#x2F;&#x2F;test.com&#39;) &#123;</span><br><span class="line">        console.log(&#39;验证通过&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>websocket通信:是一种双向通信协议,在建立连接之后客户端和服务器端都能主动向对方发送或者接收数据而不受同源策略的限制</li></ul><h4 id="3-1-为什么使用多个域名存储网站资源更有效"><a href="#3-1-为什么使用多个域名存储网站资源更有效" class="headerlink" title="3.1 为什么使用多个域名存储网站资源更有效"></a>3.1 为什么使用多个域名存储网站资源更有效</h4><ul><li>有利于CDN缓存</li><li>突破浏览器的并发限制</li><li>节约cookie宽带</li><li>减少主域名的连接数,加快页面的响应速度</li><li>防止不必要的安全问题</li></ul><h3 id="4-浏览器的渲染原理"><a href="#4-浏览器的渲染原理" class="headerlink" title="4. 浏览器的渲染原理"></a>4. 浏览器的渲染原理</h3><h4 id="4-1-浏览器的渲染过程"><a href="#4-1-浏览器的渲染过程" class="headerlink" title="4.1 浏览器的渲染过程"></a>4.1 浏览器的渲染过程</h4><ul><li><strong>浏览器接收到 HTML 文件并转换为 DOM 树</strong></li><li><strong>将 CSS 文件转换为 CSSOM 树</strong></li><li><strong>生成渲染树</strong>:我们生成 <code>DOM</code> 树和 <code>CSSOM</code> 树以后，就需要将这两棵树组合为渲染树,当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流），然后调用 <code>GPU</code>绘制，合成图层，显示在屏幕上。</li></ul><h4 id="4-2-dom操作慢的原因"><a href="#4-2-dom操作慢的原因" class="headerlink" title="4.2 dom操作慢的原因:"></a>4.2 dom操作慢的原因:</h4><ul><li>因为 <code>DOM</code>是属于<strong>渲染引擎</strong>中的东西，而 <code>JS</code> 又是 <strong><code>JS</code> 引擎</strong>中的东西。当我们通过 <code>JS</code> 操作 <code>DOM</code> 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。操作 <code>DOM</code> 次数一多，也就等同于一直在进行线程之间的通信，并且操作 <code>DOM</code> 可能还会带来重绘回流的情况，所以也就导致了性能上的问题。</li></ul><h4 id="4-3-插入几万个-DOM，如何实现页面不卡顿？"><a href="#4-3-插入几万个-DOM，如何实现页面不卡顿？" class="headerlink" title="4.3 插入几万个 DOM，如何实现页面不卡顿？"></a>4.3 插入几万个 DOM，如何实现页面不卡顿？</h4><ul><li><p>分批次部分渲染 <code>DOM</code></p></li><li><p>requestAnimationFrame<code>的方式去循环的插入</code>DOM</p></li><li><p>虚拟滚动（<code>virtualized scroller</code>）原理:只渲染可视区域内的内容，非可见区域的那就完全不渲染了，当用户在滚动的时候就实时去替换渲染的内容</p></li></ul><h4 id="4-4-重绘和回流"><a href="#4-4-重绘和回流" class="headerlink" title="4.4 重绘和回流"></a>4.4 重绘和回流</h4><ul><li>重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。</li><li><strong>重绘</strong>是当节点需要<strong>更改外观而不会影响布局的</strong>，比如改变 <code>color</code> 就叫称为重绘</li><li><strong>回流</strong>是<strong>布局或者几何属性需要改变</strong>就称为回流。</li><li>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</li><li>出现的场景,并且会导致性能问题<ul><li>改变 <code>window</code> 大小</li><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul></li></ul><h4 id="4-5-减少重绘和回流的方案"><a href="#4-5-减少重绘和回流的方案" class="headerlink" title="4.5 减少重绘和回流的方案:"></a>4.5 减少重绘和回流的方案:</h4><ul><li>用 <code>transform</code> 替代 <code>top</code></li><li>使用 <code>visibility</code> 替换<code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）</li><li>不要把节点的属性值放在一个循环里当成循环里的变量</li><li>要使用 <code>table</code> 布局，可能很小的一个小改动会造成整个 <code>table</code> 的重新布局</li><li>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 <code>requestAnimationFrame</code></li><li><code>CSS</code> 选择符从右往左匹配查找，避免节点层级过多</li><li>将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 <code>video</code> 标签来说，浏览器会自动将该节点变为图层。<ul><li>设置为图层的方式有:<ul><li>will-change,</li><li><code>video</code>、<code>iframe</code> 标签</li></ul></li></ul></li><li><strong>静态资源尽量使用CDN加载</strong>(浏览器对单个域明有并发请求上线)</li><li><strong>使用webpack优化项目</strong><ul><li>对于webpack4,打开项目使用production模式,会自动开启代码压缩</li><li>使用ES6模块来开启tree shaking,这个技术可以移除没有使用到的代码</li><li>优化图片,使用base64的方式写入文件</li><li>按照路由拆分代码,路由懒加载的方式</li></ul></li></ul><h3 id="5-存储-session-cookie-localstorage-sessionStorage"><a href="#5-存储-session-cookie-localstorage-sessionStorage" class="headerlink" title="5 存储(session.cookie,localstorage,sessionStorage)"></a>5 存储(session.cookie,localstorage,sessionStorage)</h3><h4 id="5-1有几种方式可以实现存储功能，分别有什么优缺点？"><a href="#5-1有几种方式可以实现存储功能，分别有什么优缺点？" class="headerlink" title="5.1有几种方式可以实现存储功能，分别有什么优缺点？"></a>5.1有几种方式可以实现存储功能，分别有什么优缺点？</h4><ul><li><code>cookie</code>是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</li><li>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</li><li><code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</li><li>存储大小：<ul><li><code>cookie</code>数据大小不能超过4k</li><li><code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</li></ul></li><li>有期时间：<ul><li><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li><code>sessionStorage</code> 数据在当前浏览器窗口关闭后自动删除</li><li><code>cookie</code> 设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li></ul><h4 id="5-2-session和cookie"><a href="#5-2-session和cookie" class="headerlink" title="5.2 session和cookie"></a>5.2 session和cookie</h4><ul><li><code>session</code>： 将 <code>user agent</code>和 <code>server</code> 之间一对一的交互，抽象为“会话”，进而衍生出“会话状态”，也就是 <code>session</code> 的概念</li><li><code>cookie</code>：它是一个实际存在的东西，<code>http</code> 协议中定义在 <code>header</code> 中的字段，可以认为是 <code>session</code> 的一种后端无状态实现</li><li>session<code>的常见实现要借助</code>cookie<code>来发送</code>sessionID</li></ul><h4 id="5-3-web开发中会话跟踪中的方式有哪些"><a href="#5-3-web开发中会话跟踪中的方式有哪些" class="headerlink" title="5.3 web开发中会话跟踪中的方式有哪些"></a>5.3 web开发中会话跟踪中的方式有哪些</h4><ul><li>session</li><li>cookie</li><li>url重写</li><li>隐藏input</li><li>ip地址</li></ul><h3 id="6-浏览器中的-Event-Loop事件循环"><a href="#6-浏览器中的-Event-Loop事件循环" class="headerlink" title="6. 浏览器中的 Event Loop事件循环"></a>6. 浏览器中的 Event Loop事件循环</h3><h4 id="6-1-什么是执行栈"><a href="#6-1-什么是执行栈" class="headerlink" title="6.1 什么是执行栈"></a>6.1 什么是执行栈</h4><pre><code>- 执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则</code></pre><h4 id="6-2-异步代码执行顺序？解释一下什么是-Event-Loop-？"><a href="#6-2-异步代码执行顺序？解释一下什么是-Event-Loop-？" class="headerlink" title="6.2 异步代码执行顺序？解释一下什么是 Event Loop ？"></a>6.2 异步代码执行顺序？解释一下什么是 <code>Event Loop</code> ？</h4><ul><li><p><code>JS</code> 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 <code>Task</code>（有多种 <code>task</code>） 队列中。一旦执行栈为空，<code>Event</code> <code>Loop</code> 就会从 <code>Task</code> 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 <code>JS</code> 中的异步还是同步行为</p></li><li><p>补充:</p><ul><li>不同的任务源会被分配到不同的 <code>Task</code>队列中，任务源可以分为 微任务（<code>microtask</code>） 和 宏任务（<code>macrotask</code>）。在 ES6 规范中，<code>microtask</code> 称为 jobs，<code>macrotask</code> 称为 <code>task</code>。</li><li><strong>微任务包括</strong> <code>process.nextTick</code> ，<code>promise</code> ，<code>Object.observe</code>，<code>MutationObserver</code></li><li><strong>宏任务包括</strong> <code>script</code> ， <code>setTimeout</code> ，<code>setInterval</code>，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI renderin</code></li><li>宏任务中包括了 <code>script</code> ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务</li></ul></li><li><p><strong>所以正确的一次 Event loop 顺序是这样的</strong></p><ul><li>执行同步代码,属于宏任务</li><li>执行栈为空,判断是否有微任务</li><li>执行完所有的微任务</li><li>必要的话渲染ui</li><li>执行下一轮的evenloop,执行宏任务中的异步代码</li></ul></li></ul><h3 id="7-性能优化"><a href="#7-性能优化" class="headerlink" title="7 性能优化"></a>7 性能优化</h3><ul><li>图片优化</li><li>图片加载优化</li><li>DNS预解析</li><li>节流</li><li>防抖</li><li>预加载</li><li>预渲染</li><li>懒执行</li><li>懒加载</li><li>CDN</li></ul><h3 id="8-浏览器的缓存和-什么是-Service-Worker"><a href="#8-浏览器的缓存和-什么是-Service-Worker" class="headerlink" title="8.浏览器的缓存和 什么是 Service Worker"></a>8.浏览器的缓存和 什么是 <code>Service Worker</code></h3><h4 id="8-1-什么是-Service-Worker"><a href="#8-1-什么是-Service-Worker" class="headerlink" title="8.1  什么是 Service Worker"></a>8.1  什么是 <code>Service Worker</code></h4><ul><li><code>Service Worker</code> 是运行在浏览器背后的独立线程，一般可以用来实现<strong>缓存功能</strong>。使用 <code>Service Worker</code>的话，传输协议必须为 <code>HTTPS</code>。因为 <code>Service Worker</code> 中涉及到请求拦截，所以必须使用 <code>HTTPS</code> 协议来保障安全</li><li><code>Service Worker</code> 实现缓存功能一般分为三个步骤：首先需要先注册 <code>Service Worker</code>，然后监听到 <code>install</code> 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过<strong>拦截请求的</strong>方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</li></ul><h4 id="8-2-浏览器的缓存"><a href="#8-2-浏览器的缓存" class="headerlink" title="8.2 浏览器的缓存"></a>8.2 浏览器的缓存</h4><ul><li><p>作用:浏览器的缓存对优化性能是很重要的点,良好的缓存策略可以降低资源的重复加载提高网站的加载速度</p></li><li><p>浏览器缓存通常分为两种</p><ul><li>强缓存:可以通过两种响应头实现expires/cache-control,强缓存表示在缓存期间不用请求,status code为200</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed, 22 Oct 2018 08:41:00 GMT</span><br><span class="line">Cache-control: max-age&#x3D;30</span><br></pre></td></tr></table></figure><ul><li>协商缓存:如果缓存过期了可采用协商缓存,协商缓存需要请求,有效会返回304状态,实现方式有两种<ul><li>Last-Modified</li><li>If-Modified-Since</li></ul></li></ul></li></ul><h3 id="9-三次握手和四次挥手"><a href="#9-三次握手和四次挥手" class="headerlink" title="9. 三次握手和四次挥手"></a>9. 三次握手和四次挥手</h3><p>TCP提供了一种<strong>可靠</strong>、<strong>面向连接</strong>、<strong>字节流</strong>、<strong>传输层的服务</strong>，采用三次握手建立一个连接。采用4次挥手来关闭一个连接。</p><p>TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。</p><p>TCP可以看成是一种字节流，它会处理IP层或以下的层的丢包、重复以及错误问题。在连接的建立过程中，双方需要交换一些连接的参数。这些参数可以放在TCP头部。</p><h4 id="9-1-三次握手"><a href="#9-1-三次握手" class="headerlink" title="9.1 三次握手"></a>9.1 三次握手</h4><ul><li>客户端发送一个SYN段，并指明客户端的初始序列号，即ISN(c).</li><li>服务端发送自己的SYN段作为应答，同样指明自己的ISN(s)。为了确认客户端的SYN，将ISN(c)+1作为ACK数值。这样，每发送一个SYN，序列号就会加1. 如果有丢失的情况，则会重传。</li><li>为了确认服务器端的SYN，客户端将ISN(s)+1作为返回的ACK数值。</li></ul><h4 id="9-2-四次挥手"><a href="#9-2-四次挥手" class="headerlink" title="9.2 四次挥手"></a>9.2 四次挥手</h4><ul><li>客户端 – FIN –&gt; 服务端，关闭客户端到服务器端的数据传送 FIN—WAIT</li><li>服务端 – ACK –&gt; 客户端，服务器端将接受到的序列号加1作为返回值发送给客户作为响应 CLOSE-WAIT</li><li>服务端 – ACK,FIN –&gt; 客户端， 关闭服务器端到客户端的连接LAST-ACK</li><li>客户端 – ACK –&gt; 服务端，CLOSED</li></ul><h3 id="9-3-从输入URL到浏览器页面展示的步骤"><a href="#9-3-从输入URL到浏览器页面展示的步骤" class="headerlink" title="9.3 从输入URL到浏览器页面展示的步骤"></a>9.3 从输入URL到浏览器页面展示的步骤</h3><ul><li><strong>浏览器接收到url交给DNS进行域名为ip地址</strong>(浏览器缓存,本地缓存,hosts文件,路由器缓存,ISD DNS缓存,DNS域名递归查询(会存在负载均衡ip地址不是同一个)),</li><li>打开socket与目标的ip地址端口建立tcp连接(通过三次握手)</li><li>连接建立成功发送http请求,服务器接收到请求并进行解析,<strong>将报文头通过tcp链接发送回浏览器</strong></li><li>浏览器接收到http响应,浏览器根据根据响应的状态码进行处理</li><li>将下载完的内容转交给Renderer进程管理。Renderer进程开始解析css rule tree和dom tree，这两个过程是并行的，所以一般我会把link标签放在页面顶部。解析绘制过程中，当浏览器遇到link标签或者script、img等标签，浏览器会去下载这些内容，遇到时候缓存的使用缓存，不适用缓存的重新下载资源。</li><li><strong>解析完成进行页面渲染</strong>(资源缓存,资源解码,解析HTML文档,构建dom树),CSSOM树,js解码)<ul><li>DOM 树与 CSSOM 树合并后形成渲染树。</li><li>渲染树只包含渲染网页所需的节点。</li><li>布局计算每个对象的精确位置和大小。</li><li>最后一步是绘制，使用最终渲染树将像素渲染到屏幕上。</li></ul></li><li>绘制结束后，关闭TCP连接，过程有四次挥手</li></ul><h3 id="9-4-浏览器内核的理解-以及主流浏览器的内核"><a href="#9-4-浏览器内核的理解-以及主流浏览器的内核" class="headerlink" title="9.4 浏览器内核的理解,以及主流浏览器的内核"></a>9.4 浏览器内核的理解,以及主流浏览器的内核</h3><h4 id="9-4-1-浏览器内核的理解"><a href="#9-4-1-浏览器内核的理解" class="headerlink" title="9.4.1 浏览器内核的理解"></a>9.4.1 浏览器内核的理解</h4><ul><li>内核主要分为两部分:渲染引擎和js引擎</li><li>渲染引擎负责取得网页的内容和计算网页的显示方式,然后输出到显示器或者打印机.浏览器内核的不同对网页的解析方式会有所不同</li><li>.js引擎主要是解析和执行javascript代码实现页面的动态效果</li></ul><h4 id="9-4-1-主流浏览器的内核"><a href="#9-4-1-主流浏览器的内核" class="headerlink" title="9.4.1 主流浏览器的内核"></a>9.4.1 主流浏览器的内核</h4><ul><li>IE:  trident内核</li><li>firefox:gecko内核</li><li>safari:webkit内核</li><li>opera:起初presto-&gt;谷歌内核blink</li><li>谷歌:blink</li></ul><h3 id="10-http-https"><a href="#10-http-https" class="headerlink" title="10 http/https"></a>10 http/https</h3><ul><li><p><strong>https: 较为安全的网络传输协议</strong></p><ul><li>证书(公钥)</li><li><code>SSL</code> 加密</li><li>端口 <code>443</code></li></ul><p><strong>TCP:</strong></p><ul><li>三次握手</li><li>四次挥手</li><li>滑动窗口: 流量控制</li><li>拥塞处理<ul><li>慢开始</li><li>拥塞避免</li><li>快速重传</li><li>快速恢复</li></ul></li></ul><p><strong>缓存策略: 可分为 强缓存 和 协商缓存</strong></p><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-3/image-20200610164932088.png" alt="image-20200610164932088" style="zoom:80%;">#  Vue相关面试</li></ul><h3 id="1-mvvm原理理解"><a href="#1-mvvm原理理解" class="headerlink" title="1. mvvm原理理解"></a>1. mvvm原理理解</h3><ul><li><p>mvvm的理解</p><ul><li>在<code>MVVM</code>架构下，<code>View</code>和 <code>Model</code> 之间并没有直接的联系，而是通过<code>ViewModel</code>进行交互，<code>Model</code>和 <code>ViewModel</code> 之间的交互是双向的， 因此<code>View</code> 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到<code>View</code> 上。</li><li><code>ViewModel</code> 通过双向数据绑定把 <code>View</code> 层和 <code>Model</code>层连接了起来，而<code>View</code>和 <code>Model</code> 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 <code>MVVM</code> 来统一管理</li></ul></li><li><p>组成:</p><ul><li><code>View</code>：界面</li><li><code>Model</code>：数据模型</li><li><code>ViewModel</code>：作为桥梁负责沟通 <code>View</code> 和 <code>Model</code></li></ul></li><li><img src="/2020/06/10/%E9%9D%A2%E8%AF%95-3/image-20200610113216000.png" alt="image-20200610113216000" style="zoom:50%;"></li><li><p><code>UI</code> 是通过<strong>数据驱动</strong>的，数据一旦改变就会相应的刷新对应的 <code>UI</code>，<code>UI</code> 如果改变，也会改变对应的数据。</p></li><li><p>在 <code>MVVM</code> 中，最核心的也就是<strong>数据双向绑定</strong>，例如 <code>Angluar</code> 的脏数据检测，<code>Vue</code> 中的数据劫持。</p><ul><li><code>Vue</code> 内部使用了 <code>Object.defineProperty()</code> 来实现双向绑定，通过这个函数可以监听到 <code>set</code> 和 <code>get</code> 的事件。</li></ul></li><li><p>vue实现的整个流程</p><ul><li>第一步：解析模板成 render 函数</li><li>第二步：响应式开始监听<ul><li><code>Object.defineProperty</code></li><li>将 <code>data</code> 的属性代理到 <code>vm</code>vue实例上</li></ul></li><li>第三步：首次渲染，显示页面，且绑定依赖<ul><li>初次渲染，执行 <code>updateComponent</code>，执行 <code>vm._render()</code></li><li>执行 <code>render</code> 函数，会访问到 <code>vm.list vm.title</code>(data属性)</li><li>会被响应式的 <code>get</code> 方法监听到</li><li>执行 <code>updateComponent</code> ，会走到 <code>vdom</code> 的 <code>patch</code> 方法</li><li><code>patch</code> 将 <code>vnode</code>渲染成 <code>DOM</code> ，初次渲染完成</li></ul></li><li>第四步：<code>data</code> 属性变化，触发 <code>rerender</code></li></ul></li></ul><h4 id="虚拟dom提高性能"><a href="#虚拟dom提高性能" class="headerlink" title="虚拟dom提高性能"></a>虚拟dom提高性能</h4><ul><li>虚拟<code>dom</code>相当于在<code>js</code>和真实<code>dom</code>中间加了一个缓存，利用<code>dom diff</code>算法避免了没有必要的<code>dom</code>操作，从而提高性能</li><li>实现步骤<ul><li>用 <code>JavaScript</code> 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 <code>DOM</code> 树，插到文档当中</li><li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li><li>把2所记录的差异应用到步骤1所构建的真正的<code>DOM</code>树上，进行局部视图更新</li></ul></li></ul><h3 id="2-vue生命周期"><a href="#2-vue生命周期" class="headerlink" title="2. vue生命周期"></a>2. vue生命周期</h3><h4 id="周期的理解"><a href="#周期的理解" class="headerlink" title="周期的理解"></a>周期的理解</h4><ul><li>答：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后<ul><li>创建前/后： 在<code>beforeCreate</code>阶段，<code>vue</code>实例的挂载元素<code>el</code>和数据对象<code>data</code>都为<code>undefined</code>，还未初始化。在<code>created</code>阶段，<code>vue</code>实例的数据对象<code>data</code>有了，el还没有</li><li>载入前/后：在<code>beforeMount</code>阶段，<code>vue</code>实例的<code>$el</code>和<code>data</code>都初始化了，但还是挂载之前为虚拟的<code>dom</code>节点，<code>data.message</code>还未替换。在<code>mounted</code>阶段，<code>vue</code>实例挂载完成，<code>data.message</code>成功渲染。</li><li>更新前/后：当<code>data</code>变化时，会触发<code>beforeUpdate</code>和<code>updated</code>方法</li><li>销毁前/后：在执行<code>destroy</code>方法后，对<code>data</code>的改变不会再触发周期函数，说明此时<code>vue</code>实例已经解除了事件监听以及和<code>dom</code>的绑定，但是<code>dom</code>结构依然存在</li></ul></li></ul><h4 id="什么是vue声明周期"><a href="#什么是vue声明周期" class="headerlink" title="什么是vue声明周期"></a>什么是vue声明周期</h4><ul><li>Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</li></ul><h4 id="vue声明周期的作用"><a href="#vue声明周期的作用" class="headerlink" title="vue声明周期的作用"></a>vue声明周期的作用</h4><ul><li>声明周期中有钩子函数可以控制整个vue实例不同时期的逻辑操作</li></ul><h4 id="vue生命周期总共有几个阶段？"><a href="#vue生命周期总共有几个阶段？" class="headerlink" title="vue生命周期总共有几个阶段？"></a><strong>vue生命周期总共有几个阶段？</strong></h4><ul><li>创建,加载,更新,销毁</li></ul><h4 id="首次页面加载触发钩子函数"><a href="#首次页面加载触发钩子函数" class="headerlink" title="首次页面加载触发钩子函数"></a>首次页面加载触发钩子函数</h4><p>会触发下面这几个<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code> 。</p><h4 id="dom渲染哪个周期完成"><a href="#dom渲染哪个周期完成" class="headerlink" title="dom渲染哪个周期完成"></a>dom渲染哪个周期完成</h4><p><code>DOM</code> 渲染在 <code>mounted</code> 中就已经完成了</p><h4 id="Vue-Compiler实现"><a href="#Vue-Compiler实现" class="headerlink" title="Vue Compiler实现"></a>Vue Compiler实现</h4><ul><li>模板解析这种事，本质是将数据转化为一段 <code>html</code> ，最开始出现在后端，经过各种处理吐给前端。随着各种 <code>mv*</code> 的兴起，模板解析交由前端处理。</li><li>总的来说，<code>Vue complier</code> 是将 <code>template</code> 转化成一个 <code>render</code> 字符串。</li></ul><h3 id="3-Vue实现数据双向绑定的原理：Object-defineProperty"><a href="#3-Vue实现数据双向绑定的原理：Object-defineProperty" class="headerlink" title="3. Vue实现数据双向绑定的原理：Object.defineProperty()"></a>3. Vue实现数据双向绑定的原理：Object.defineProperty()</h3><ul><li><p><code>vue</code>实现数据双向绑定主要是：采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 <code>Javascript</code> 对象传给 Vue 实例来作为它的 <code>data</code> 选项时，Vue 将遍历它的属性，用 <code>Object.defineProperty()</code> 将它们转为 <code>getter/setter</code>。用户看不到 <code>getter/setter</code>，但是在内部它们让 <code>Vue</code>追踪依赖，在属性被访问和修改时通知变化。</p></li><li><p>vue的数据双向绑定 将<code>MVVM</code>作为数据绑定的入口，整合<code>Observer</code>，<code>Compile</code>和<code>Watcher</code>三者，通过<code>Observer</code>来监听自己的<code>model</code>的数据变化，通过<code>Compile</code>来解析编译模板指令（<code>vue</code>中是用来解析 <code>模板字符串的</code>），最终利用<code>watcher</code>搭起<code>observer</code>和<code>Compile</code>之间的通信桥梁，达到数据变化 —&gt;视图更新；视图交互变化（<code>input</code>）—&gt;数据<code>model</code>变更双向绑定效果</p></li><li><p><strong>还可以通过proxy代理实现双向绑定</strong></p></li></ul><h4 id="3-1-双向绑定的实现defineProperty"><a href="#3-1-双向绑定的实现defineProperty" class="headerlink" title="3.1 双向绑定的实现defineProperty"></a>3.1 双向绑定的实现defineProperty</h4><h4 id="3-2-proxy实现-ES6中新增的方法"><a href="#3-2-proxy实现-ES6中新增的方法" class="headerlink" title="3.2 proxy实现(ES6中新增的方法)"></a>3.2 proxy实现(ES6中新增的方法)</h4><h3 id="4-前端路由的原理"><a href="#4-前端路由的原理" class="headerlink" title="4. 前端路由的原理"></a>4. 前端路由的原理</h3><ul><li><p>本质就是监听 <code>URL</code> 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新页面。目前前端使用的路由就只有两种实现方式,<strong>都不会引起页面的刷新</strong></p><ul><li><p><code>Hash</code> 模式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.test.com&#x2F;#&#x2F; 就是 Hash URL，当 # 后面的哈希值发生变化时，可以通过 hashchange 事件来监听到 URL 的变化，从而进行跳转页面，并且无论哈希值如何变化，服务端接收到的 URL 请求永远是 www.test.com</span><br></pre></td></tr></table></figure></li><li><p><code>History</code> 模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">History 模式是 HTML5 新推出的功能，主要使用 history.pushState 和 history.replaceState 改变 URL</span><br><span class="line">当用户做出浏览器动作时，比如点击后退按钮时会触发 popState 事件</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>两种模式对比</strong></p><ul><li><code>Hash</code>模式只可以更改 <code>#</code> 后面的内容，<code>History</code> 模式可以通过 <code>API</code> 设置任意的同源 <code>URL</code></li><li><code>History</code> 模式可以通过 <code>API</code> 添加任意类型的数据到历史记录中，<code>Hash</code> 模式只能更改哈希值，也就是字符串</li><li><code>Hash</code> 模式无需后端配置，并且兼容性好。<code>History</code> 模式在用户手动输入地址或者刷新页面的时候会发起 <code>URL</code> 请求，后端需要配置 <code>index.html</code> 页面用于匹配不到静态资源的时候</li></ul></li></ul><h3 id="5-bable原理"><a href="#5-bable原理" class="headerlink" title="5. bable原理"></a>5. bable原理</h3><ul><li><code>ES6、7</code>代码输入 -&gt; <code>babylon</code>进行解析 -&gt; 得到<code>AST</code>（抽象语法树）-&gt; <code>plugin</code>用b<code>abel-traverse</code>对<code>AST</code>树进行遍历转译 -&gt;得到新的<code>AST</code>树-&gt;用<code>babel-generator</code>通过<code>AST</code>树生成<code>ES5</code>代码</li></ul><h1 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h1><h3 id="1-优化打包速度"><a href="#1-优化打包速度" class="headerlink" title="1.优化打包速度"></a>1.优化打包速度</h3><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h2>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
前端面试题库
    
    </summary>
    
    
      <category term="面试" scheme="https://sparkparis.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="随笔" scheme="https://sparkparis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer</title>
    <link href="https://sparkparis.github.io/2020/06/06/%E5%89%91%E6%8C%87offer/"/>
    <id>https://sparkparis.github.io/2020/06/06/%E5%89%91%E6%8C%87offer/</id>
    <published>2020-06-06T10:13:06.000Z</published>
    <updated>2020-06-29T06:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p> offer刷题分类汇总</p><a id="more"></a><h1 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h1><h2 id="位运算的总结"><a href="#位运算的总结" class="headerlink" title="位运算的总结"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="noopener">位运算的总结</a></h2><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200607190632492.png" alt="image-20200607190632492"></p><ul><li><p><strong>非（NOT）操作</strong>。NOT <code>a</code> 结果为 a 的反转（即<strong>反码</strong>）</p></li><li><p>&lt;&lt; (左移):类似于进位,抛弃高位向左,低位补0</p></li><li><p>&gt;&gt; (有符号右移)</p></li><li><p>&gt;&gt;&gt; (无符号右移)</p></li></ul><p><strong>注意:</strong></p><ul><li>左移相当于在乘以2倍,右移====除以2</li></ul><h2 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h2><p><strong>题目</strong>:</p><ul><li>写一个函数，求两个整数之和，要求在函数体内不得使用<code>+、-、*、/</code>四则运算符号。</li></ul><p><strong>思路:</strong></p><ul><li><strong>将加法拆解成三步：</strong><ul><li>1.不进位相加</li><li>2.计算进位</li><li>3.进位与不进位结果进行相加</li><li>重复这三步，直到进位值为0</li></ul></li></ul><p><strong>使用位运算来计算二进制：</strong></p><ul><li>二进制异或操作和不进位相加得到的结果相同<code>(1^1=0 0^1=1 0^0=0)</code></li><li>二进制与操作后左移和进位结果相同<code>（1&amp;1=1 1&amp;0=0 0&amp;0=0）</code></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>，用于按顺序存储元素的集合。但是元素可以随机存取，因为数组中的每个元素都可以通过数组索引来识别。插入和删除时要移动后续元素，还要考虑扩容问题，插入慢。</p><h2 id="1-双指针"><a href="#1-双指针" class="headerlink" title="1 双指针"></a>1 双指针</h2><ul><li>上面链表中提到的一类题目，主要是利用两个或多个不同位置的指针，通过<strong>速度和方向的变换</strong>解决问题。注意这种技巧经常在<strong>排序数组</strong>中使用。</li></ul><h3 id="1-1-和为S的两个数字"><a href="#1-1-和为S的两个数字" class="headerlink" title="1.1 和为S的两个数字"></a>1.1 和为S的两个数字</h3><p><strong>题目</strong></p><ul><li>输入一个递增排序的数组和一个数字<code>S</code>，在数组中查找两个数，使得他们的和正好是<code>S</code>，如果有多对数字的和等于<code>S</code>，输出两个数的乘积最小的。</li></ul><p><strong>思路</strong></p><ul><li>设置两个索引标志left,right,分别从左和右开始靠近,</li><li>如果s&gt;sum right–</li><li>s&lt;sum left++</li><li>返回当前的节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function FindNumbersWithSum(array, sum)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(array&amp;&amp;array.length&gt;0)&#123;</span><br><span class="line">    var left &#x3D; 0;</span><br><span class="line">    var right &#x3D; array.length-1;</span><br><span class="line">    while(left&lt;right)&#123;</span><br><span class="line">      var s &#x3D; array[left]+array[right]</span><br><span class="line">      if(s&gt;sum)&#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;else if(s&lt;sum)&#123;</span><br><span class="line">        left++</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        return [array[left],array[right]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-调整数组的顺序时奇数在前面-偶数在后面"><a href="#1-2-调整数组的顺序时奇数在前面-偶数在后面" class="headerlink" title="1.2 调整数组的顺序时奇数在前面,偶数在后面"></a>1.2 调整数组的顺序时奇数在前面,偶数在后面</h3><p><strong>题目</strong></p><ul><li>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分</li></ul><p><strong>思路</strong></p><ul><li>分别保存起来</li><li>在拼接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function reOrderArray(array)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line"> var odd &#x3D; [];</span><br><span class="line">  var even &#x3D; [];</span><br><span class="line">  for (var item of array)&#123;</span><br><span class="line">    if(item%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">      even.push(item)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      odd.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return [...odd,...even]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-和为s的连续正整数序列"><a href="#1-3-和为s的连续正整数序列" class="headerlink" title="1.3 和为s的连续正整数序列"></a>1.3 和为s的连续正整数序列</h3><p><strong>题目</strong></p><p>输入一个正数<code>S</code>，打印出所有和为S的连续正数序列。</p><p>例如：输入<code>15</code>，有序<code>1+2+3+4+5</code> = <code>4+5+6</code> = <code>7+8</code> = <code>15</code> 所以打印出3个连续序列<code>1-5</code>，<code>5-6</code>和<code>7-8</code></p><p><strong>思路</strong></p><ul><li>双指针法</li><li>先定义两个指针,start = 1,end=2(有序的数组)</li><li>判断条件start&lt;end</li><li>curSum&gt;sum-&gt;start++,反之end++</li><li>相等的情况下,将start到end的值保存到输出数组序列中,</li></ul><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200617094114690.png" alt="image-20200617094114690"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function FindContinuousSequence(sum)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;定义数组保存输出序列</span><br><span class="line">  var result &#x3D; [];</span><br><span class="line">  var end&#x3D;2,start&#x3D;1,curSum&#x3D;3;</span><br><span class="line">  while(start&lt;end)&#123;</span><br><span class="line">    if(curSum&gt;sum)&#123;</span><br><span class="line">      &#x2F;&#x2F;先减去原先的start,</span><br><span class="line">      curSum-&#x3D;start;</span><br><span class="line">      &#x2F;&#x2F;start移动</span><br><span class="line">      start++</span><br><span class="line">    &#125;else if(curSum&lt;sum)&#123;</span><br><span class="line">      end++;</span><br><span class="line">      curSum+&#x3D;end;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      &#x2F;&#x2F;相等的情况下,将start-end的值保存在当前的子数组中,保存在result中,</span><br><span class="line">      var child &#x3D;[]</span><br><span class="line">      for(var i&#x3D;start;i&lt;&#x3D;end;i++)&#123;</span><br><span class="line">        child.push(i)</span><br><span class="line">      &#125;</span><br><span class="line">      result.push(child)</span><br><span class="line">      &#x2F;&#x2F;start移动</span><br><span class="line">      curSum-&#x3D;start;</span><br><span class="line">      start++;</span><br><span class="line">      end++;</span><br><span class="line">      curSum+&#x3D;end;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数组之和"><a href="#2-数组之和" class="headerlink" title="2 数组之和"></a>2 数组之和</h2><h3 id="2-1-两数之和"><a href="#2-1-两数之和" class="headerlink" title="2.1 两数之和"></a>2.1 两数之和</h3><p><strong>题目</strong></p><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>思路</strong></p><ul><li><p>使用一个<code>map</code>将遍历过的数字存起来，值作为<code>key</code>，下标作为值。</p><p>对于每一次遍历：</p><ul><li>取<code>map</code>中查找是否有<code>key</code>为<code>target-nums[i]</code>的值</li><li>如果取到了，则条件成立，返回。</li><li>如果没有取到，将当前值作为<code>key</code>，下标作为值存入<code>map</code></li></ul><p>时间复杂度：<code>O(n)</code></p><p>空间复杂度<code>O(n)</code></p></li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function twoSum(nums, target) &#123;</span><br><span class="line">  &#x2F;&#x2F;借助map来存储</span><br><span class="line">  const map &#x3D; &#123;&#125;</span><br><span class="line">  if (Array.isArray(nums)) &#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">      &#x2F;&#x2F;map可以直接进行存储</span><br><span class="line">      if (map[target - nums[i]] !&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">        return [map[target - nums[i]], i]</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        map[nums[i]] &#x3D; i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-三数之和-leetcode"><a href="#2-2-三数之和-leetcode" class="headerlink" title="2.2 三数之和(leetcode)"></a>2.2 三数之和(leetcode)</h3><p><strong>题目</strong></p><p>给定一个包含 <code>n</code> 个整数的数组<code>nums</code>，判断 <code>nums</code> 中是否存在三个元素<code>a，b，c</code> ，使得 <code>a + b + c = 0 ？</code>找出所有满足条件且不重复的三元组。</p><p><strong>注意</strong></p><p>答案中不可以包含重复的三元组。</p><p><strong>思路</strong></p><ul><li>1.为了方便去重，我们首先将数组排序</li><li>2.对数组进行遍历，取当前遍历的数<code>nums[i]</code>为一个基准数，遍历数后面的数组为寻找数组</li><li>3.在寻找数组中设定两个起点，最左侧的<code>left</code>(<code>i+1</code>)和最右侧的<code>right</code>(<code>length-1</code>)</li><li>4.判断<code>nums[i] + nums[left] + nums[right]</code>是否等于0，如果等于0，加入结果，并分别将<code>left</code>和<code>right</code>移动一位</li><li>5.如果结果大于0，将<code>right</code>向左移动一位，向结果逼近</li><li>5.如果结果小于0，将<code>left</code>向右移动一位，向结果逼近</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function threeSum(numbers) &#123;</span><br><span class="line">  &#x2F;&#x2F;定义变量来存储当前满足条件的数组</span><br><span class="line">  var result &#x3D; [];</span><br><span class="line">  &#x2F;&#x2F;排序方便去重</span><br><span class="line">  numbers.sort((a, b) &#x3D;&gt; a - b);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;遍历</span><br><span class="line">  for (var i &#x3D; 0; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F;跳过重复的数字</span><br><span class="line">    if (i &amp;&amp; numbers[i] &#x3D;&#x3D; numbers[i - 1]) &#123;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    var left &#x3D; i + 1;</span><br><span class="line">    var right &#x3D; numbers.length - 1;</span><br><span class="line">    &#x2F;&#x2F;双指针来查找</span><br><span class="line">    while (left &lt; right) &#123;</span><br><span class="line">      var sum &#x3D; numbers[i] + numbers[left] + numbers[right];</span><br><span class="line">      if (sum &gt; 0) &#123;</span><br><span class="line">        right--</span><br><span class="line">      &#125; else if (sum &lt; 0) &#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;相等的情况下,保存,left和right都要移动指针</span><br><span class="line">        result.push([numbers[i], numbers[left++], numbers[right--]]);</span><br><span class="line">        &#x2F;&#x2F;left和right去重</span><br><span class="line">        while (numbers[left] &#x3D;&#x3D; numbers[left - 1]) &#123;</span><br><span class="line">          left++;</span><br><span class="line">        &#125;</span><br><span class="line">        while (numbers[right] &#x3D;&#x3D; numbers[right + 1]) &#123;</span><br><span class="line">          right--;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-四数之和"><a href="#2-3-四数之和" class="headerlink" title="2.3 四数之和"></a>2.3 四数之和</h3><p><strong>题目</strong></p><p>给定一个包含 <code>n</code> 个整数的数组<code>nums</code>，判断 <code>nums</code> 中是否存在四个元素<code>a，b，c，d</code> ，使得 <code>a + b + c + d = 0 ？</code>找出所有满足条件且不重复的四元组。</p><p>答案中不可以包含重复的四元组。</p><p><strong>思路</strong></p><ul><li>和三数之和的思路是一样的</li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">function fourSum(nums, target) &#123;</span><br><span class="line">  if (nums.length &lt; 4) return [];</span><br><span class="line">  var result &#x3D; [];</span><br><span class="line">  &#x2F;&#x2F;1.排序便于去重</span><br><span class="line">  nums.sort((a, b) &#x3D;&gt; a - b);</span><br><span class="line">  &#x2F;&#x2F;2.循环</span><br><span class="line">  for (var i &#x3D; 0; i &lt; nums.length - 3; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F;去重</span><br><span class="line">    if (i &amp;&amp; nums[i] &#x3D;&#x3D; nums[i - 1]) &#123;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果从左侧起连续的四个数大于了target,后面的都不会等于target(已经排序了)</span><br><span class="line">    if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] &gt; target) &#123;</span><br><span class="line">      &#x2F;&#x2F; 直接结束循环</span><br><span class="line">      break</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;第二个数去重</span><br><span class="line">    for (var j &#x3D; i + 1; j &lt; nums.length - 2; j++) &#123;</span><br><span class="line">      if (j &amp;&amp; nums[j] &#x3D;&#x3D; nums[j - 1]) &#123;</span><br><span class="line">        continue;</span><br><span class="line">      &#125;;</span><br><span class="line">      &#x2F;&#x2F;设置亮哥哥指针开始同侧探索</span><br><span class="line">      var left &#x3D; j + 1, right &#x3D; nums.length - 1;</span><br><span class="line">      while (left &lt; right) &#123;</span><br><span class="line">        var sum &#x3D; nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">        if (sum &#x3D;&#x3D; target) &#123;</span><br><span class="line">          result.push([nums[i], nums[j], nums[left], nums[right]])</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;left和right去重,并移动指针</span><br><span class="line">        if (sum &lt;&#x3D; target) &#123;</span><br><span class="line">          while (nums[left] &#x3D;&#x3D; nums[++left]);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          while (nums[right] &#x3D;&#x3D; nums[--right]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var nums &#x3D; [1, 0, -1, 0, -2, 2], target &#x3D; 0;</span><br><span class="line">console.log(fourSum(nums, target));</span><br></pre></td></tr></table></figure><h2 id="3-数据统计"><a href="#3-数据统计" class="headerlink" title="3 数据统计"></a>3 数据统计</h2><p>如何对数组进行更高效额统计计算</p><h3 id="3-1数组中出现次数超过数组一半的数字"><a href="#3-1数组中出现次数超过数组一半的数字" class="headerlink" title="3.1数组中出现次数超过数组一半的数字"></a>3.1数组中出现次数超过数组一半的数字</h3><p><strong>题目</strong></p><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p><p><strong>思路</strong></p><ul><li><p>目标值的个数比其他所有值加起来的数多</p><p>记录两个变量 1.数组中的某个值 2.次数</p><p>1.当前遍历值和上一次遍历值相等？次数+1 ： 次数-1。</p><p>2.次数变为0后保存新的值。</p><p>3.遍历结束后保存的值,判断其是否复合条件</p><p>事件复杂度O(n) 不需要开辟额外空间 , 逻辑稍微复杂</p></li></ul><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200617132313777.png" alt="image-20200617132313777"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function MoreThanHalfNum_Solution(numbers)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;定义两个变量来用来记录target(目标值)和count的个数</span><br><span class="line">  if(!numbers||numbers.length&lt;0) return 0;</span><br><span class="line">  var target &#x3D; numbers[0];</span><br><span class="line">  var count&#x3D;0;</span><br><span class="line">  &#x2F;&#x2F;第一次循环找出target</span><br><span class="line">  for(var i&#x3D;0;i&lt;numbers.length;i++)&#123;</span><br><span class="line">    &#x2F;&#x2F;相等的情况下</span><br><span class="line">    if(numbers[i]&#x3D;&#x3D;target)&#123;</span><br><span class="line">      count++;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      count--</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果count&#x3D;&#x3D;0表示当前数字不是最长数字被抵消了,重新复值向后遍历</span><br><span class="line">    if(count&#x3D;&#x3D;0)&#123;</span><br><span class="line">      target&#x3D;numbers[i];</span><br><span class="line">      count&#x3D;1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;第二次循环找出target的count</span><br><span class="line">  count&#x3D;0</span><br><span class="line">  for(var j&#x3D;0;j&lt;numbers.length;j++)&#123;</span><br><span class="line">    if(numbers[j]&#x3D;&#x3D;target)&#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;符合条件长度的判断</span><br><span class="line">  return count&gt; Math.floor(numbers.length&#x2F;2)?target:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2连续子数组的最大值"><a href="#3-2连续子数组的最大值" class="headerlink" title="3.2连续子数组的最大值"></a>3.2连续子数组的最大值</h3><p><strong>题目</strong></p><p>输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值，要求时间复杂度为<code>O(n)</code></p><p>例如:<code>{6,-3,-2,7,-15,1,2,2}</code>,连续子向量的最大和为8(从第0个开始,到第3个为止)</p><p><strong>思路</strong></p><ul><li><p>记录一个当前连续子数组最大值 <code>max</code> 默认值为数组第一项</p><p>记录一个当前连续子数组累加值 <code>sum</code> 默认值为数组第一项</p><p>1.从数组第二个数开始，若 <code>sum&lt;0</code> 则当前的<code>sum</code>不再对后面的累加有贡献，<code>sum = 当前数</code></p><p>2.若 <code>sum&gt;0</code> 则<code>sum = sum + 当前数</code></p><p>3.比较 <code>sum</code> 和 <code>max</code> ，<code>max = 两者最大值</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function FindGreatestSumOfSubArray(array)</span><br><span class="line">&#123;</span><br><span class="line">  if(Array.isArray(array)&amp;&amp;array.length&gt;0)&#123;</span><br><span class="line">    &#x2F;&#x2F;定义当前和和最大值</span><br><span class="line">    var sum &#x3D; array[0];</span><br><span class="line">    var max &#x3D; array[0];</span><br><span class="line">    for(var i&#x3D;1;i&lt;array.length;i++)&#123;</span><br><span class="line">      if(sum&lt;0)&#123;</span><br><span class="line">        &#x2F;&#x2F;和小于0时,前面的值都不会对后面的有﹢影响</span><br><span class="line">        sum &#x3D; array[i]</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        sum+&#x3D;array[i]</span><br><span class="line">      &#125;</span><br><span class="line">      if(sum&gt;max)&#123;</span><br><span class="line">        max&#x3D;sum;</span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">    return max</span><br><span class="line">  &#125;</span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-第一个只出现一次的字符9"><a href="#3-3-第一个只出现一次的字符9" class="headerlink" title="3.3 第一个只出现一次的字符9"></a>3.3 第一个只出现一次的字符9</h3><ul><li><p>遍历字符串，比较每个字符第一次和最后一次出现的位置是否相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf&#96;的时间复杂度为&#96;O(n)&#96;，所以整体的时间复杂度为O(n2)，空间复杂度为&#96;0</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function PrintMinNumber(numbers)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(!numbers || numbers.length&#x3D;&#x3D;0) return &#39;&#39;</span><br><span class="line">  </span><br><span class="line"> return numbers.sort(compare).join(&#39;&#39;)</span><br><span class="line">&#125;</span><br><span class="line"> function compare(a, b) &#123;</span><br><span class="line">      const front &#x3D; &quot;&quot; + a + b;</span><br><span class="line">      const behind &#x3D; &quot;&quot; + b + a;</span><br><span class="line">      return front - behind;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-扑克牌顺子"><a href="#3-4-扑克牌顺子" class="headerlink" title="3.4 扑克牌顺子"></a>3.4 扑克牌顺子</h3><p><strong>题目</strong></p><p>扑克牌中随机抽<code>5</code>张牌，判断是不是一个顺子，即这<code>5</code>张牌是不是连续的。</p><p><code>2-10</code>为数字本身，<code>A</code>为<code>1</code>，<code>J</code>为<code>11...</code>大小王可以看成任何数字，可以把它当作<code>0</code>处理。</p><p><strong>思路</strong></p><ul><li>1.数组排序</li><li>2.遍历数组</li><li>3.若为<code>0</code>，记录<code>0</code>的个数加<code>1</code></li><li>4.若不为<code>0</code>，记录和下一个元素的间隔</li><li>5.最后比较<code>0</code>的个数和间隔数，间隔数<code>&gt;0</code>的个数则不能构成顺子</li><li>6.注意中间如果有两个元素相等则不能构成顺子</li></ul><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function IsContinuous(numbers)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(numbers&amp;&amp;numbers.length&gt;0)&#123;</span><br><span class="line">    &#x2F;&#x2F;排序</span><br><span class="line">    numbers.sort();</span><br><span class="line">    &#x2F;&#x2F;记录0的个数</span><br><span class="line">    var numOfZero&#x3D;0;</span><br><span class="line">    &#x2F;&#x2F;记录间隔数的和</span><br><span class="line">    var numOfInterval&#x3D;0</span><br><span class="line">    &#x2F;&#x2F;循环计算,0的个数大于等于所有间隔数的和,返回true</span><br><span class="line">    for(var i&#x3D;0;i&lt;numbers.length-1;i++)&#123;</span><br><span class="line">      if(numbers[i]&#x3D;&#x3D;0)&#123;</span><br><span class="line">        numOfZero ++</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F;计算间隔数</span><br><span class="line">        var space &#x3D; numbers[i+1]-numbers[i];</span><br><span class="line">        &#x2F;&#x2F;排除对子的出现</span><br><span class="line">        if(space&#x3D;&#x3D;0)&#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          numOfInterval +&#x3D; space-1;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(numOfZero&gt;&#x3D;numOfInterval)</span><br><span class="line">      return true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-二维数组"><a href="#4-二维数组" class="headerlink" title="4 二维数组"></a>4 二维数组</h2><p>建立一定的抽象建模能力，将实际中的很多问题进行抽象</p><h3 id="4-1-构建乘积数组"><a href="#4-1-构建乘积数组" class="headerlink" title="4.1 构建乘积数组"></a>4.1 构建乘积数组</h3><p><strong>题目</strong></p><p>给定一个数组A<code>[0,1,...,n-1]</code>,请构建一个数组B<code>[0,1,...,n-1]</code>,其中B中的元素<code>B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]</code>。不能使用除法</p><p><strong>思路</strong></p><ul><li>可以先计算下面的值,在循环乘以上三角的值</li></ul><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200617085505793.png" alt="image-20200617085505793"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function multiply(array)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;定义一个数组保存B</span><br><span class="line">  var result &#x3D; [];</span><br><span class="line">  &#x2F;&#x2F;判断是不是数组以及数组是不是为空</span><br><span class="line">  if(Array.isArray(array)&amp;&amp; array.length&gt;0)&#123;</span><br><span class="line">    &#x2F;&#x2F;计算下三角</span><br><span class="line">    result [0] &#x3D;1;</span><br><span class="line">    for(var i&#x3D;1;i&lt;array.length;i++)&#123;</span><br><span class="line">      result[i] &#x3D; result[i-1]*array[i-1];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;将上三角的元素乘进去</span><br><span class="line">    var temp &#x3D; 1;</span><br><span class="line">    for(j &#x3D; array.length-2;j&gt;&#x3D;0;j--)&#123;</span><br><span class="line">    &#x2F;&#x2F;暂存当前的要乘以的元素</span><br><span class="line">      temp &#x3D; temp*array[j+1];</span><br><span class="line">      result[j] &#x3D; result[j]*temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-顺时针打印矩阵"><a href="#4-2-顺时针打印矩阵" class="headerlink" title="4.2 顺时针打印矩阵"></a>4.2 顺时针打印矩阵</h3><p><strong>题目</strong></p><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200617135655513.png" alt="image-20200617135655513"></p><p><strong>思路</strong></p><p>打印拆分四部</p><ul><li>第一步：从左到右打印一行</li><li>第二步：从上到下打印一列</li><li>第三步：从右到左打印一行</li><li>第四步：从下到上打印一列</li></ul><p>最后一圈很有可能出现几种异常情况,打印矩阵最里面一圈可能只需三步、两步、甚至一步</p><p>所以在每一行打印时要做好条件判断:</p><ul><li><p>能走到最后一圈，从左到右必定会打印</p></li><li><p>结束行号大于开始行号，需要从上到下打印</p></li><li><p>结束列号大于开始列号，需要从右到左打印</p></li><li><p>结束行号大于开始行号+1，需要从下到上打印</p></li></ul><p><strong>code</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">function printMatrix(matrix)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  var start &#x3D; 0;</span><br><span class="line">  &#x2F;&#x2F;获取函数和列数 </span><br><span class="line">  var rows &#x3D; matrix.length;</span><br><span class="line">  var columns &#x3D; matrix[0].length;</span><br><span class="line">  &#x2F;&#x2F;保存数组</span><br><span class="line">  var result &#x3D; []</span><br><span class="line">  </span><br><span class="line">  if(!rows&amp;&amp;!columns)&#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;循环条件</span><br><span class="line">  while(rows&gt;start*2&amp;&amp;columns&gt;start*2)&#123;</span><br><span class="line">    &#x2F;&#x2F;转一圈</span><br><span class="line">    runCircle(matrix,start,rows,columns,result)</span><br><span class="line">    &#x2F;&#x2F;注意这里的起点都是(start,start),上面的函数只是转了一圈,转完进行下一圈</span><br><span class="line">    start++;</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">function runCircle(matrix,start,rows,columns,result)&#123;</span><br><span class="line">  &#x2F;&#x2F;获取当下遍历一圈的x和y的值</span><br><span class="line">  var endX &#x3D; columns-start-1;</span><br><span class="line">  var endY &#x3D; rows-start-1;</span><br><span class="line">  for(var i&#x3D;start;i&lt;&#x3D;endX;i++)&#123;</span><br><span class="line">    result.push(matrix[start][i])</span><br><span class="line">  &#125;</span><br><span class="line">  if(endY&gt;start)&#123;</span><br><span class="line">    for(var j &#x3D; start+1;j&lt;&#x3D;endY;j++)&#123;</span><br><span class="line">      result.push(matrix[j][endX])</span><br><span class="line">    &#125;</span><br><span class="line">    if(endX&gt;start)&#123;</span><br><span class="line">      for(var m&#x3D;endX-1;m&gt;&#x3D;start;m--)&#123;</span><br><span class="line">        result.push(matrix[endY][m])</span><br><span class="line">      &#125;</span><br><span class="line">      if(endY&gt;start+1)&#123;</span><br><span class="line">        for(var n &#x3D; endY-1;n&gt;start;n--)&#123;</span><br><span class="line">          result.push(matrix[n][start])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5 其他"></a>5 其他</h2><h3 id="5-1-把数组排成最小的数"><a href="#5-1-把数组排成最小的数" class="headerlink" title="5.1 把数组排成最小的数"></a>5.1 把数组排成最小的数</h3><p><strong>题目</strong></p><ul><li><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p><p>例如输入数组<code>{3，32，321}</code>，则打印出这三个数字能排成的最小数字为<code>321323</code></p></li></ul><p><strong>思路</strong></p><p>通过sort函数,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function PrintMinNumber(numbers)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(!numbers || numbers.length&#x3D;&#x3D;0) return &#39;&#39;</span><br><span class="line">  </span><br><span class="line"> return numbers.sort(compare).join(&#39;&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;自定义排序规则</span><br><span class="line"> function compare(a, b) &#123;</span><br><span class="line">      const front &#x3D; &quot;&quot; + a + b;</span><br><span class="line">      const behind &#x3D; &quot;&quot; + b + a;</span><br><span class="line">      return front - behind;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-在排序数组中查找数字"><a href="#5-2-在排序数组中查找数字" class="headerlink" title="5.2 在排序数组中查找数字"></a>5.2 在排序数组中查找数字</h3><p><strong>题目</strong></p><p>统计一个数字在排序数组中出现的次数</p><p><strong>思路</strong></p><ul><li>1.直接遍历数组，判断前后的值是否相同，找到元素开始位置和结束位置，时间复杂度<code>O(n)</code></li><li>2.使用二分查找找到目标值，在向前向后遍历，找到所有的数，比上面略优，时间复杂度也是<code>O(n)</code></li><li>3.使用二分查找分别找到第一个目标值出现的位置和最后一个位置，时间复杂度<code>O(logn)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function binaryTree(data, arr, start, end) &#123; </span><br><span class="line">  if (start &gt; end) &#123; </span><br><span class="line">    return -1</span><br><span class="line">  &#125;</span><br><span class="line">  var mid &#x3D; Math.floor((end + start) &#x2F; 2);</span><br><span class="line">  if (data &#x3D;&#x3D; arr[mid]) &#123;</span><br><span class="line">    return mid</span><br><span class="line">  &#125; else if (data &gt; arr[mid]) &#123;</span><br><span class="line">    return binaryTree(data, arr, mid + 1, end)</span><br><span class="line">  &#125; else &#123; </span><br><span class="line">    return binaryTree(data,arr,start,mid-1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-数组中的逆序对"><a href="#5-3-数组中的逆序对" class="headerlink" title="5.3 数组中的逆序对"></a>5.3 数组中的逆序对</h3><p><strong>题目</strong></p><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。</p><p><strong>思路</strong></p><ul><li><p>使用暴力法：从第一个数开始，依次和后面每一个数字进行比较记录逆序对的个数，时间复杂度O(n2)</p></li><li><p>使用分治的细想：</p></li></ul><p>若没了解过归并排序，建议先熟悉<a href="http://www.conardli.top/docs/算法分类/排序/归并排序.html" target="_blank" rel="noopener">归并排序</a>算法再来看本题。</p><p>直接将归并排序进行改进，把数据分成<code>N</code>个小数组。</p><p>合并数组 <code>left - mid</code> , <code>mid+1 - right</code>，合并时， 若<code>array[leftIndex] &gt; array[rightIndex]</code> ,则比右边 <code>rightIndex-mid</code>个数大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count +&#x3D; rightIndex-mid</span><br></pre></td></tr></table></figure><p>注意和归并排序的区别： 归并排序是合并数组数从小数开始，而本题是从大数开始。</p><p>时间复杂度<code>O(nlogn)</code></p><p>空间复杂度<code>O(n)</code></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">function InversePairs(data) &#123;</span><br><span class="line">  return mergeSort(data, 0, data.length - 1, [])%1000000007;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">arr:需要遍历的数组</span><br><span class="line">start:合并的开始位置</span><br><span class="line">end:合并的结束位置</span><br><span class="line">temp:保存归并排序的结果(从大数到小数排序的)</span><br><span class="line">*&#x2F;</span><br><span class="line">function mergeSort(arr, left, right, temp) &#123;</span><br><span class="line">  &#x2F;&#x2F;拆分</span><br><span class="line">  if (left &lt; right) &#123;</span><br><span class="line">  &#x2F;&#x2F;这里取中位数</span><br><span class="line">    var mid &#x3D; left + right &gt;&gt; 1;</span><br><span class="line">    var l &#x3D; mergeSort(arr, left, mid, temp)</span><br><span class="line">    var r &#x3D; mergeSort(arr, mid + 1, right, temp)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;合并操作</span><br><span class="line">    var leftIndex &#x3D; mid;</span><br><span class="line">    var rightIndex &#x3D; right;</span><br><span class="line">    &#x2F;&#x2F;合并的时候是两个数组合并,每次合并都把最大的值归并到temp数组中,temp数组长度时数组arr的长度tempIndex</span><br><span class="line">    var tempIndex &#x3D; right;</span><br><span class="line">    var count &#x3D; 0</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;遍历数组计算count和保存两侧的最大值到temp</span><br><span class="line">    while (leftIndex &gt;&#x3D; left &amp;&amp; rightIndex &gt; mid) &#123;</span><br><span class="line">      &#x2F;&#x2F;依次从后后往前比较</span><br><span class="line">      if (arr[leftIndex] &gt; arr[rightIndex]) &#123;</span><br><span class="line">        &#x2F;&#x2F; 左边的大, 保存左边的值,同时count+&#x3D;插值(已经递归排序了差值就是逆序对数)</span><br><span class="line">        count +&#x3D; (rightIndex - mid);</span><br><span class="line">        temp[tempIndex--] &#x3D; arr[leftIndex--];</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;右边的大保存右边的值</span><br><span class="line">        temp[tempIndex--] &#x3D; arr[rightIndex--];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果跳出循环,左边的数值大,将左边的直接添加到temp中</span><br><span class="line">    while (leftIndex &gt;&#x3D; left) &#123;</span><br><span class="line">      temp[tempIndex--] &#x3D; arr[leftIndex--]</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;右边还有数组则右边直接添加到temp中</span><br><span class="line">    while (rightIndex &gt; mid) &#123;</span><br><span class="line">      temp[tempIndex--] &#x3D; arr[rightIndex--];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;将暂存在temp中的归并排序的值修改arr</span><br><span class="line">    for (var i &#x3D; left; i &lt;&#x3D; right; i++) &#123;</span><br><span class="line">      arr[i] &#x3D; temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;返回排序好的count,同时数组arr的改变也是</span><br><span class="line">    return count + l + r;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    InversePairs : InversePairs</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><ul><li>堆的顶层是一棵完全二叉树,可以用数组实现    </li><li>最大堆:每一个元素的节点值不小于其子节点</li><li>最小堆:每个元素的节点值不大于其子节点</li></ul><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200618153941577.png" alt="image-20200618153941577" style="zoom:60%;"><ul><li>应用:堆在处理某些特殊场景时可以大大降低代码的时间复杂度，例如在庞大的数据中找到最大的几个数或者最小的几个数，可以借助堆来完成这个过程。</li></ul><h2 id="1-堆的基本操作"><a href="#1-堆的基本操作" class="headerlink" title="1 堆的基本操作"></a>1 堆的基本操作</h2><h3 id="1-1-堆的基本结构"><a href="#1-1-堆的基本结构" class="headerlink" title="1.1 堆的基本结构"></a>1.1 堆的基本结构</h3><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200618154319630.png" alt="image-20200618154319630"></p><ul><li>堆的底层实际上是一棵完全二叉树。</li><li>可以用数组实现</li><li>每个的节点元素值不小于其子节点 - 最大堆</li><li>每个的节点元素值不大于其子节点 - 最小堆</li></ul><h3 id="1-2-堆的构建"><a href="#1-2-堆的构建" class="headerlink" title="1.2 堆的构建"></a>1.2 堆的构建</h3><p><strong>堆存储在下标为0开始的数组中，因此在堆中给定下标为i的结点时：</strong><br><strong>（1） 如果i=0，结点i是根节点，没有双亲节点；否则结点i的双亲结点为 结点(i-1)/2</strong></p><p><strong>（2） 如果2 * i + 1 &lt;= n - 1，则结点i的左孩子为结点2 * i + 1，否则结 点i无左孩子</strong></p><p><strong>（3）如果2 * i + 2 &lt;= n - 1，则结点i的右孩子为结点2 * i + 2，否则结 点i无右孩</strong></p><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200618160822673.png" alt="image-20200618160822673"></p><h4 id="1-2-1-大顶堆"><a href="#1-2-1-大顶堆" class="headerlink" title="1.2.1 大顶堆"></a>1.2.1 大顶堆</h4><p>对于第一个非叶子节点开始依次对数组中的元素进行下沉操作</p><ul><li>和孩子节点的最大值max比较</li><li>大于max的—不需要在下沉</li><li>小于max—和max交换位置继续下一层孩子节点的比较</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.大顶堆的创建</span><br><span class="line">function createMaxHeap(arr, length) &#123; </span><br><span class="line">  &#x2F;&#x2F; 寻找根节点</span><br><span class="line">  for (var i &#x3D; Math.floor(length &#x2F; 2) - 1; i &gt;&#x3D; 0; i--) &#123; </span><br><span class="line">    &#x2F;&#x2F; 调整大顶堆</span><br><span class="line">    ajustMaxHeap(arr, i, length);</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line">function ajustMaxHeap(arr, index, length) &#123; </span><br><span class="line">  &#x2F;&#x2F;调整左右子树,这里的i*2+1是跳转到下一层的子节点</span><br><span class="line">  for (var i &#x3D; index * 2 + 1; i &lt; length; i &#x3D; i * 2 + 1) &#123; </span><br><span class="line">    &#x2F;&#x2F;调整i+1&lt;length表明是有子节点的</span><br><span class="line">    if (i + 1 &lt; length &amp;&amp; arr[i + 1] &gt; arr[i]) &#123; </span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;判断子节点是不是大于节点的最大值index</span><br><span class="line">    if (arr[index] &gt;&#x3D; arr[i]) &#123; </span><br><span class="line">      &#x2F;&#x2F;根节点大于子节点</span><br><span class="line">      break</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F;最大值的给根节点</span><br><span class="line">      [arr[index],arr[i]]&#x3D;[arr[i],arr[index]]</span><br><span class="line">      index &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-小顶堆"><a href="#1-2-2-小顶堆" class="headerlink" title="1.2.2 小顶堆"></a>1.2.2 小顶堆</h4><p>从第一个非叶子节点开始依次对数组中的元素进行下沉操作</p><ul><li>和孩子节点的最小值<code>min</code>比较</li><li>小于<code>min</code> — 不需要在下沉</li><li>大于<code>min</code> — 和<code>min</code>交换位置（下沉） - 继续和下一层孩子节点比较，直到队列末尾</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;小顶堆的创建</span><br><span class="line">function createMinHeap(arr, length) &#123;</span><br><span class="line">  for (var i &#x3D; Math.floor(length &#x2F; 2) - 1; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">    ajustMinHeap(arr, i, length)</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br><span class="line">function ajustMinHeap(arr, index, length) &#123;</span><br><span class="line">  for (var i &#x3D; index * 2 + 1; i &lt; length; i * 2 + 1) &#123;</span><br><span class="line">    if (i + 1 &gt; length &amp;&amp; arr[i + 1] &lt; arr[i]) &#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">    if (arr[index] &lt; arr[i]) &#123;</span><br><span class="line">      break</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F;小的始终在最前面</span><br><span class="line">      [arr[index], arr[i]] &#x3D; [arr[i], arr[index]]</span><br><span class="line">      index &#x3D; i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-堆的插入-先进先出"><a href="#1-3-堆的插入-先进先出" class="headerlink" title="1.3 堆的插入(先进先出)"></a>1.3 堆的插入(先进先出)</h3><ul><li>由于堆属于<strong>优先队列</strong>，只能从<strong>末尾添加</strong></li><li>添加后有可能破坏堆的结构，需要从下到上进行调整</li><li>如果元素小于父元素，上浮</li></ul><p>小顶堆为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;堆的插入(小顶堆)(优先队列只能从末尾插入元素)</span><br><span class="line">function addEleHeap(arr &#x3D; [], element) &#123;</span><br><span class="line">  &#x2F;&#x2F;插入元素到队列中</span><br><span class="line">  arr.push(element);</span><br><span class="line">  &#x2F;&#x2F;获取最后插入的元素得所用</span><br><span class="line">  var index &#x3D; arr.length - 1;</span><br><span class="line">  &#x2F;&#x2F;获取父元素的索引</span><br><span class="line">  var target &#x3D; Math.floor((index - 1) &#x2F; 2);</span><br><span class="line">  &#x2F;&#x2F; 父元素的索引非0</span><br><span class="line">  while (target &gt;&#x3D; 0) &#123;</span><br><span class="line">    arr[target];</span><br><span class="line">    &#x2F;&#x2F;判断父元素和插入元素的大小</span><br><span class="line">    if (arr[index] &lt; arr[target]) &#123;</span><br><span class="line">      &#x2F;&#x2F;新插入的元素小于,调整树的结构</span><br><span class="line">      [arr[index], arr[target]] &#x3D; [arr[target], arr[index]];</span><br><span class="line">      index &#x3D; target;</span><br><span class="line">      target &#x3D; Math.floor((index - 1) &#x2F; 2);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-堆的移出"><a href="#1-4-堆的移出" class="headerlink" title="1.4 堆的移出"></a>1.4 堆的移出</h3><ul><li>由于堆属于优先队列，只能从头部移除</li><li>移除头部后，使用末尾元素填充头部，开始头部下沉操作(调用小顶堆的调整)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;小顶堆(堆的移出只能从头部移出,用最后一位填充,在调整)</span><br><span class="line">function removeEleHeap(arr &#x3D; []) &#123;</span><br><span class="line">  var result &#x3D; null</span><br><span class="line">  if (arr.length &gt; 1) &#123;</span><br><span class="line">    &#x2F;&#x2F;取出第一个待删除元素</span><br><span class="line">    result &#x3D; arr[0];</span><br><span class="line">    &#x2F;&#x2F;用最后一个元素填充</span><br><span class="line">    arr[0] &#x3D; arr.pop();</span><br><span class="line">    ajustMinHeap(arr, 0, arr.length)</span><br><span class="line">  &#125; else if (arr.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">    return arr.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-堆的封装"><a href="#1-5-堆的封装" class="headerlink" title="1.5 堆的封装"></a>1.5 堆的封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">function Heap(type &#x3D; &#39;min&#39;) &#123;</span><br><span class="line">      this.type &#x3D; type;</span><br><span class="line">      this.value &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Heap.prototype.create &#x3D; function () &#123;</span><br><span class="line">      const length &#x3D; this.value.length;</span><br><span class="line">      for (let i &#x3D; Math.floor((length &#x2F; 2) - 1); i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">        this.ajust(i, length);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Heap.prototype.ajust &#x3D; function (index, length) &#123;</span><br><span class="line">      const array &#x3D; this.value;</span><br><span class="line">      for (let i &#x3D; 2 * index + 1; i &lt; length; i &#x3D; 2 * i + 1) &#123;</span><br><span class="line">        if (i + 1 &lt; length) &#123;</span><br><span class="line">          if ((this.type &#x3D;&#x3D;&#x3D; &#39;max&#39; &amp;&amp; array[i + 1] &gt; array[i]) ||</span><br><span class="line">            (this.type &#x3D;&#x3D;&#x3D; &#39;min&#39; &amp;&amp; array[i + 1] &lt; array[i])) &#123;</span><br><span class="line">            i++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if ((this.type &#x3D;&#x3D;&#x3D; &#39;max&#39; &amp;&amp; array[index] &lt; [array[i]]) ||</span><br><span class="line">          (this.type &#x3D;&#x3D;&#x3D; &#39;min&#39; &amp;&amp; array[index] &gt; [array[i]])) &#123;</span><br><span class="line">          [array[index], array[i]] &#x3D; [array[i], array[index]];</span><br><span class="line">          index &#x3D; i;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Heap.prototype.add &#x3D; function (element) &#123;</span><br><span class="line">      const array &#x3D; this.value;</span><br><span class="line">      array.push(element);</span><br><span class="line">      if (array.length &gt; 1) &#123;</span><br><span class="line">        let index &#x3D; array.length - 1;</span><br><span class="line">        let target &#x3D; Math.floor((index - 1) &#x2F; 2);</span><br><span class="line">        while (target &gt;&#x3D; 0) &#123;</span><br><span class="line">          if ((this.type &#x3D;&#x3D;&#x3D; &#39;min&#39; &amp;&amp; array[index] &lt; array[target]) ||</span><br><span class="line">            (this.type &#x3D;&#x3D;&#x3D; &#39;max&#39; &amp;&amp; array[index] &gt; array[target])) &#123;</span><br><span class="line">            [array[index], array[target]] &#x3D; [array[target], array[index]]</span><br><span class="line">            index &#x3D; target;</span><br><span class="line">            target &#x3D; Math.floor((index - 1) &#x2F; 2);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            break;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Heap.prototype.pop &#x3D; function () &#123;</span><br><span class="line">      const array &#x3D; this.value;</span><br><span class="line">      let result &#x3D; null;</span><br><span class="line">      if (array.length &gt; 1) &#123;</span><br><span class="line">        result &#x3D; array[0];</span><br><span class="line">        array[0] &#x3D; array.pop();</span><br><span class="line">        this.ajust(0, array.length);</span><br><span class="line">      &#125; else if (array.length &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">        return array.pop();</span><br><span class="line">      &#125;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var heap &#x3D; new Heap(&#39;max&#39;);</span><br><span class="line">    heap.add(6)</span><br><span class="line">    heap.add(10)</span><br><span class="line">    console.log(heap.value);</span><br><span class="line">    console.log(heap.pop());</span><br><span class="line">    console.log(heap.value);</span><br></pre></td></tr></table></figure><h2 id="2-练习题"><a href="#2-练习题" class="headerlink" title="2 练习题"></a>2 练习题</h2><h3 id="2-1最小的k个数"><a href="#2-1最小的k个数" class="headerlink" title="2.1最小的k个数"></a>2.1最小的k个数</h3><p><strong>题目</strong></p><p>输入<code>n</code>个整数，找出其中最小的K个数。例如输入<code>4,5,1,6,2,7,3,8</code>这<code>8</code>个数字，则最小的<code>4</code>个数字是<code>1,2,3,4</code></p><p><strong>思路</strong></p><p>思路1:</p><p>先排序，再取前k个数，最小时间复杂度<code>nlogn</code>。</p><p>思路2:</p><p>1.把前<code>k</code>个数构建一个大顶堆</p><p>2.从第<code>k</code>个数开始，和大顶堆的最大值进行比较，若比最大值小，交换两个数的位置，重新构建大顶堆</p><p>3.一次遍历之后大顶堆里的数就是整个数据里最小的<code>k</code>个数。</p><p>时间复杂度<code>nlogk</code>，优于思路1。</p><h3 id="2-2-数据流中的中位数"><a href="#2-2-数据流中的中位数" class="headerlink" title="2.2 数据流中的中位数"></a>2.2 数据流中的中位数</h3><p><strong>题目</strong></p><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。</p><p>如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用<code>Insert()</code>方法读取数据流，使用<code>GetMedian()</code>方法获取当前读取数据的中位数</p><p><strong>分析</strong></p><ul><li>这种题目可以通过对来解决太复杂了</li><li>直接插入排序后通过计算奇偶性来解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; []</span><br><span class="line">function Insert(num)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;将num放进数组arr,在排序</span><br><span class="line">  arr.push(num);</span><br><span class="line">  arr.sort();</span><br><span class="line">&#125;</span><br><span class="line">function GetMedian()&#123;</span><br><span class="line">&#x2F;&#x2F; write code here</span><br><span class="line">  var len &#x3D; arr.length</span><br><span class="line">  if(len&#x3D;&#x3D;0) return 0</span><br><span class="line">  &#x2F;&#x2F;判断奇数还是偶数</span><br><span class="line">  if(len%2&#x3D;&#x3D;1)&#123;</span><br><span class="line">    return arr[Math.floor(len&#x2F;2)]</span><br><span class="line">  &#125;</span><br><span class="line">  if(len%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">    &#x2F;&#x2F;偶数是中间两位数相加除以&#x2F;2</span><br><span class="line">    return (arr[arr.length&#x2F;2]+arr[arr.length&#x2F;2-1])&#x2F;2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="1-链表的基础"><a href="#1-链表的基础" class="headerlink" title="1 链表的基础"></a>1 链表的基础</h2><ul><li><p>用一组任意存储的单元来存储线性表的数据元素。一个对象存储着本身的值和下一个元素的地址。</p></li><li><p>需要遍历才能查询到元素，查询慢。</p></li><li><p>插入元素只需断开连接重新赋值，插入快。</p></li></ul><h2 id="2-基本应用"><a href="#2-基本应用" class="headerlink" title="2 基本应用"></a>2 基本应用</h2><h3 id="2-1-从尾到头打印链表"><a href="#2-1-从尾到头打印链表" class="headerlink" title="2.1 从尾到头打印链表"></a>2.1 从尾到头打印链表</h3><p><strong>题目</strong></p><ul><li>输入一个链表，按链表值从尾到头的顺序返回一个<code>ArrayList</code>。</li></ul><p><strong>分析</strong></p><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200612122301666.png" alt="image-20200612122301666"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*function ListNode(x)&#123;</span><br><span class="line">    this.val &#x3D; x;</span><br><span class="line">    this.next &#x3D; null;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">function printListFromTailToHead(head)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">   &#x2F;&#x2F;通过循环头插法插入到数组</span><br><span class="line">   var arr &#x3D; [];</span><br><span class="line">  while(head)&#123;</span><br><span class="line">    arr.unshift(head.val);</span><br><span class="line">    head &#x3D; head.next</span><br><span class="line">  &#125;</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-反转链表"><a href="#2-2-反转链表" class="headerlink" title="2.2 反转链表"></a>2.2 反转链表</h3><p><strong>题目</strong></p><ul><li>输入一个链表，反转链表后，输出新链表的表头</li></ul><p><strong>分析</strong></p><ul><li>以链表的头部节点为基准节点</li><li>将基准节点的下一个节点挪到头部作为头节点</li><li>当基准节点的<code>next</code>为<code>null</code>，则其已经成为最后一个节点，链表已经反转完成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> function ListNode(x)&#123;</span><br><span class="line">    this.val &#x3D; x;</span><br><span class="line">    this.next &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">function ReverseList(pHead)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;*</span><br><span class="line">  以链表的头部节点为基础,将头部节点的后面的节点插入到头部节点之前,</span><br><span class="line">  *&#x2F;</span><br><span class="line">  &#x2F;&#x2F;保存当前的移动节点</span><br><span class="line">  let currentNode &#x3D; null;</span><br><span class="line">  &#x2F;&#x2F;始终指向链表的头结点,用于插入当前节点</span><br><span class="line">  let headNode &#x3D; pHead;</span><br><span class="line">  while(pHead&amp;&amp;pHead.next)&#123;</span><br><span class="line">    &#x2F;&#x2F;从链表中取出当前节点</span><br><span class="line">    currentNode &#x3D; pHead.next;</span><br><span class="line">    pHead.next &#x3D; currentNode.next;</span><br><span class="line">    &#x2F;&#x2F;将取出的当前节点插入到头结点中</span><br><span class="line">    currentNode.next &#x3D; headNode;</span><br><span class="line">    &#x2F;&#x2F;将头结点始终指向第一个节点</span><br><span class="line">    headNode &#x3D; currentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  return headNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-删除链表中重复的节点"><a href="#2-3-删除链表中重复的节点" class="headerlink" title="2.3 删除链表中重复的节点"></a>2.3 删除链表中重复的节点</h3><p><strong>题目</strong></p><ul><li>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</li></ul><p><strong>思路</strong></p><ul><li>链表是排好顺序的，所以重复元素都会相邻出现 递归链表：<ul><li>1.当前节点或当前节点的next为空，返回该节点</li><li>2.当前节点是重复节点：找到后面第一个不重复的节点</li><li>3.当前节点不重复：将当前的节点的next赋值为下一个不重复的节点</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function deleteDuplication(pHead)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(!pHead||!pHead.next) return pHead;</span><br><span class="line">  else if(pHead.val &#x3D;&#x3D; pHead.next.val)&#123;</span><br><span class="line">    &#x2F;&#x2F;递归查找连续的相等值,并找出下一个不连续相等的值,在递归中注意一定要有返回值才能不断进行递归有返回值</span><br><span class="line">    var tempNode &#x3D; pHead.next;</span><br><span class="line">    while(tempNode&amp;&amp;tempNode.val&#x3D;&#x3D;pHead.val)&#123;</span><br><span class="line">      tempNode &#x3D; tempNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return deleteDuplication(tempNode);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    &#x2F;&#x2F;当相邻的节点不同时,找到下一个不重复的节点连接在后面</span><br><span class="line">    pHead.next &#x3D; deleteDuplication(pHead.next)</span><br><span class="line">    return pHead</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度O(n)</li><li>空间复杂福O(1)</li></ul><h3 id="2-4-复杂链表的复制"><a href="#2-4-复杂链表的复制" class="headerlink" title="2.4 复杂链表的复制"></a>2.4 复杂链表的复制</h3><p><strong>题目</strong></p><ul><li>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针random指向一个随机节点），请对此链表进行深拷贝，并返回拷贝后的头结点。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function RandomListNode(x)&#123;</span><br><span class="line">    this.label &#x3D; x;</span><br><span class="line">    this.next &#x3D; null;</span><br><span class="line">    this.random &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">function Clone(pHead)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if (!pHead) return  null</span><br><span class="line">  var cloneHeadNode &#x3D; new RandomListNode(pHead.label);</span><br><span class="line">  cloneHeadNode.next &#x3D; pHead.next;</span><br><span class="line">  cloneHeadNode.random &#x3D; pHead.random;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;连接下一下节点</span><br><span class="line">  cloneHeadNode.next &#x3D; Clone(pHead.next);</span><br><span class="line">  return cloneHeadNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-环类链表"><a href="#3-环类链表" class="headerlink" title="3 环类链表"></a>3 环类链表</h2><p>环类题目即从判断一个单链表是否存在循环而扩展衍生的问题</p><h3 id="3-1-环形链表找出环的入口节点"><a href="#3-1-环形链表找出环的入口节点" class="headerlink" title="3.1 环形链表找出环的入口节点"></a>3.1 环形链表找出环的入口节点</h3><p><strong>题目</strong></p><ul><li>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</li></ul><p><strong>思路</strong></p><ul><li>首先判断是不是有环(设置fast-&gt;2,low-&gt;1)最终相遇则说明有环</li><li>当fast或fast.next不存在,return null(排除了只有一个元素的情况)</li><li>设置其中一个元素从开始节点出发,另一个从相遇点出发(fast-&gt;1,low-&gt;1)二者最终会相遇在环的入口与的位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*function ListNode(x)&#123;</span><br><span class="line">    this.val &#x3D; x;</span><br><span class="line">    this.next &#x3D; null;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">function EntryNodeOfLoop(pHead)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;定义两个变量</span><br><span class="line">  var low &#x3D; pHead;</span><br><span class="line">  var fast &#x3D; pHead;</span><br><span class="line">  &#x2F;&#x2F;判断是否有环</span><br><span class="line">  while(fast&amp;&amp;fast.next)&#123;</span><br><span class="line">     &#x2F;&#x2F;快指针走2步</span><br><span class="line">      fast &#x3D; fast.next.next;</span><br><span class="line">      &#x2F;&#x2F;慢指针走1步</span><br><span class="line">      low &#x3D; low.next;</span><br><span class="line">    if(low &#x3D;&#x3D;fast)&#123;</span><br><span class="line">     break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;条件,有一个不存在则表示不是环,(排除只有一个元素的情况)</span><br><span class="line">  if(!fast || !fast.next) return null;</span><br><span class="line">  &#x2F;&#x2F;有环寻找入口</span><br><span class="line">  low &#x3D; pHead;&#x2F;&#x2F;low从表头出发</span><br><span class="line">  while(low!&#x3D;fast)&#123;</span><br><span class="line">  &#x2F;&#x2F;注意这里都是走一步</span><br><span class="line">    fast &#x3D; fast.next;</span><br><span class="line">    low &#x3D; low.next;</span><br><span class="line">  &#125;</span><br><span class="line">  return fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度:O(n)</li></ul><h3 id="3-2-圆圈中最后剩下的数字-约瑟夫环的问题"><a href="#3-2-圆圈中最后剩下的数字-约瑟夫环的问题" class="headerlink" title="3.2 圆圈中最后剩下的数字(约瑟夫环的问题)"></a>3.2 圆圈中最后剩下的数字(约瑟夫环的问题)</h3><p><strong>题目</strong></p><ul><li><code>0,1,...,n-1</code>这<code>n</code>个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第<code>m</code>个数字。求出这个圆圈里剩下的最后一个数字。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function LastRemaining_Solution(n, m)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(n&lt;1) return -1;</span><br><span class="line">  &#x2F;&#x2F;编号为0的元素</span><br><span class="line">  if(n&#x3D;&#x3D;1) return 0;</span><br><span class="line">  &#x2F;&#x2F;这里通过递归的方式,每次都在去掉一个人的基础上在重新计算下一个要出的人</span><br><span class="line">  &#x2F;*</span><br><span class="line">  k&#x3D;1 m%n-1,下一次开始的是m%n f(1) &#x3D; m%n,返回的是下一次开始的地方</span><br><span class="line">  k&#x3D;2 f(2) &#x3D; (f(1)+m)%n</span><br><span class="line">  *&#x2F;</span><br><span class="line">  return (LastRemaining_Solution(n-1, m)+m)%n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-双指针"><a href="#4-双指针" class="headerlink" title="4 双指针"></a>4 双指针</h2><ul><li>双指针的思想在链表和数组中的题目都经常会用到，主要是利用两个或多个不同位置的指针，通过<strong>速度和方向</strong>的变换解决问题。</li><li>两个指针从不同位置出发：一个从始端开始，另一个从末端开始；</li><li>两个指针以不同速度移动：一个指针快一些，另一个指针慢一些。</li></ul><p>对于单链表，因为我们只能在一个方向上遍历链表，所以第一种情景可能无法工作。然而，第二种情景，也被称为慢指针和快指针技巧，是非常有用的。</p><h3 id="4-1-两个链表的公共节点"><a href="#4-1-两个链表的公共节点" class="headerlink" title="4.1 两个链表的公共节点"></a>4.1 两个链表的公共节点</h3><p><strong>题目</strong></p><ul><li>输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</li></ul><p><strong>思路:</strong></p><ul><li>获取两个列表的长度,找到差值interval</li><li>让长的列表先走interval,从同样的长度起点开始</li><li>当节点存在,且不相等直接next,相等返回当前节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function FindFirstCommonNode(pHead1, pHead2)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  var l1 &#x3D; getLength(pHead1);</span><br><span class="line">  var l2 &#x3D; getLength(pHead2);</span><br><span class="line">  var interval,lang,short;</span><br><span class="line">  if(l1&gt;l2)&#123;</span><br><span class="line">    interval &#x3D; l1-l2;</span><br><span class="line">    lang &#x3D; pHead1;</span><br><span class="line">    short &#x3D; pHead2;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    interval &#x3D; l2-l1;</span><br><span class="line">    lang &#x3D; pHead2;</span><br><span class="line">    short &#x3D; pHead1;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;长的先走interval步</span><br><span class="line">  while(interval--)&#123;</span><br><span class="line">    lang &#x3D; lang.next;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;比较两个数值,当存在的情况下</span><br><span class="line">  while(lang)&#123;</span><br><span class="line">    if(lang&#x3D;&#x3D;short)&#123;</span><br><span class="line">      return lang</span><br><span class="line">    &#125;</span><br><span class="line">    lang &#x3D; lang.next;</span><br><span class="line">    short &#x3D; short.next</span><br><span class="line">  &#125;</span><br><span class="line">  return null</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;获取两个链表的长度的</span><br><span class="line">function getLength(head)&#123;</span><br><span class="line">  var count &#x3D; 0;</span><br><span class="line">  while(head)&#123;</span><br><span class="line">    count++</span><br><span class="line">    head &#x3D; head.next;</span><br><span class="line">  &#125;</span><br><span class="line">  return count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-链表中倒数第k个节点"><a href="#4-2-链表中倒数第k个节点" class="headerlink" title="4.2 链表中倒数第k个节点"></a>4.2 链表中倒数第k个节点</h3><p><strong>题目</strong></p><ul><li>输入一个链表，输出该链表中倒数第k个结点。</li></ul><p><strong>分析</strong></p><ul><li><p>简单思路： 循环到链表末尾找到 length 在找到length-k节点 需要循环两次。</p><p>优化：</p><p>设定两个节点，间距相差k个节点，当前面的节点到达终点，取后面的节点。</p><p>前面的节点到达k后，后面的节点才出发。</p><p>代码鲁棒性： 需要考虑head为null，k为0，k大于链表长度的情况。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function FindKthToTail(head, k)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;*两个链表中间相差k个节点,在同时走,当先走的节点到达终点,后走的节点所在的位置就是倒数第k个节点*&#x2F;</span><br><span class="line">  if(!head ||!k) return null</span><br><span class="line">  &#x2F;&#x2F;第一个节点先走k步</span><br><span class="line">  var first &#x3D; head;</span><br><span class="line">  var last &#x3D; head;</span><br><span class="line">  var index &#x3D; 1</span><br><span class="line">  while(first.next)&#123;</span><br><span class="line">    index++;</span><br><span class="line">    first &#x3D; first.next;</span><br><span class="line">    if(index&gt;k)&#123;</span><br><span class="line">      last &#x3D; last.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;first到达末尾,last就是所求节点,k要小于index的值,也就是链表的长度</span><br><span class="line">  return (k&lt;&#x3D;index) &amp;&amp; last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-其他-1"><a href="#5-其他-1" class="headerlink" title="5 其他"></a>5 其他</h2><h3 id="5-1-二叉搜索树与双向链表"><a href="#5-1-二叉搜索树与双向链表" class="headerlink" title="5.1 二叉搜索树与双向链表"></a>5.1 二叉搜索树与双向链表</h3><p><strong>题目</strong></p><ul><li>输入一棵二叉搜索树，将该<strong>二叉搜索树</strong>转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function Convert(pRootOfTree)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">    &#x2F;&#x2F;判断是否存在</span><br><span class="line">    if(!pRootOfTree) return null</span><br><span class="line">    &#x2F;&#x2F;定义三个变量</span><br><span class="line">    var stack &#x3D; [];</span><br><span class="line">    var p&#x3D;pRootOfTree;</span><br><span class="line">    var pre &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F;判断是不是第一个节点</span><br><span class="line">    var isFirst &#x3D; true;</span><br><span class="line">    while(p||stack.length&gt;0)&#123;</span><br><span class="line">        while(p)&#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p&#x3D;p.left</span><br><span class="line">        &#125;</span><br><span class="line">        p &#x3D; stack.pop();</span><br><span class="line">        if(isFirst)&#123;</span><br><span class="line">           var root &#x3D; p;</span><br><span class="line">            pre &#x3D; p;</span><br><span class="line">            isFirst &#x3D; false</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F;连接p节点和前驱节点pre</span><br><span class="line">            pre.right &#x3D; p;</span><br><span class="line">            p.left &#x3D; pre;</span><br><span class="line">            &#x2F;&#x2F;pre指向p,</span><br><span class="line">            pre &#x3D; p;</span><br><span class="line">        &#125;</span><br><span class="line">        p &#x3D; p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;全部结束返回root</span><br><span class="line">    return root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-合并两个有序链表"><a href="#5-2-合并两个有序链表" class="headerlink" title="5.2 合并两个有序链表"></a>5.2 合并两个有序链表</h3><p><strong>题目</strong></p><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><p><strong>思路</strong></p><p>链表头部节点比较，取较小节点。</p><p>小节点的next等于小节点的next和大节点的较小值。</p><p>如此递归。</p><p>返回小节点。</p><p>考虑代码的鲁棒性，也是递归的终止条件，两个head为null的情况，取对方节点返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Merge(pHead1, pHead2)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(!pHead1) return pHead2;</span><br><span class="line">  if(!pHead2) return pHead1;</span><br><span class="line">  var head;</span><br><span class="line">  if(pHead1.val&lt;pHead2.val)&#123;</span><br><span class="line">    head  &#x3D; pHead1;</span><br><span class="line">    head.next &#x3D; Merge(pHead1.next,pHead2)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    head &#x3D; pHead2;</span><br><span class="line">    head.next &#x3D; Merge(pHead1,pHead2.next)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="1-打印二叉树-层次遍历"><a href="#1-打印二叉树-层次遍历" class="headerlink" title="1 打印二叉树(层次遍历)"></a>1 打印二叉树(层次遍历)</h2><h3 id="1-1-从上往下打印二叉树-层次遍历"><a href="#1-1-从上往下打印二叉树-层次遍历" class="headerlink" title="1.1 从上往下打印二叉树(层次遍历)"></a>1.1 从上往下打印二叉树(层次遍历)</h3><p><strong>题目</strong></p><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印</p><p><strong>思路</strong></p><ul><li>借助队列(先进先出)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* function TreeNode(x) &#123;</span><br><span class="line">    this.val &#x3D; x;</span><br><span class="line">    this.left &#x3D; null;</span><br><span class="line">    this.right &#x3D; null;</span><br><span class="line">&#125; *&#x2F;</span><br><span class="line">function PrintFromTopToBottom(root)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  var queue &#x3D; [];</span><br><span class="line">  var result &#x3D; []</span><br><span class="line">  if(root)&#123;</span><br><span class="line">    queue.push(root)</span><br><span class="line">    &#x2F;&#x2F;循环进入队列,直到队列为空</span><br><span class="line">    while(queue.length&gt;0)&#123;</span><br><span class="line">      var current &#x3D; queue.shift();</span><br><span class="line">      if(current.left)&#123;</span><br><span class="line">        queue.push(current.left)</span><br><span class="line">      &#125;</span><br><span class="line">      if(current.right)&#123;</span><br><span class="line">        queue.push(current.right)</span><br><span class="line">      &#125;</span><br><span class="line">      result.push(current.val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-把二叉树打印成多行"><a href="#1-2-把二叉树打印成多行" class="headerlink" title="1.2 把二叉树打印成多行"></a>1.2 把二叉树打印成多行</h3><p><strong>题目</strong></p><p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p><p><strong>思路</strong></p><ul><li>在单行打印的基础上设置变量当前行节点数和子节点数,并保存每行的暂存节点数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* function TreeNode(x) &#123;</span><br><span class="line">    this.val &#x3D; x;</span><br><span class="line">    this.left &#x3D; null;</span><br><span class="line">    this.right &#x3D; null;</span><br><span class="line">&#125; *&#x2F;</span><br><span class="line">function Print(pRoot)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  var queue &#x3D; [];</span><br><span class="line">  var result &#x3D; [];</span><br><span class="line">  &#x2F;&#x2F;保存当前行的元素</span><br><span class="line">  var tempArr&#x3D;[];</span><br><span class="line">  &#x2F;&#x2F;当前行的元素个数;</span><br><span class="line">  var currentNum &#x3D; 1;</span><br><span class="line">  &#x2F;&#x2F;子节点的个数</span><br><span class="line">  var childNums &#x3D; 0</span><br><span class="line">  if(pRoot)&#123;</span><br><span class="line">    queue.push(pRoot);</span><br><span class="line">    while(queue.length&gt;0)&#123;</span><br><span class="line">      let current &#x3D; queue.shift()</span><br><span class="line">      if(current.left)&#123;</span><br><span class="line">        queue.push(current.left)</span><br><span class="line">        childNums++</span><br><span class="line">      &#125;</span><br><span class="line">      if(current.right)&#123;</span><br><span class="line">        queue.push(current.right)</span><br><span class="line">        childNums++</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F;将当前去取出保存在resule</span><br><span class="line">      tempArr.push(current.val);</span><br><span class="line">      currentNum--;</span><br><span class="line">      &#x2F;&#x2F;当前行的个数为0表示已经遍历完当前行,将当前行改为下一行的childNums</span><br><span class="line">      if(currentNum&#x3D;&#x3D;&#x3D;0)&#123;</span><br><span class="line">        result.push(tempArr);</span><br><span class="line">        currentNum &#x3D; childNums;</span><br><span class="line">        childNums &#x3D; 0</span><br><span class="line">        &#x2F;&#x2F;置空保存下一行数据</span><br><span class="line">        tempArr&#x3D;[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-按之字形顺序打印二叉树"><a href="#1-3-按之字形顺序打印二叉树" class="headerlink" title="1.3 按之字形顺序打印二叉树"></a>1.3 按之字形顺序打印二叉树</h3><p><strong>题目</strong></p><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p><p><strong>分析</strong></p><ul><li>采用两个栈分别保存奇数行和偶数行</li><li>奇数从左到右</li><li>偶数从右到左</li><li>边出栈边保存打印顺序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* function TreeNode(x) &#123;</span><br><span class="line">    this.val &#x3D; x;</span><br><span class="line">    this.left &#x3D; null;</span><br><span class="line">    this.right &#x3D; null;</span><br><span class="line">&#125; *&#x2F;</span><br><span class="line">function Print(pRoot)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  var oddStack &#x3D; [];</span><br><span class="line">  var evenStack &#x3D; [];</span><br><span class="line">  var result &#x3D; [];</span><br><span class="line">  var tempt&#x3D; []</span><br><span class="line">  if(pRoot)&#123;</span><br><span class="line">    oddStack.push(pRoot)</span><br><span class="line">    while(oddStack.length&gt;0 || evenStack.length&gt;0)&#123;</span><br><span class="line">      while(oddStack.length&gt;0)&#123;</span><br><span class="line">        var current &#x3D; oddStack.pop();</span><br><span class="line">        tempt.push(current.val)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        if(current.left)&#123;</span><br><span class="line">          evenStack.push(current.left)</span><br><span class="line">        &#125;</span><br><span class="line">        if(current.right)&#123;</span><br><span class="line">          evenStack.push(current.right)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if(tempt.length&gt;0)&#123;</span><br><span class="line">        result.push(tempt);</span><br><span class="line">        tempt &#x3D; []</span><br><span class="line">      &#125;</span><br><span class="line">      while(evenStack.length&gt;0)&#123;</span><br><span class="line">         var current &#x3D; evenStack.pop();</span><br><span class="line">         tempt.push(current.val)</span><br><span class="line">         &#x2F;&#x2F;奇数层左子树先入</span><br><span class="line">         </span><br><span class="line">        if(current.right)&#123;</span><br><span class="line">          oddStack.push(current.right)</span><br><span class="line">        &#125;</span><br><span class="line">        if(current.left)&#123;</span><br><span class="line">          oddStack.push(current.left)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if(tempt.length&gt;0)&#123;</span><br><span class="line">        result.push(tempt);</span><br><span class="line">        tempt &#x3D; []</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><ul><li><p>哈希是通过哈希函数来进行映射检索地址,哈希是一种有效的检索技术,会出现同义词冲突</p></li><li><p>如何设计哈希函数以及如何避免冲突就是哈希表的常见问题。 好的哈希函数的选择有两条标准：</p><ul><li>1.简单并且能够快速计算</li><li>2.能够在址空间中获取键的均匀分布</li></ul></li></ul><p>当用到哈希表时我们通常是要开辟一个额外空间来记录一些计算过的值，同时我们又要在下一次计算的过程中快速检索到它们，例如上面提到的<strong>两数之和、三数之和</strong>等都利用了这种思想。</p><h2 id="1-最小的k个数"><a href="#1-最小的k个数" class="headerlink" title="1 最小的k个数"></a>1 最小的k个数</h2><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function GetLeastNumbers_Solution(input, k)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(!input||input.length&lt;k) return [];</span><br><span class="line">  var result  &#x3D; [];</span><br><span class="line">  input.sort((a,b)&#x3D;&gt;a-b)</span><br><span class="line">  result.push(...input.slice(0,k))</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>在上面的数组中，我们可以通过索引随机访问元素，但是在某些情况下，我们可能要限制数据的访问顺序，于是有了两种限制访问顺序的数据结构：栈（先进后出）、队列（先进先出）</p><h2 id="1-栈和队列的互相实现"><a href="#1-栈和队列的互相实现" class="headerlink" title="1 栈和队列的互相实现"></a>1 栈和队列的互相实现</h2><h3 id="1-1-用两个栈实现队列"><a href="#1-1-用两个栈实现队列" class="headerlink" title="1.1 用两个栈实现队列"></a>1.1 用两个栈实现队列</h3><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><p><strong>思路</strong></p><p><strong>栈1:</strong></p><p>用于入队列存储</p><p><strong>栈2:</strong></p><p>出队列时将栈1的数据依次出栈，并入栈到栈2中</p><p>栈2出栈即栈1的底部数据即队列要出的数据。</p><p><strong>注意:</strong></p><p>栈2为空才能补充栈1的数据，否则会打乱当前的顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义两个栈,一个用于进,一个用于出(先进先出)</span><br><span class="line">var stack1 &#x3D; [];</span><br><span class="line">var stack2 &#x3D; [];</span><br><span class="line">function push(element) &#123;</span><br><span class="line">  stack1.push(element)</span><br><span class="line">&#125;</span><br><span class="line">function pop() &#123;</span><br><span class="line">  &#x2F;&#x2F;判断stack2是不是为空,为空需要将statck1中的入栈在出栈</span><br><span class="line">  if (stack2.length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F;循环stack1不为空入栈</span><br><span class="line">    while (stack1.length &gt; 0) &#123;</span><br><span class="line">      stack2.push(stack1.pop());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return stack2.pop() || null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-用两个队列实现栈"><a href="#1-2-用两个队列实现栈" class="headerlink" title="1.2 用两个队列实现栈"></a>1.2 用两个队列实现栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 用两个队列实现栈(先进后出)</span><br><span class="line">var queue1 &#x3D; [];</span><br><span class="line">var queue2 &#x3D; [];</span><br><span class="line">function push(x) &#123;</span><br><span class="line">  if (queue1.length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F;后进的存储在队列的前面就会先出去</span><br><span class="line">    queue1.push(x);</span><br><span class="line">    while (queue2.length) &#123;</span><br><span class="line">      &#x2F;&#x2F; queue2从头取进queue1</span><br><span class="line">      queue1.push(queue2.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (queue2.length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">    queue2.push(x);</span><br><span class="line">    while (queue1.length) &#123;</span><br><span class="line">      &#x2F;&#x2F; queue2从头取进queue1</span><br><span class="line">      queue2.push(queue1.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function pop() &#123;</span><br><span class="line">  if (queue1.length !&#x3D;&#x3D; 0) &#123;</span><br><span class="line">    return queue1.shift();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return queue2.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-练习题-1"><a href="#2-练习题-1" class="headerlink" title="2 练习题"></a>2 练习题</h2><h3 id="2-1包含min函数的栈"><a href="#2-1包含min函数的栈" class="headerlink" title="2.1包含min函数的栈"></a>2.1包含min函数的栈</h3><p><strong>题目</strong></p><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））</p><p><strong>思路</strong></p><ul><li>定义两个栈,一个用于存储数据,一个用于存储最小值</li><li>每次进栈的元素和栈顶最小元素比较,将最小值存入</li><li>数据栈出栈,最小值也出栈</li><li>这样最小值的栈顶永远是当前栈的最小值</li></ul><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200619080114951.png" alt="image-20200619080114951"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var dataStack&#x3D;[]</span><br><span class="line">var minStack&#x3D;[]</span><br><span class="line">function push(node)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  dataStack.push(node)</span><br><span class="line">  &#x2F;&#x2F;最小值入栈</span><br><span class="line">  if(minStack.length&#x3D;&#x3D;&#x3D;0||node&lt;min())&#123;</span><br><span class="line">    minStack.push(node)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    minStack.push(min())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function pop()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 弹出的时候两个栈同时弹出,保证当前最小栈中始终是当前数据栈中的最小值</span><br><span class="line">  if(dataStack.length&gt;0)&#123;</span><br><span class="line">    minStack.pop();</span><br><span class="line">    return dataStack.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function top()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  var length &#x3D; dataStack.length;</span><br><span class="line">  if(length&gt;0)</span><br><span class="line">  return dataStack[length-1]</span><br><span class="line">&#125;</span><br><span class="line">function min()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;长度大于1,直接返回最小值</span><br><span class="line">  var length &#x3D; minStack.length;</span><br><span class="line">  if(length&gt;0)</span><br><span class="line">  return minStack[length-1]</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    push : push,</span><br><span class="line">    pop : pop,</span><br><span class="line">    top : top,</span><br><span class="line">    min : min</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-滑动窗口的最大值"><a href="#2-2-滑动窗口的最大值" class="headerlink" title="2.2 滑动窗口的最大值"></a>2.2 滑动窗口的最大值</h3><p><strong>题目</strong></p><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口 k 内的数字。滑动窗口每次只向右移动一位。 返回滑动窗口最大值。</p><p><strong>分析</strong></p><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200619093535324.png" alt="image-20200619093535324"></p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function maxInWindows(num, size)</span><br><span class="line">&#123;</span><br><span class="line">  if(!num || size&gt;num.length||size&lt;0) return []</span><br><span class="line">  &#x2F;&#x2F;定义变量保存当前值</span><br><span class="line">  var result&#x3D;[];</span><br><span class="line">  var max &#x3D; num[0];</span><br><span class="line">  var flag &#x3D; 0</span><br><span class="line">  for(var i&#x3D;0;i&lt;num.length;i++)&#123;</span><br><span class="line">    flag++;</span><br><span class="line">    &#x2F;&#x2F;将最大值保存在max中</span><br><span class="line">    if(num[i]&gt;max)&#123;</span><br><span class="line">      max &#x3D; num[i]</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag&#x3D;&#x3D;size)&#123;</span><br><span class="line">      result.push(max);</span><br><span class="line">      &#x2F;&#x2F;这里i回到窗口的起点,for后面有i++,开始位置时下一个起始位置</span><br><span class="line">      i &#x3D; i-size+1;</span><br><span class="line">      &#x2F;&#x2F;下一个位置为max</span><br><span class="line">      max&#x3D;num[i+1];</span><br><span class="line">      flag&#x3D;0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-栈的压入-弹出序列"><a href="#2-3-栈的压入-弹出序列" class="headerlink" title="2.3 栈的压入,弹出序列"></a>2.3 栈的压入,弹出序列</h3><p><strong>题目</strong></p><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><p><strong>思路</strong></p><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200619122146851.png" alt="image-20200619122146851"></p><ul><li>借助一个中间栈temp来完成</li><li>借助指针j-&gt;popV,i-&gt;pushV</li><li>当最后的元素等于popV时,j++</li><li>反之,pushV的[i]入栈temp,i++右移(前提是i&lt;pushV.length)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function IsPopOrder(pushV, popV)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;定义中间栈保存</span><br><span class="line">  var stack &#x3D; [];</span><br><span class="line">  &#x2F;&#x2F;分别指向pushV和popV(),开始遍历</span><br><span class="line">  var i&#x3D;0,j&#x3D;0;</span><br><span class="line">  while(j&lt;popV.length)&#123;</span><br><span class="line">    &#x2F;&#x2F;判断pop和stack[stack.length-1]</span><br><span class="line">    if(stack.length&gt;0&amp;&amp;stack[stack.length-1]&#x3D;&#x3D;popV[j])</span><br><span class="line">    &#123;</span><br><span class="line">      &#x2F;&#x2F;和最后元素相同stack出栈</span><br><span class="line">      stack.pop();</span><br><span class="line">      j++;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      if(i&#x3D;&#x3D;pushV.length)&#123;</span><br><span class="line">        return false</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        &#x2F;&#x2F;不相等见pushV[i]保存在stack中</span><br><span class="line">        stack.push(pushV[i++]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-数据流中的中位数"><a href="#2-4-数据流中的中位数" class="headerlink" title="2.4 数据流中的中位数"></a>2.4 数据流中的中位数</h3><p><strong>题目</strong></p><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。</p><p>如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用<code>Insert()</code>方法读取数据流，使用<code>GetMedian()</code>方法获取当前读取数据的中位数。</p><p><strong>思路</strong></p><ul><li><p>1.维护一个大顶堆，一个小顶堆，数据总数：</p><ul><li>小顶堆里的值全大于大顶堆里的；</li><li>2个堆个数的差值小于等于1</li></ul></li><li><p>2.当插入数字后数据总数为奇数时：使小顶堆个数比大顶堆多1；当插入数字后数据总数为偶数时，使大顶堆个数跟小顶堆个数一样。</p></li></ul><p>3.当总数字个数为奇数时，中位数就是小顶堆堆头；当总数字个数为偶数时，中位数数就是2个堆堆顶平均数</p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var arr &#x3D; []</span><br><span class="line">function Insert(num)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;将num放进数组zrr,在排序</span><br><span class="line">  arr.push(num);</span><br><span class="line">  arr.sort();</span><br><span class="line">&#125;</span><br><span class="line">function GetMedian()&#123;</span><br><span class="line">&#x2F;&#x2F; write code here</span><br><span class="line">  var len &#x3D; arr.length</span><br><span class="line">  if(len&#x3D;&#x3D;0) return 0</span><br><span class="line">  &#x2F;&#x2F;判断奇数还是偶数</span><br><span class="line">  if(len%2&#x3D;&#x3D;1)&#123;</span><br><span class="line">    return arr[Math.floor(len&#x2F;2)]</span><br><span class="line">  &#125;</span><br><span class="line">  if(len%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">    &#x2F;&#x2F;偶数是中间两位数相加除以&#x2F;2</span><br><span class="line">    return (arr[arr.length&#x2F;2]+arr[arr.length&#x2F;2-1])&#x2F;2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="1-练习题"><a href="#1-练习题" class="headerlink" title="1 练习题"></a>1 练习题</h2><h3 id="1-1-替换空格"><a href="#1-1-替换空格" class="headerlink" title="1.1 替换空格"></a>1.1 替换空格</h3><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function replaceSpace(str)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">   </span><br><span class="line">    &#x2F;&#x2F;str &#x3D; str.replace(&#x2F;\s&#x2F;g,&#39;%20&#39;)</span><br><span class="line">  str &#x3D; str.split(&#39; &#39;).join(&#39;%20&#39;)</span><br><span class="line">    return str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-正则表达式匹配"><a href="#1-2-正则表达式匹配" class="headerlink" title="1.2 正则表达式匹配"></a>1.2 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式匹配</a></h3><p><strong>题目</strong></p><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。 模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。 例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p><p><strong>注意</strong></p><ul><li>这里的*和点<code>.</code>的含义和正则表达式中一致</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;s, pattern都是字符串</span><br><span class="line">function match(s, pattern)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  reg &#x3D; new RegExp(&#39;^&#39;+pattern+&#39;$&#39;)</span><br><span class="line">  return reg.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-字符串的排列-动态规划-递归-字符串-有问题"><a href="#1-3-字符串的排列-动态规划-递归-字符串-有问题" class="headerlink" title="1.3 字符串的排列(动态规划,递归,字符串)?????(有问题)"></a>1.3 字符串的排列(动态规划,递归,字符串)?????(有问题)</h3><p><strong>题目</strong></p><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串<code>abc</code>,则打印出由字符<code>a,b,c</code>所能排列出来的所有字符串<code>abc,acb,bac,bca,cab</code>和<code>cba</code>。</p><p><strong>分析</strong></p><ul><li>通过回朔法(不断做决策)<strong>最后的跳出条件不是很懂</strong></li></ul><p><img src="/2020/06/06/%E5%89%91%E6%8C%87offer/image-20200619190137923.png" alt="image-20200619190137923"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 考察的是回溯法,全排列</span><br><span class="line">function Permutation(str) &#123;</span><br><span class="line">  &#x2F;&#x2F;定义数组保存不重复的字符串</span><br><span class="line">  const result &#x3D; []</span><br><span class="line">  if (str) &#123;</span><br><span class="line">    &#x2F;&#x2F;通过定义队列来保存当前元素中为添加的值</span><br><span class="line">    const queue &#x3D; str.split(&#39;&#39;);</span><br><span class="line">    &#x2F;&#x2F;递归开始决策树</span><br><span class="line">    PermutationCore(queue, result);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;按照字典进行排序</span><br><span class="line">  result.sort();</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br><span class="line">function PermutationCore(queue, result, temp &#x3D; &#39;&#39;, current &#x3D; &#39;&#39;) &#123;</span><br><span class="line">  &#x2F;&#x2F;当前的字符串和当前字符(当前字符添加到当前字符串)</span><br><span class="line">  current +&#x3D; temp;</span><br><span class="line">  &#x2F;&#x2F;如果当前队列&#x3D;0表明当前三个元素已经添加到current中保存</span><br><span class="line">  if (queue.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F;去重</span><br><span class="line">    if (!result.includes(current)) &#123;</span><br><span class="line">      result.push(current)</span><br><span class="line">    &#125;</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;通过循环遍历不同的元素作为下一个元素的情况</span><br><span class="line">  for (let i &#x3D; 0; i &lt; queue.length; i++) &#123;</span><br><span class="line">    &#x2F;&#x2F;取出当前字符temp(从图开始取,保存路径)</span><br><span class="line">    let temp &#x3D; queue.shift();</span><br><span class="line">    PermutationCore(queue, result, temp, current);</span><br><span class="line">    &#x2F;&#x2F;递归完成将当前元素入栈</span><br><span class="line">    queue.push(temp)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-翻转字符串"><a href="#1-4-翻转字符串" class="headerlink" title="1.4 翻转字符串"></a>1.4 翻转字符串</h3><p><strong>题目</strong></p><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串<code>&quot;I am a student.&quot;</code>，则输出<code>&quot;student. a am I&quot;</code>。</p><p><strong>思路</strong></p><ul><li>直接调用api</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function ReverseSentence(str) &#123;</span><br><span class="line">  if (str) &#123;</span><br><span class="line">    return str.split(&#39; &#39;).reverse().join(&#39; &#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  return &#39;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-左旋转字符串"><a href="#1-5-左旋转字符串" class="headerlink" title="1.5 左旋转字符串"></a>1.5 左旋转字符串</h3><p><strong>题目</strong></p><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function LeftRotateString(str, n) &#123;</span><br><span class="line">  &#x2F;&#x2F; write code here</span><br><span class="line">  if (str &amp;&amp; n!&#x3D;null) &#123;</span><br><span class="line">    &#x2F;&#x2F;字符串拼接并且进行截取str.length长度</span><br><span class="line">    return (str + str).slice(n, str.length + n)</span><br><span class="line">  &#125;</span><br><span class="line">  return &#39;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-字符流中第一个不重复的字符"><a href="#1-6-字符流中第一个不重复的字符" class="headerlink" title="1.6 字符流中第一个不重复的字符"></a>1.6 字符流中第一个不重复的字符</h3><p><strong>题目</strong></p><p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p><p><strong>分析</strong></p><ul><li>借助map来保存当前的值和次数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var map;</span><br><span class="line">&#x2F;&#x2F;Init module if you need</span><br><span class="line">function Init()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  map&#x3D;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Insert one char from stringstream</span><br><span class="line">function Insert(ch)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  if(map[ch])&#123;</span><br><span class="line">    map[ch]++</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    map[ch]&#x3D;1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;return the first appearence once char in current stringstream</span><br><span class="line">function FirstAppearingOnce()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  for(let item in map)&#123;</span><br><span class="line">    if(map[item]&#x3D;&#x3D;1)&#123;</span><br><span class="line">      return item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return &#39;#&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-表示数值的字符串"><a href="#1-7-表示数值的字符串" class="headerlink" title="1.7 表示数值的字符串"></a>1.7 表示数值的字符串</h3><p><strong>题目</strong></p><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。 例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p><p><strong>思路</strong></p><ul><li><p>正则表达式的解法</p></li><li><p>考虑所有的情况</p><ul><li>.只能出现数字、符号位、小数点、指数位</li><li>2.小数点，指数符号只能出现一次、且不能出现在开头结尾</li><li>3.指数位出现后，小数点不允许在出现</li><li>4.符号位只能出现在开头和指数位后面</li></ul></li></ul><p>正则表达式的解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;正则</span><br><span class="line">  &#x2F;&#x2F;[+-]?            -&gt; 正或负符号出现与否</span><br><span class="line">  &#x2F;&#x2F;\d*                 -&gt; 整数部分是否出现，如-.34 或 +3.34均符合</span><br><span class="line">  &#x2F;&#x2F;(\.\d+)?           -&gt; 如果出现小数点，那么小数点后面必须有数字；</span><br><span class="line">  &#x2F;&#x2F;                        否则一起不出现</span><br><span class="line">  &#x2F;&#x2F;([eE][+-]?\d+)?  -&gt; 如果存在指数部分，那么e或E肯定出现，+或-可以不出现，</span><br><span class="line">  &#x2F;&#x2F;                        紧接着必须跟着整数；或者整个部分都不出现</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.正则表达式的解法</span><br><span class="line">&#x2F;&#x2F;s字符串</span><br><span class="line">function isNumeric(s)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; write code here</span><br><span class="line">  &#x2F;&#x2F;通过匹配字符串match()返回的是数组,这里返回数组中的第一个符合正则表达式的子串[0]和字符串s相等结果</span><br><span class="line">  return s.match(&#x2F;[+-]?\d*(\.\d*)?([eE][+-]?\d+)?&#x2F;g)[0]&#x3D;&#x3D;&#x3D;s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.考虑所有的情况</span><br></pre></td></tr></table></figure><h1 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h1><h2 id="1-回溯算法"><a href="#1-回溯算法" class="headerlink" title="1 回溯算法"></a>1 回溯算法</h2><p><strong>解决一个回溯问题，实际上就是一个决策树的遍历过程</strong>。你只需要思考 3 个问题：</p><p>1、路径：也就是已经做出的选择。</p><p>2、选择列表：也就是你当前可以做的选择。</p><p>3、结束条件：也就是到达决策树底层，无法再做选择的条件。</p><h3 id="1-1-机器人的运动范围-回溯"><a href="#1-1-机器人的运动范围-回溯" class="headerlink" title="1.1 机器人的运动范围(回溯)"></a>1.1 <a href="https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&&tqId=11219&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">机器人的运动范围(回溯)</a></h3><p><strong>题目</strong></p><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。</p><p>例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><p><strong>思路</strong></p><h3 id="1-2-剪绳子-贪心算法"><a href="#1-2-剪绳子-贪心算法" class="headerlink" title="1.2 剪绳子(贪心算法)"></a>1.2 <a href="https://www.nowcoder.com/practice/57d85990ba5b440ab888fc72b0751bf8?tpId=13&&tqId=33257&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">剪绳子(贪心算法)</a></h3><p><strong>题目</strong></p><p>给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为k[1],…,k[m]。请问k[1]x…xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><h3 id="1-3-矩阵中的路径-回溯和DFS"><a href="#1-3-矩阵中的路径-回溯和DFS" class="headerlink" title="1.3 矩阵中的路径(回溯和DFS)"></a>1.3 <a href="https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc?tpId=13&&tqId=11218&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">矩阵中的路径(回溯和DFS)</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt; offer刷题分类汇总&lt;/p&gt;
    
    </summary>
    
    
      <category term="Data-Structure" scheme="https://sparkparis.github.io/categories/Data-Structure/"/>
    
    
      <category term="随笔" scheme="https://sparkparis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="offer" scheme="https://sparkparis.github.io/tags/offer/"/>
    
  </entry>
  
  <entry>
    <title>Vue-VueShop项目</title>
    <link href="https://sparkparis.github.io/2020/05/27/Vue-project-1/"/>
    <id>https://sparkparis.github.io/2020/05/27/Vue-project-1/</id>
    <published>2020-05-27T01:00:13.000Z</published>
    <updated>2020-06-02T15:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">vueshop项目是通过vue框架+elementui实现的后台管理系统的梳理,有源码和服务器端部署的访问网址<a id="more"></a><!-- TOC --><ul><li><a href="#项目前期知识点储备">项目前期知识点储备</a><ul><li><a href="#项目的搭建">项目的搭建</a></li></ul></li><li><a href="#项目知识点">项目知识点</a><ul><li><a href="#项目优化">项目优化</a><ul><li><a href="#生成打包报告">生成打包报告</a></li><li><a href="#为开发模式与发布模式指定不同的打包入口">为开发模式与发布模式指定不同的打包入口</a></li><li><a href="#通过-externals-加载外部-cdn-资源">通过 externals 加载外部 CDN 资源</a></li><li><a href="#路由懒加载httpsroutervuejsorgzhguideadvancedlazy-loadinghtml"><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_blank" rel="noopener">路由懒加载</a></a></li></ul></li><li><a href="#项目上线">项目上线</a><ul><li><a href="#通过node创建服务器">通过node创建服务器</a></li><li><a href="#gzip配置">gzip配置</a></li><li><a href="#https服务配置">https服务配置</a></li><li><a href="#使用pm2管理应用">使用pm2管理应用</a></li></ul></li></ul></li><li><a href="#小结">小结</a></li></ul><!-- /TOC --><p><a href="http://182.92.102.182/vueshop" target="_blank" rel="noopener">访问地址</a><br><a href="https://github.com/SparkParis/vue_shop" target="_blank" rel="noopener">前端源码</a><br><a href="https://github.com/SparkParis/vue_shop_server" target="_blank" rel="noopener">后端源码</a></p><h1 id="项目前期知识点储备"><a href="#项目前期知识点储备" class="headerlink" title="项目前期知识点储备"></a>项目前期知识点储备</h1><h2 id="项目的搭建"><a href="#项目的搭建" class="headerlink" title="项目的搭建"></a>项目的搭建</h2><ul><li>前端项目搭建</li></ul><img src="/2020/05/27/Vue-project-1/image-20200527094245389.png" alt="image-20200527094245389" style="zoom:50%;"><ul><li>github命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git checkout -p 分支名称&#x2F;&#x2F;创建新的分支并切换分支用于开发</span><br><span class="line">git branch &#x2F;&#x2F;查看分支</span><br><span class="line">git branch 分支名&#x2F;&#x2F;切换分支</span><br><span class="line">&lt;!-- 执行代码完成 --&gt;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#39;&#39;</span><br><span class="line">切换分支到master</span><br><span class="line">git checkout master</span><br><span class="line">&lt;!-- 合并分支 --&gt;</span><br><span class="line">git merge login</span><br><span class="line"></span><br><span class="line">&lt;!-- push --&gt;</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">&lt;!-- 切换到login分支,将分支上传 --&gt;</span><br><span class="line">git checkout login</span><br><span class="line">git push -u origin login</span><br></pre></td></tr></table></figure><h1 id="项目知识点"><a href="#项目知识点" class="headerlink" title="项目知识点"></a>项目知识点</h1><ul><li>电商项目概述</li></ul><img src="/2020/05/27/Vue-project-1/image-20200527091352331.png" alt="image-20200527091352331" style="zoom:50%;"><ul><li><p>项目概述</p><img src="/2020/05/27/Vue-project-1/image-20200527091436345.png" alt="image-20200527091436345" style="zoom:50%;"></li><li><p>电商后台管理系统的开发模式(前后端分离)</p><img src="/2020/05/27/Vue-project-1/image-20200527091544745.png" alt="image-20200527091544745" style="zoom:50%;"></li><li><p>项目使用到的技术栈</p><ul><li>jwt:<strong>JSON Web Token</strong>（JWT）是一个开放标准（RFC 7519），它定义了一种紧凑且独立的方式，可以在各方之间作为JSON对象安全地传输信息。此信息可以通过数字签名进行验证和信任.<ul><li>是目前最流行的跨域身份验证解决方案,携带token对信息进行加密操作.</li><li>不存在跨域是采用session作为身份的验证,存在卡余问题需要使用token的方式</li></ul></li><li><a href="https://www.jianshu.com/p/c148a3e9e39b" target="_blank" rel="noopener">Sequelize框架</a>:选择Node的*<em>ORM(Object Relational Mapping对象关系映射)框架</em>Sequelize<em>来操作数据库。这样,我们读写的都是JavaScript对象,</em>Sequelize<em>帮我们把对象变成数据库中的行。用</em>Sequelize*查询pets表</li></ul><img src="/2020/05/27/Vue-project-1/image-20200527091713717.png" alt="image-20200527091713717" style="zoom:80%;"></li><li><p>登录token采用jwt解决跨域访问</p><img src="/2020/05/27/Vue-project-1/1.png" alt="image-20200527091544745" style="zoom:50%;"></li></ul><h2 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h2><ul><li>项目优化<ul><li>生成打包报告</li><li>第三方库启用 CDN</li><li>Element-UI 组件按需加载</li><li>路由懒加载</li><li>首页内容定制<h3 id="生成打包报告"><a href="#生成打包报告" class="headerlink" title="生成打包报告"></a>生成打包报告</h3></li></ul></li><li>通过命令参数的形式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过 vue-cli 的命令选项可以生成打包报告</span><br><span class="line">&#x2F;&#x2F; --report 选项可以生成 report.html 以帮助分析包内容</span><br><span class="line">vue-cli-service build --report</span><br></pre></td></tr></table></figure></li><li>通过可视化的UI面板直接查看报告（推荐）<br>在可视化的UI面板中，通过控制台和分析面板，可以方便地看到项目中所存在的问题。<h3 id="为开发模式与发布模式指定不同的打包入口"><a href="#为开发模式与发布模式指定不同的打包入口" class="headerlink" title="为开发模式与发布模式指定不同的打包入口"></a>为开发模式与发布模式指定不同的打包入口</h3></li><li>在根目录中新建vue.config.js文件,配置见<a href="https://cli.vuejs.org/zh/config/#vue-config-js" target="_blank" rel="noopener">链接</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vue.config.js</span><br><span class="line">&#x2F;&#x2F; 这个文件中，应该导出一个包含了自定义配置选项的对象</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F; 选项...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为开发模式和打包模式设置不用的打包入口<ul><li>Vue项目的开发模式与发布模式，共用同一个打包的入口文件（即 src/main.js）。为了将项目的开发过程与发布过程分离，我们可以为两种模式，各自指定打包的入口文件，即：<ul><li>① 开发模式的入口文件为 src/main-dev.js</li><li>② 发布模式的入口文件为 src/main-prod.js</li></ul></li></ul></li><li>configureWebpack 和 chainWebpack<ul><li>在 vue.config.js 导出的配置对象中，新增 configureWebpack 或 chainWebpack 节点，来自定义 webpack的打包配置。</li><li><a href="https://cli.vuejs.org/zh/guide/webpack.html#webpack-%E7%9B%B8%E5%85%B3" target="_blank" rel="noopener">二者的差异</a><ul><li>① chainWebpack 通过链式编程的形式，来修改默认的 webpack 配置</li><li>② configureWebpack 通过操作对象的形式，来修改默认的 webpack 配置<h3 id="通过-externals-加载外部-CDN-资源"><a href="#通过-externals-加载外部-CDN-资源" class="headerlink" title="通过 externals 加载外部 CDN 资源"></a>通过 externals 加载外部 CDN 资源</h3></li></ul></li></ul></li><li>CDN资源网站<ul><li><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">https://www.jsdelivr.com/</a></li><li><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">bootcdn</a></li></ul></li><li>默认情况下，通过 import 语法导入的第三方依赖包，最终会被打包合并到同一个文件中，从而导致打包成功后，单文件体积过大的问题。为了解决上述问题，可以通过 webpack 的 externals 节点，来配置并加载外部的 CDN 资源。凡是声明在<br>externals 中的第三方依赖包，都不会被打包。</li><li><strong>注意:这里设置router会报错,会报重复定义,解决方案删除router</strong></li><li>externals代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line"> chainWebpack: config &#x3D;&gt; &#123;</span><br><span class="line">   &#x2F;&#x2F;生产模式</span><br><span class="line"> config.when(process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;, config &#x3D;&gt; &#123;</span><br><span class="line"> config.entry(&#39;app&#39;).clear().add(&#39;.&#x2F;src&#x2F;main-prod.js&#39;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;externals配置,是在开发模式中配置</span><br><span class="line">  config.set(&#39;externals&#39;, &#123;</span><br><span class="line">  vue: &#39;Vue&#39;,</span><br><span class="line">  &#39;vue-router&#39;: &#39;VueRouter&#39;,</span><br><span class="line">  axios: &#39;axios&#39;,</span><br><span class="line">  lodash: &#39;_&#39;,</span><br><span class="line">  echarts: &#39;echarts&#39;,</span><br><span class="line">  nprogress: &#39;NProgress&#39;,</span><br><span class="line">  &#39;vue-quill-editor&#39;: &#39;VueQuillEditor&#39;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line">  &#x2F;&#x2F;生产模式</span><br><span class="line">  config.when(process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;development&#39;, config &#x3D;&gt; &#123;</span><br><span class="line">  config.entry(&#39;app&#39;).clear().add(&#39;.&#x2F;src&#x2F;main-dev.js&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意:在引入CDN进行配置的过程中在生成模式下配置,开发模式下还是使用下载的插件等</span><br></pre></td></tr></table></figure></li><li>同时，需要在 public/index.html 文件的头部，添加如下的 CDN 资源引用,注意引用的先后顺序,vue放在最前面,elementui插件时依赖于vue否则会报错<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- nprogress 的样式表文件 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;nprogress&#x2F;0.2.0&#x2F;nprogress.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- 富文本编辑器 的样式表文件 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;quill&#x2F;1.3.4&#x2F;quill.core.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;quill&#x2F;1.3.4&#x2F;quill.snow.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;quill&#x2F;1.3.4&#x2F;quill.bubble.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- element-ui 的样式表文件 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;element-ui&#x2F;2.8.2&#x2F;themechalk&#x2F;index.css&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;js</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue&#x2F;2.5.22&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;vue-router&#x2F;3.0.1&#x2F;vue-router.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;axios&#x2F;0.18.0&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;lodash.js&#x2F;4.17.11&#x2F;lodash.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;echarts&#x2F;4.1.0&#x2F;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;nprogress&#x2F;0.2.0&#x2F;nprogress.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- 富文本编辑器的 js 文件 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;quill&#x2F;1.3.4&#x2F;quill.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue-quill-editor@3.0.4&#x2F;dist&#x2F;vue-quill-editor.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- element-ui 的 js 文件 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;element-ui&#x2F;2.8.2&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_blank" rel="noopener">路由懒加载</a></h3>项目在被构建的时候js代码非常大,可以在组件需要加载的时候在加载组件换件服务器的压力</li><li>使用步骤<ul><li>① 安装 @babel/plugin-syntax-dynamic-import 包。</li><li>② 在 babel.config.js 配置文件中声明该插件。</li><li>③ 将路由改为按需加载的形式，示例代码如下：这里返回的是proomise对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const Foo &#x3D; () &#x3D;&gt; import(&#x2F;* webpackChunkName: &quot;group-foo&quot; *&#x2F; &#39;.&#x2F;Foo.vue&#39;)</span><br><span class="line">const Bar &#x3D; () &#x3D;&gt; import(&#x2F;* webpackChunkName: &quot;group-foo&quot; *&#x2F; &#39;.&#x2F;Bar.vue&#39;)</span><br><span class="line">const Baz &#x3D; () &#x3D;&gt; import(&#x2F;* webpackChunkName: &quot;group-boo&quot; *&#x2F; &#39;.&#x2F;Baz.vue&#39;)</span><br></pre></td></tr></table></figure><h2 id="项目上线"><a href="#项目上线" class="headerlink" title="项目上线"></a>项目上线</h2></li></ul></li><li>项目上线的相关配置<ul><li>通过 node 创建 web 服务器。(通过nginx代理服务器也可以解决)</li><li>开启 gzip 配置。</li><li>配置 https 服务。</li><li>使用 pm2 管理应用。<h3 id="通过node创建服务器"><a href="#通过node创建服务器" class="headerlink" title="通过node创建服务器"></a>通过node创建服务器</h3>创建 node 项目，并安装 express，通过 express 快速创建 web 服务器，将 vue 打包生成的 dist 文件夹，托管为静态资源即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line">&#x2F;&#x2F; 创建 web 服务器</span><br><span class="line">const app &#x3D; express()</span><br><span class="line">&#x2F;&#x2F; 托管静态资源</span><br><span class="line">app.use(express.static(&#39;.&#x2F;dist&#39;))</span><br><span class="line">&#x2F;&#x2F; 启动 web 服务器</span><br><span class="line">app.listen(80, () &#x3D;&gt; &#123;</span><br><span class="line"> console.log(&#39;web server running at http:&#x2F;&#x2F;127.0.0.1&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="gzip配置"><a href="#gzip配置" class="headerlink" title="gzip配置"></a>gzip配置</h3></li></ul></li><li>使用 gzip 可以减小文件体积，使传输速度更快,② 可以通过服务器端使用 Express 做 gzip 压缩。其配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装相应包</span><br><span class="line">npm install compression -S</span><br><span class="line">&#x2F;&#x2F; 导入包</span><br><span class="line">const compression &#x3D; require(&#39;compression&#39;);</span><br><span class="line">&#x2F;&#x2F; 启用中间件</span><br><span class="line">app.use(compression());</span><br></pre></td></tr></table></figure><h3 id="https服务配置"><a href="#https服务配置" class="headerlink" title="https服务配置"></a>https服务配置</h3></li><li>传统的 HTTP 协议传输的数据都是明文，不安全,采用 HTTPS 协议对传输的数据进行了加密处理，可以防止数据被中间人窃取，使用更安全</li><li>申请 SSL 证书（<a href="https://freessl.org）" target="_blank" rel="noopener">https://freessl.org）</a><ul><li>① 进入 <a href="https://freessl.cn/" target="_blank" rel="noopener">https://freessl.cn/</a> 官网，输入要申请的域名并选择品牌。</li><li>② 输入自己的邮箱并选择相关选项。</li><li>③ 验证 DNS（在域名管理后台添加 TXT 记录）。</li><li>④ 验证通过之后，下载 SSL 证书（ full_chain.pem 公钥；private.key 私钥）。</li></ul></li><li>在后台项目中导入证书<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const https &#x3D; require(&#39;https&#39;);</span><br><span class="line"> const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"> const options &#x3D; &#123;</span><br><span class="line"> cert: fs.readFileSync(&#39;.&#x2F;full_chain.pem&#39;),</span><br><span class="line"> key: fs.readFileSync(&#39;.&#x2F;private.key&#39;)</span><br><span class="line"> &#125;</span><br><span class="line"> https.createServer(options, app).listen(443);</span><br></pre></td></tr></table></figure><h3 id="使用pm2管理应用"><a href="#使用pm2管理应用" class="headerlink" title="使用pm2管理应用"></a>使用pm2管理应用</h3></li><li>在服务器中安装 pm2：npm i pm2 -g</li><li>启动项目：pm2 start 脚本 –name 自定义名称</li><li>查看运行项目：pm2 ls</li><li>重启项目：pm2 restart 自定义名称</li><li>停止项目：pm2 stop 自定义名称</li><li>删除项目：pm2 delete 自定义名称</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>1.css中居中显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">position: absolute;                                                            </span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;   </span><br><span class="line">  transform: translate(-50%, -50%);,图片移动自身的的一半</span><br></pre></td></tr></table></figure><p>2.flex弹性布局,设置内容位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: flex;</span><br><span class="line">  &#x2F;&#x2F; 设置弹性布局,内容尾部对齐</span><br><span class="line">  justify-content: flex-end;</span><br></pre></td></tr></table></figure><p>3.element-ui中的form</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; form默认box-sizing:content-box(以内容为界限调整布局),这里设置为以边框为主</span><br><span class="line">  padding: 0 20px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br></pre></td></tr></table></figure><p>4.表单验证:注意是给form和item来添加属性prop和rules</p><p>5.elementui中组件名称就是类名,可以直接拿过来设置属性     </p><p>6.绑定变量需要给属性添加动态绑定</p><p>7.绑定属性的true/false也要动态绑定</p><p>8.页面中创建的子路由显示home中的main部分</p><p>9.二级路由放置位置的理解:</p><ul><li><p>路由的方式使用组件:二级路由显示位置 ,注意router-view是路由跳转的视图位置,在router的index.js中的结构目录决定的,当子路由放在哪个一级组件的下面,哪个一级组件下放router-view来展示一级组件对应的二级组件对应路由的位置<br>所以在一级组件中放置的router-view对应的是index.js中的最外层的路由放置的位置<br>各个子组件中的router-view是各个一级组件下放置的children下的子组件位置</p></li><li><p>局部组件的使用:当直接使用局部封装的组件的时候,才需要将导入的.vue文件插入到父组件的对应位置(通过组件名的方式)</p></li><li><p>以上两种都需要将组件导入到对应的父组件中并且放在components中注册</p></li></ul><p>10.elementui中ele-menu在点击的时候会默认跳转到点击的item的index的位置,在对表单的路由设置的时候可以开启menu的router属性,在需要路由跳转的位置将index的值设置为路由跳转的值就可以实现路由的跳转<br>同时如果需要修改点击对应的按钮就显示高亮的问题,可以使用menu的default-index,通过sessionStorage将当前的点击的index值保存起来,每次点击的时候直接赋值给data中的变量,根据data中的变量来显示当前保存的保存</p><p>11.elementui中提供栅格系统layout来设置空间的宽和高</p><p>12.作用域插槽中,可以通过scope.row获取当前行的数据</p><p>13.设置处置居中的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.vcenter&#123;</span><br><span class="line"></span><br><span class="line">display:flex</span><br><span class="line">align-item:center</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14.vue-table-with-tree-grid插件来实现tree table</p><p>15.数组和字符串的转化<br>数组-&gt;字符串<br>arr.join(‘ ‘);<br>字符串-&gt;数组<br>str.split(‘,’)</p><p>16.请求参数的封装会导致params参数不能及时拼接到axios的url中,问题有待解决<a href="https://blog.csdn.net/weixin_44827421/article/details/100060163" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44827421/article/details/100060163</a></p><p>17.ES6中新增的字符串补全的方法<br>padStart(字符串个数,要不的数字) 用于头部补全；<br>padEnd() 用于尾部补全。<br>let strS = String(s).padStart(2, ‘0’)</p><p>18.富文本编辑器开发时依赖Vue-Quill-Editor</p><p>npm install vue-quill-editor –save</p><p>19.数据类型转换出现问题:解决方案:通过深拷贝的方式lodash工具包的使用,开发以依赖</p><p>20.级联选择器在使用中el-cascader,点击级联选择器之后是一个数组<code>[]</code>,所以在保存当前选择的时候定义为数组[]</p><p>21.el中timeline在2.6版本之后才有</p><p>22.通过echarts框架来绘制报表<a href="https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts" target="_blank" rel="noopener">https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts</a></p><p>23.通过nprogress为自己的项目添加页面加载的进度条<br>使用在请求拦截和响应拦截中</p><p>24.打包优化过程中使用babel-plugin-transform-remove-console插件删除代码中console优化打包</p><p>25.vue.config.js文件中可以设置webpack的配置,设置webpack的打包配置有两种方式</p><ul><li>configureWebpack节点是用来定义webpack的打包配置,通过操作dom对象的形式修改默认的webpack设置</li><li>chainWebpack链式打包.通过链式编程的形式来修改默认的webpack配置</li><li>二者区别在于:二者的作用相同</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
vueshop项目是通过vue框架+elementui实现的后台管理系统的梳理,有源码和服务器端部署的访问网址
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="vue" scheme="https://sparkparis.github.io/tags/vue/"/>
    
      <category term="elementui" scheme="https://sparkparis.github.io/tags/elementui/"/>
    
      <category term="vuex" scheme="https://sparkparis.github.io/tags/vuex/"/>
    
      <category term="axios" scheme="https://sparkparis.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Centos远程服务器搭建和环境部署</title>
    <link href="https://sparkparis.github.io/2020/05/26/remoteconfig/"/>
    <id>https://sparkparis.github.io/2020/05/26/remoteconfig/</id>
    <published>2020-05-26T06:15:26.000Z</published>
    <updated>2020-09-13T02:13:49.796Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">远程服务器centos上nginx的部署与使用,踩坑记录,mysql数据库安装与使用,pm2的安装和使用,mongodb安装<a id="more"></a><!-- TOC --><ul><li><a href="#centos7远程服务器部署nginx">centos7远程服务器部署Nginx</a><ul><li><a href="#nginx安装和使用">nginx安装和使用</a><ul><li><a href="#wget方式安装">wget方式安装</a></li><li><a href="#使用">使用</a></li><li><a href="#卸载">卸载</a></li></ul></li><li><a href="#nginx安装踩坑">nginx安装踩坑</a><ul><li><a href="#图片资源403">图片资源403</a></li><li><a href="#nginx-error-open-＂usrlocalnginxlogsnginxpid">Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid</a></li><li><a href="#nginx配置vue-nginx报403问题的解决方法">nginx配置Vue nginx报403问题的解决方法</a></li><li><a href="#centos7-ngxin启动失败job-for-nginxservice-failed80端口被占用的解决办法">centos7 ngxin启动失败：Job for nginx.service failed（80端口被占用的解决办法）</a></li></ul></li><li><a href="#nginx在同一个端口下部署多个vue项目">nginx在同一个端口下部署多个vue项目</a></li></ul></li><li><a href="#centos远程服务器开启端口防火墙的使用">centos远程服务器开启端口/防火墙的使用</a></li><li><a href="#centos7上mysql安装和使用httpszhuanlanzhihucomp96474785"><a href="https://zhuanlan.zhihu.com/p/96474785" target="_blank" rel="noopener">centos7上mysql安装和使用</a></a><ul><li><a href="#安装和使用">安装和使用</a></li><li><a href="#mysql常用命令">mysql常用命令</a></li></ul></li><li><a href="#pm2管理node后台运行">pm2管理node后台运行</a></li><li><a href="#mongodb数据库安装httpsitjhnet20160711centos-install-mongodb"><a href="https://itjh.net/2016/07/11/centos-install-mongodb/" target="_blank" rel="noopener">mongodb数据库安装</a></a></li></ul><!-- /TOC --><h1 id="centos7远程服务器部署Nginx"><a href="#centos7远程服务器部署Nginx" class="headerlink" title="centos7远程服务器部署Nginx"></a>centos7远程服务器部署Nginx</h1><ul><li>服务器端的选择和购买配置见 <a href="http://www.wdhhh.cn/blogbytype/17" target="_blank" rel="noopener">这位小王博主</a><h2 id="nginx安装和使用"><a href="#nginx安装和使用" class="headerlink" title="nginx安装和使用"></a>nginx安装和使用</h2><h3 id="wget方式安装"><a href="#wget方式安装" class="headerlink" title="wget方式安装"></a>wget方式安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local</span><br><span class="line">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.13.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.13.2.tar.gz</span><br><span class="line">cd nginx-1.13.2</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3></li><li>没有进行全局配置的情况下使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br><span class="line">.&#x2F;nginx</span><br><span class="line">.&#x2F;nginx -s stop</span><br><span class="line">.&#x2F;nginx -s reload</span><br><span class="line">.&#x2F;nginx -s quit</span><br></pre></td></tr></table></figure></li><li>将nginx添加到全局path中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim  ~&#x2F;.bash_profile</span><br><span class="line">&#x2F;&#x2F;在文件夹最后添加nginx启动的路径</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</span><br><span class="line">&#x2F;&#x2F;保存之后执行以下立即生效</span><br><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>此时可以直接使用nginx来操作代理服务器nginx</li><li>nginx命令<ul><li>开启<code>nginx</code></li><li>关闭 <code>nginx -s stop</code> <code>nginx -s quit</code></li><li>重启<code>nginx -s reload</code></li><li>查看nginx进程 <code>ps aux|grep nginx</code></li><li>查看nginx启动是否成功<code>nginx -t</code></li><li>配置nginx <code>vim /usr/local/nginx/conf/nginx.conf</code>每次修改完配置都要重新启动</li></ul></li><li>其他命令<ul><li>查看当前运行的进程和对应的端口号<code>netstat -tpnul</code></li><li>杀死指定进程端口号 <code>kill -9 端口号用空格分开</code></li></ul></li><li>在nginx.conf中的端口必须在远程服务器端开放端口外部才能访问(设置见第二部分)</li><li>开机自启动<br><a href="https://www.cnblogs.com/piscesLoveCc/p/5867900.html" target="_blank" rel="noopener">链接</a><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3></li><li>删除nginx相关文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  rm -rf &#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">$ rm -rf &#x2F;var&#x2F;log&#x2F;nginx</span><br><span class="line">$ rm -rf &#x2F;var&#x2F;temp&#x2F;nginx</span><br></pre></td></tr></table></figure></li><li>查找nginx<code>whereis nginx</code></li><li><code>find nginx</code></li></ul><h2 id="nginx安装踩坑"><a href="#nginx安装踩坑" class="headerlink" title="nginx安装踩坑"></a>nginx安装踩坑</h2><h3 id="图片资源403"><a href="#图片资源403" class="headerlink" title="图片资源403"></a>图片资源403</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将nginx.conf文件第一行修改为</span><br><span class="line">user root</span><br></pre></td></tr></table></figure><h3 id="Nginx-error-open-＂-usr-local-Nginx-logs-Nginx-pid"><a href="#Nginx-error-open-＂-usr-local-Nginx-logs-Nginx-pid" class="headerlink" title="Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid"></a>Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><ul><li><p>在nginx的logs文件下生成nginx.pid文件</p><h3 id="nginx配置Vue-nginx报403问题的解决方法"><a href="#nginx配置Vue-nginx报403问题的解决方法" class="headerlink" title="nginx配置Vue nginx报403问题的解决方法"></a>nginx配置Vue nginx报403问题的解决方法</h3></li><li><p>解决打开nginx.conf配置中nginx创建索引的配置<code>autoindex on;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;manager &#123;</span><br><span class="line">  autoindex on;</span><br><span class="line">  alias   &#x2F;home&#x2F;xxxx&#x2F;Project&#x2F;vue&#x2F;dist;</span><br><span class="line">  index   index.html;</span><br><span class="line">  try_files   $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><h3 id="centos7-ngxin启动失败：Job-for-nginx-service-failed（80端口被占用的解决办法）"><a href="#centos7-ngxin启动失败：Job-for-nginx-service-failed（80端口被占用的解决办法）" class="headerlink" title="centos7 ngxin启动失败：Job for nginx.service failed（80端口被占用的解决办法）"></a>centos7 ngxin启动失败：Job for nginx.service failed（80端口被占用的解决办法）</h3></li><li><p>查看当前在运行的进程<code>netstat -tpnul</code></p></li><li><p>杀死80端口占用的进程 <code>kill -9 加进程ID</code></p></li><li><p>查看httpd正在运行的进程<code>ps aux |grep httpd</code></p></li><li><p>或者直接去修改端口号</p></li></ul><p><strong>注意:nginx详细知识点见<a href="https://juejin.im/post/5cdd4d3ee51d456e8240ddca#heading-3" target="_blank" rel="noopener">链接</a></strong></p><h2 id="nginx在同一个端口下部署多个vue项目"><a href="#nginx在同一个端口下部署多个vue项目" class="headerlink" title="nginx在同一个端口下部署多个vue项目"></a>nginx在同一个端口下部署多个vue项目</h2><ul><li>参考链接<ul><li><a href="https://wintc.top/article/29" target="_blank" rel="noopener">Vue项目打包部署总结</a></li><li><a href="https://www.cnblogs.com/lwdmaib/p/12500213.html" target="_blank" rel="noopener">nginx 部署vue 以及同一端口下部署监听多个vue 项目</a></li></ul></li><li>具体使用<ul><li>vue项目打包需要设置路径<ul><li>在vue.config.js中设置(项目是在vuecli4.3中),其他版本的需要换一下属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">publicPath: &#96;&#x2F;vueshop&#96;,  &#x2F;&#x2F; 打包后的文件路径</span><br><span class="line">outputDir: &#96;dist&#x2F;vueshop&#96;, &#x2F;&#x2F; 打包文件放置在dist文件夹下的vueshop文件夹</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在路由router-&gt;index.js中修改路由的base,注意这里要和输出的path设置一致,这样在打包之后的访问路径<a href="http://xxx:8080/vueshop/" target="_blank" rel="noopener">http://xxx:8080/vueshop/</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  base: &#39;&#x2F;vueshop&#39;,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>在nginx.conf配置文件中设置如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.这里需要设置为off,否则会报错路径问题</span><br><span class="line"> sendfile        off;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;2. 根路径设置</span><br><span class="line">        root   &#x2F;home&#x2F;project&#x2F;dist;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;3. vue项目1</span><br><span class="line">        location &#x2F;vueshop &#123;</span><br><span class="line">            &#x2F;&#x2F;4.创建索引配置打开</span><br><span class="line">            autoindex on;</span><br><span class="line">            &#x2F;&#x2F;5.打包路径的重命名,注意vueshop不要加&#x2F;,路径会拼接location后面的路径</span><br><span class="line">            alias  &#x2F;home&#x2F;project&#x2F;dist&#x2F;vueshop;</span><br><span class="line">           &#x2F;&#x2F;6. $uri&#x2F;后面不能再接文件夹,访问不到index</span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;vue项目2</span><br><span class="line">        location &#x2F;mall &#123;</span><br><span class="line">          &#x2F;&#x2F;创建索引的一定打开,会报403错误</span><br><span class="line">            autoindex on;</span><br><span class="line">            alias  &#x2F;home&#x2F;project&#x2F;dist&#x2F;mall;</span><br><span class="line">           </span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="centos远程服务器开启端口-防火墙的使用"><a href="#centos远程服务器开启端口-防火墙的使用" class="headerlink" title="centos远程服务器开启端口/防火墙的使用"></a>centos远程服务器开启端口/防火墙的使用</h1><ul><li>开放端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开放80端口</span><br><span class="line">sudo firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line"># 查看开放的端口号</span><br><span class="line">sudo firewall-cmd --zone&#x3D;public --list-ports</span><br><span class="line"># 重启防火墙</span><br><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></li><li>关闭防火墙(外网无法访问时，记得关闭防火墙↓或放开外部访问端口↑)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看防火墙状态</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line">#关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">#禁止防火墙开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h1 id="centos7上mysql安装和使用"><a href="#centos7上mysql安装和使用" class="headerlink" title="centos7上mysql安装和使用"></a><a href="https://zhuanlan.zhihu.com/p/96474785" target="_blank" rel="noopener">centos7上mysql安装和使用</a></h1><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2></li><li>安装<ul><li><code>yum list installed | grep mysql</code> #检查系统是否自带msql</li><li><code>yum -y remove 上一步内容</code> #删除上一步检查出的内容</li><li><code>wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm</code>下载mysql的yum源</li><li><code>rpm -ivh mysql-community-release-el6-5.noarch.rpm</code></li><li><code>yum install mysql-community-server</code> #安装mysql 一路y</li><li><code>chkconfig --list | grep mysqld</code>#检查mysql是否开机启动</li><li><code>chkconfig mysqld on</code>#没有设置开机启动</li><li><code>service mysqld start</code>启动mysql服务</li></ul></li><li>设置mysql<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. mysql -u root -p 进入mysql</span><br><span class="line">2.mysql&gt; use mysql;</span><br><span class="line">3.mysql&gt; update user set password&#x3D;PASSWORD(&quot;123456&quot;) where User&#x3D;&#39;root&#39;;#设置用户密码</span><br><span class="line">4.mysql&gt; flush privileges;#刷新</span><br><span class="line">5.&gt;mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;#远程授权</span><br><span class="line">6.&gt;mysql&gt; flush privileges;</span><br><span class="line">7.&gt;mysql&gt; exit#退出</span><br></pre></td></tr></table></figure></li><li>开启防火墙<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.firewall-cmd --list-ports#查看防火墙开启的端口，mysql默认3306</span><br><span class="line">2.firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanent #如果没有添加3306</span><br><span class="line">3.systemctl stop firewalld.service #停止防火墙</span><br><span class="line">4.systemctl restart firewalld.service #重启防火墙</span><br><span class="line">5.firewall-cmd --list-ports #检查3306是否开启</span><br></pre></td></tr></table></figure></li><li>服务器安全组开启<br>云服务器厂商都提供自设安全组，当需要开放端口时，需要安全组设置<br>然后就可以远程连接数据库<h2 id="mysql常用命令"><a href="#mysql常用命令" class="headerlink" title="mysql常用命令"></a>mysql常用命令</h2></li><li>开启<code>service mysql start</code></li><li>关闭<code>service mysql stop</code></li><li>重启<code>service mysql restart</code></li><li>登录<ul><li>密码明文<br>语法：<code>mysql -u 用户名 -p用户密码</code><br>举例：<code>mysql -u root -p123456</code></li><li>密码密文<br>　　语法：<code>mysql -u用户名 -p+回车，然后输入密码</code></li></ul></li></ul><p>　　举例：<code>mysql -uroot -p</code>　</p><ul><li><p>修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD命令（需登录）</span><br><span class="line">　　语法：mysql&gt; set password for 用户名@localhost &#x3D; password(&#39;新密码&#39;);</span><br><span class="line"></span><br><span class="line">　　举例：mysql&gt;set password for root@localhost &#x3D; password(&#39;123456&#39;);</span><br></pre></td></tr></table></figure></li><li><p>常用操作</p><ul><li><p>显示数据库列表<code>show databases;</code></p></li><li><p>创建、删除数据库</p><ul><li><p>创建:<code>create database 数据库名;</code></p></li><li><p><code>drop database 数据库名;</code></p></li></ul></li><li><p>显示库中的数据表<br>　　<code>use mysql;</code><br>　　<code>show tables;</code></p></li><li><p>显示数据表结构<br>　　describe 数据表名;</p></li></ul></li><li><p>通过 sql 文件导入数据库</p><ul><li><code>mysql -u用户名 -p密码 &lt; 导入路径</code></li><li>或者进入到数据库中通过source导入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码</span><br><span class="line">use 数据库名称</span><br><span class="line">source sql文件路径&#x2F;xx.sql</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="pm2管理node后台运行"><a href="#pm2管理node后台运行" class="headerlink" title="pm2管理node后台运行"></a>pm2管理node后台运行</h1><ul><li>在服务器中安装 pm2：npm i pm2 -g</li><li>启动项目：pm2 start 脚本 –name 自定义名称</li><li>查看运行项目：pm2 ls</li><li>重启项目：pm2 restart 自定义名称</li><li>停止项目：pm2 stop 自定义名称</li><li>删除项目：pm2 delete 自定义名称</li></ul><h1 id="mongodb数据库安装"><a href="#mongodb数据库安装" class="headerlink" title="mongodb数据库安装"></a><a href="https://itjh.net/2016/07/11/centos-install-mongodb/" target="_blank" rel="noopener">mongodb数据库安装</a></h1>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
远程服务器centos上nginx的部署与使用,踩坑记录,mysql数据库安装与使用,pm2的安装和使用,mongodb安装
    
    </summary>
    
    
      <category term="Linux&amp;Config" scheme="https://sparkparis.github.io/categories/Linux-Config/"/>
    
    
      <category term="mongodb" scheme="https://sparkparis.github.io/tags/mongodb/"/>
    
      <category term="随笔" scheme="https://sparkparis.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="mysql" scheme="https://sparkparis.github.io/tags/mysql/"/>
    
      <category term="nginx" scheme="https://sparkparis.github.io/tags/nginx/"/>
    
      <category term="node" scheme="https://sparkparis.github.io/tags/node/"/>
    
      <category term="centos7" scheme="https://sparkparis.github.io/tags/centos7/"/>
    
  </entry>
  
  <entry>
    <title>Vue-supermall</title>
    <link href="https://sparkparis.github.io/2020/05/19/Vue-project/"/>
    <id>https://sparkparis.github.io/2020/05/19/Vue-project/</id>
    <published>2020-05-18T16:02:46.000Z</published>
    <updated>2020-06-02T10:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">通过vuecli3搭建商城项目,并完善了项目功能效果,通过nginx代理服务器成功部署在服务器端有效果展示和源码实现<a id="more"></a><!-- TOC --><ul><li><a href="#1-项目的创建和git的托管">1 项目的创建和git的托管</a></li><li><a href="#2-基本设置">2 基本设置</a><ul><li><a href="#21-目录结构">2.1 目录结构</a></li><li><a href="#22-css初始化化和全局样式设置">2.2 css初始化化和全局样式设置</a></li><li><a href="#24-配置vueconfigjs和editorconfig">2.4 配置vue.config.js和.editorconfig</a></li><li><a href="#25-tabbar封装整体布局">2.5 tabbar封装(整体布局)</a></li></ul></li><li><a href="#3-首页开发">3 首页开发</a><ul><li><a href="#31-navbar的封装和使用">3.1. navbar的封装和使用</a><ul><li><a href="#网络请求的封装axios">网络请求的封装axios</a></li></ul></li><li><a href="#32-请求首页数据">3.2. 请求首页数据</a></li><li><a href="#33-根据swiper封装homeswiper轮播图组件化封装">3.3. 根据Swiper封装HomeSwiper(轮播图)组件化封装</a></li><li><a href="#34-封装featureview">3.4. 封装FeatureView</a></li><li><a href="#35-封装recommendview">3.5. 封装RecommendView</a></li><li><a href="#36-tabcontrol">3.6. tabControl</a></li><li><a href="#37-请求和保存商品数据">3.7. 请求和保存商品数据</a></li><li><a href="#38-商品数据的展示封装goodslist和goodslistitem">3.8. 商品数据的展示(封装GoodsList和GoodsListItem)</a></li><li><a href="#39-滚动的封装scroll对滚动进行重构better-scroll插件">3.9. 滚动的封装Scroll(对滚动进行重构:Better-Scroll插件)</a></li><li><a href="#310-上拉加载更多">3.10. 上拉加载更多</a></li><li><a href="#311-返回顶部backtop实现与显示与隐藏">3.11. 返回顶部BackTop实现与显示与隐藏</a></li><li><a href="#312-解决首页中可滚动区域的问题"><strong>3.12 解决首页中可滚动区域的问题</strong></a></li><li><a href="#313-tabcontrol的吸顶效果"><strong>3.13. tabControl的吸顶效果</strong></a></li><li><a href="#92-监听滚动-动态的改变tabcontrol的样式"><strong>9.2. 监听滚动, 动态的改变tabControl的样式</strong></a></li><li><a href="#10-让home保持原来的状态"><strong>10 让Home保持原来的状态</strong></a></li></ul></li><li><a href="#4-详情页面">4 详情页面</a><ul><li><a href="#41详情组件实现">4.1详情组件实现</a></li><li><a href="#42-混入mixinshttpscnvuejsorgv2guidemixinshtml知识点补充">4.2 混入<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">mixins</a>知识点补充</a></li><li><a href="#43-标题和内容联动效果详情页面">4.3 标题和内容联动效果(详情页面)</a></li><li><a href="#44-回到顶部封装">4.4 回到顶部(封装)</a></li><li><a href="#45-底部工具栏点击加入购物车通过状态管理vuex实现">4.5 底部工具栏点击加入购物车(通过状态管理Vuex实现)</a></li></ul></li><li><a href="#5-补充">5 补充</a></li><li><a href="#6-图片懒加载插件vue--lazyloadhttpsgithubcomhilongjwvue-lazyload">6 图片懒加载插件<a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">vue–lazyload</a></a></li><li><a href="#7-css中px2vw-css单位转化插件">7 css中px2vw-css单位转化插件</a></li><li><a href="#8-项目的部署nginx">8 项目的部署nginx</a><ul><li><a href="#81-nginxhttpnginxorg">8.1 <a href="http://nginx.org/" target="_blank" rel="noopener">nginx</a></a><ul><li><a href="#windows上部署">windows上部署</a></li><li><a href="#远程终端部署">远程终端部署</a></li></ul></li></ul></li><li><a href="#9-webpackvue详细讲解">9 webpack+vue详细讲解</a></li><li><a href="#10-vue响应式的原理">10 Vue响应式的原理</a><ul><li><a href="#101-发布者订阅者模式">10.1 发布者订阅者模式</a></li><li><a href="#102-观察者模式">10.2 观察者模式</a></li></ul></li></ul><!-- /TOC --><p><a href="https://github.com/staven630/vue-cli4-config" target="_blank" rel="noopener">vuecli4配置问题解决</a></p><p><a href="http://182.92.102.182/mall" target="_blank" rel="noopener">效果展示</a><br><a href="https://github.com/SparkParis/supermallproject" target="_blank" rel="noopener">源码地址</a></p><ul><li><h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述:"></a>项目概述:</h1><p>技术:vue.js</p><p>涉及:脚手架vue-cli3,搭建商城项目</p></li></ul><h3 id="1-项目的创建和git的托管"><a href="#1-项目的创建和git的托管" class="headerlink" title="1 项目的创建和git的托管"></a>1 项目的创建和git的托管</h3><ul><li>通过脚手架vue-cli3创建项目<code>vue create supermallcase</code><ul><li>通过创建项目的时会自动生成git的初始化文件和READ.ME文件,在创建仓库时不需要初始化</li></ul></li><li>在github上创建仓库</li></ul><img src="/2020/05/19/Vue-project/image-20200519002647139.png" alt="image-20200519002647139" style="zoom:80%;"><img src="/2020/05/19/Vue-project/image-20200519002842465.png" alt="image-20200519002842465" style="zoom:50%;"><ul><li>将本地的项目关联到仓库并push</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:SparkParis&#x2F;supermallproject.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><img src="/2020/05/19/Vue-project/image-20200519003116558.png" alt="image-20200519003116558" style="zoom:80%;"><h3 id="2-基本设置"><a href="#2-基本设置" class="headerlink" title="2 基本设置"></a>2 基本设置</h3><h4 id="2-1-目录结构"><a href="#2-1-目录结构" class="headerlink" title="2.1 目录结构"></a>2.1 目录结构</h4><ul><li>network:封装axios网络模块</li><li>components-&gt;common(可单独抽离的组件直接拿到另外的项目中使用)/content(views视图相关的文件):存放公共部分的组件</li><li>pages -&gt;路由分层</li><li>common -&gt;逻辑相关的公共部分(utils.js,const.js等)</li><li>assets-&gt;资源相关(img/css/js)</li><li>router-&gt;路由层</li><li>store-&gt;vuex</li></ul><h4 id="2-2-css初始化化和全局样式设置"><a href="#2-2-css初始化化和全局样式设置" class="headerlink" title="2.2 css初始化化和全局样式设置"></a>2.2 css初始化化和全局样式设置</h4><ul><li><p><a href="https://github.com/necolas/normalize.css" target="_blank" rel="noopener">normalize.css</a>来设置全局样式统一</p></li><li><p>base.css设置我们自己的样式</p></li><li><p>注意在css中可以定义变量,并导入</p><ul><li>css的导入<code>@import &#39;&#39;</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;.&#x2F;normalize.css&quot;;</span><br><span class="line">&#x2F;*:root -&gt; 获取根元素html*&#x2F;</span><br><span class="line">:root &#123;</span><br><span class="line">  &#x2F;* 在css中定义变量 *&#x2F;</span><br><span class="line">  --color-text: #666;</span><br><span class="line">  --color-high-text: #ff5777;</span><br><span class="line">  --color-tint: #ff8198;</span><br><span class="line">  --color-background: #fff;</span><br><span class="line">  --font-size: 14px;</span><br><span class="line">  --line-height: 1.5;</span><br><span class="line">  &#x2F;* --large-size: 50px *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;* 使用变量 *&#x2F;</span><br><span class="line">  &#x2F;* font-size: var(--font-size); *&#x2F;</span><br></pre></td></tr></table></figure><h4 id="2-4-配置vue-config-js和-editorconfig"><a href="#2-4-配置vue-config-js和-editorconfig" class="headerlink" title="2.4 配置vue.config.js和.editorconfig"></a>2.4 配置vue.config.js和.editorconfig</h4><ul><li><p>vue-cli3中隐藏了默认的配置文件,设置vue相关的配置,可以直接在根目录中创建<strong>vue.config.js(名称不能错)</strong>文件进行配置,会和默认的配置合并</p></li><li><p><strong>.editorconfi</strong>g代码开发的规范,cli3中去除了,可以直接拷贝</p></li><li><p>在vue.config.js中设置别名</p><ul><li>别名使用<ul><li>在dom中使用掐面要加<code>~</code></li><li>其他直接使用:<code>&#39;assets/&#39;</code></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 基础的配置方式</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        resolve: &#123;</span><br><span class="line">            alias: &#123;</span><br><span class="line">                &#39;assets&#39;: &#39;@&#x2F;assets&#39;,</span><br><span class="line">                &#39;common&#39;: &#39;@&#x2F;common&#39;,</span><br><span class="line">                &#39;components&#39;: &#39;@&#x2F;components&#39;,</span><br><span class="line">                &#39;network&#39;: &#39;@&#x2F;network&#39;,</span><br><span class="line">                &#39;views&#39;: &#39;@&#x2F;views&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-tabbar封装-整体布局"><a href="#2-5-tabbar封装-整体布局" class="headerlink" title="2.5 tabbar封装(整体布局)"></a>2.5 tabbar封装(整体布局)</h4><ul><li>封装Tabbar</li><li>封装TabbarItem</li><li>响应点击切换的设计</li><li>封装完成后，使用时对Tabbar重新包装</li></ul><p><strong>注意路径</strong></p><ul><li>public中的文件会原封不动的放在打包后的dist文件</li><li>index.html中<code>&lt;%= BASE_URL</code>表示jsp中获取当前文件</li></ul><h3 id="3-首页开发"><a href="#3-首页开发" class="headerlink" title="3 首页开发"></a>3 首页开发</h3><h4 id="3-1-navbar的封装和使用"><a href="#3-1-navbar的封装和使用" class="headerlink" title="3.1. navbar的封装和使用"></a>3.1. navbar的封装和使用</h4><ul><li>封装navbar包含三个插槽：left、center、right</li><li>设置navbar相关的样式</li><li>使用navbar实现首页的导航栏</li></ul><h5 id="网络请求的封装axios"><a href="#网络请求的封装axios" class="headerlink" title="网络请求的封装axios"></a>网络请求的封装axios</h5><ul><li>思想:将axios封装到request.js模块中,在每个views中面向request模块再次封装 (home.js,..),这样所有的views对应的页面网络请求都在对应的网络请求模块中,便于管理和修改</li><li>页面加载完成之后马上发送请求,<strong>created(){},发送请求之后获取的数据需要保存在data的数据中,</strong>请求结束变量就会被回收</li><li>注意在这里获取到的数据时经过响应拦截器过滤之后的数据</li></ul><h4 id="3-2-请求首页数据"><a href="#3-2-请求首页数据" class="headerlink" title="3.2. 请求首页数据"></a>3.2. 请求首页数据</h4><ul><li>封装请求首页更多数据</li><li>将banner数据放在banners变量中</li><li>将recommend数据放在recommends变量中</li></ul><p>在进行数据请求之后将每个页面的组件都单独封装在自己 的view的组件中,在加载到自己的页面,这样保证每个view文件夹下的页面文件夹中存放的组件都在对应的目录下面</p><h4 id="3-3-根据Swiper封装HomeSwiper-轮播图-组件化封装"><a href="#3-3-根据Swiper封装HomeSwiper-轮播图-组件化封装" class="headerlink" title="3.3. 根据Swiper封装HomeSwiper(轮播图)组件化封装"></a>3.3. 根据Swiper封装HomeSwiper(轮播图)组件化封装</h4><ul><li>使用Swiper和SwiperItem</li><li>传入banners进行展示</li></ul><p>有很多vue-ui的插件库,这里建议自己先写</p><p><strong>todo:手写轮播图</strong></p><h4 id="3-4-封装FeatureView"><a href="#3-4-封装FeatureView" class="headerlink" title="3.4. 封装FeatureView"></a>3.4. 封装FeatureView</h4><ul><li>传入recommends数据，进行展示</li></ul><p>这里需要自己进行样式的设置,需要学习<strong>flex布局</strong></p><ul><li>独立组件封装FeatureView<ul><li>div&gt;a&gt;img </li></ul></li></ul><h4 id="3-5-封装RecommendView"><a href="#3-5-封装RecommendView" class="headerlink" title="3.5. 封装RecommendView"></a>3.5. 封装RecommendView</h4><ul><li>展示一张图片即可</li></ul><p><strong>navbar固定定位设置z-index显示优先级,</strong></p><h4 id="3-6-tabControl"><a href="#3-6-tabControl" class="headerlink" title="3.6. tabControl"></a>3.6. tabControl</h4><p><strong>封装tabControl</strong></p><ul><li><p>基本结构的封装</p></li><li><p>监听点击</p></li><li><p>实现思路:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 独立组件的封装</span><br><span class="line">  * props -&gt; titles</span><br><span class="line">  * div&gt;根据titles v-for遍历 div -&gt; span&#123;&#123;title&#125;&#125;</span><br><span class="line">  * css相关</span><br><span class="line">  * 选中哪一个tab, 哪一个tab的文字颜色变色, 下面border-bottom</span><br><span class="line">    * currentIndex</span><br></pre></td></tr></table></figure><ul><li><p>知识点</p><ul><li><p>当控制tab的item只有title不同时,建议使用插槽直接使用数据遍历的方式即可</p></li><li><p>通过css属性可以设置吸附效果,<code>position:sticky</code>,同时还要设置滑到哪个位置进行吸附,<code>top:100px</code></p><ul><li>原理:在使用吸附效果时,到达指定位置之前是原始状态,到达指定位置之后变为fixed状态</li></ul></li><li><p>设置tabControl,当点击某个选项设置当前选项的颜色:</p><ul><li>通过设置一个currentIndex来保存当前的index,通过动态绑定class,当index==currentIndex时添加类名</li></ul></li></ul><p><strong>tabControl的停留</strong></p></li><li><p>重新添加一个tabControl组件（需要设置定位，否则会被盖住）</p></li><li><p>在updated钩子中获取tabControl的offsetTop</p></li><li><p>判断是否滚动超过了offsetTop来决定是否显示新添加的tabControl</p></li></ul><h4 id="3-7-请求和保存商品数据"><a href="#3-7-请求和保存商品数据" class="headerlink" title="3.7. 请求和保存商品数据"></a>3.7. 请求和保存商品数据</h4><ul><li>定义goodsList变量，用于存储请求到的商品数据(封装)</li><li>根据type和page请求商品数据</li><li>将商品数据保存起来</li></ul><p>商品的数据结构</p><p><img src="/2020/05/19/Vue-project/image-20200519185535409.png" alt="image-20200519185535409"></p><ul><li><p>实现:</p><ul><li>发送数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 在home.js中封装getHomeGoods(type, page)</span><br><span class="line">* 在Home.vue中, 又在methods中getHomeGoods(type)</span><br><span class="line">* 调用getHomeGoods(&#39;pop&#39;)&#x2F;getHomeGoods(&#39;new&#39;)&#x2F;getHomeGoods(&#39;sell&#39;)</span><br><span class="line">  * page: 动态的获取对应的page</span><br><span class="line">* 获取到数据: res</span><br><span class="line">  * this.goods[type].list.push(...res.data.list)</span><br><span class="line">  * this.goods[type].page +&#x3D; 1</span><br><span class="line">goods: &#123;</span><br><span class="line">pop: page1:&#x2F;list[30]</span><br><span class="line">new: page1&#x2F;list[30]</span><br><span class="line">sell: page1&#x2F;list[30]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>操作流程</p><ul><li>封装axios请求</li><li>ceated中请求数据</li><li>将数据保存在data中</li><li>设置tabControl的组件并分别做展示,<strong>通过设置中间变量currentType来保存当前当前点击 的tabcontrol</strong>(在请求数据的时候是一次性将所有的数据都请求,需要那部分展示那部分)</li></ul></li><li><p>知识点:</p><ul><li><p><strong>去除组件复用,就要添加key属性</strong></p></li><li><p>请求到的数据需要在data属性中声明变量保存起来</p></li><li><p>在create中调用的方法可以直接封装在methods中,在created中通过this.方法名调用即可</p></li><li><p>比较长的值可以直接放在<strong>计算属性中封装(在显示当前tabControl的时候传递当前tabcontrol的值)</strong></p><p><strong>todo:</strong></p><p><strong>case穿透</strong></p></li></ul></li></ul><h4 id="3-8-商品数据的展示-封装GoodsList和GoodsListItem"><a href="#3-8-商品数据的展示-封装GoodsList和GoodsListItem" class="headerlink" title="3.8. 商品数据的展示(封装GoodsList和GoodsListItem)"></a>3.8. 商品数据的展示(封装GoodsList和GoodsListItem)</h4><ul><li>展示商品列表，封装GoodsList</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* props: goods -&gt; list[30]</span><br><span class="line">* v-for goods -&gt; GoodsListItem[30]</span><br><span class="line">* GoodListItem(组件) -&gt; GoodsItem(数据)</span><br></pre></td></tr></table></figure><ul><li>列表中每一个商品，封装GoodsListItem</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* props: goodsItem </span><br><span class="line">* goodsItem 取出数据, 并且使用正确的div&#x2F;span&#x2F;img基本标签进行展示</span><br></pre></td></tr></table></figure><ul><li>注意CSS属性的设置即可</li></ul><p><strong>todo:flex布局的学习</strong></p><h4 id="3-9-滚动的封装Scroll-对滚动进行重构-Better-Scroll插件"><a href="#3-9-滚动的封装Scroll-对滚动进行重构-Better-Scroll插件" class="headerlink" title="3.9. 滚动的封装Scroll(对滚动进行重构:Better-Scroll插件)"></a>3.9. 滚动的封装Scroll(对滚动进行重构:Better-Scroll插件)</h4><ul><li>学习<a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">BetterScroll滚动插件</a>的使用</li><li>安装better-scroll <code>npm install better-scroll --save</code></li><li>封装一个独立的组件，用于作为滚动组件：Scroll</li><li>组件内代码的封装：<ul><li>1.创建BetterScroll对象，并且传入DOM和选项（probeType、click、pullUpLoad）<strong>(dom对象通过ref老获取,保证唯一性)</strong></li><li>2.监听scroll事件，该事件会返回一个position</li><li>3.监听pullingUp事件，监听到该事件进行上拉加载更多</li><li>4.封装刷新的方法：this.scroll.refresh()</li><li>5.封装滚动的方法：this.scroll.scrollTo(x, y, time)</li><li>6.封装完成刷新的方法：this.scroll.finishedPullUp</li></ul></li></ul><p><strong>监听滚动和上拉加载更多的时候,都需要在scroll组件中选项中设置之后才能进行滚动事件的监听并发送该其他组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">this.scroll &#x3D; new BestScroll(this.$refs.wrapper, &#123;</span><br><span class="line">      &#x2F;&#x2F;在滚动内,按钮是否可用</span><br><span class="line">      click: true,</span><br><span class="line">      &#x2F;&#x2F; 实时派发scroll事件,3表示实时,0,表示不触发</span><br><span class="line">      probeType: this.probeType,</span><br><span class="line">      pullUpLoad: this.pullUpLoad</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>滚动的插件以前使用的是iscroll插件现在不维护了,采用better-scroll实现滚动,避免设备子代的滚动出现的卡顿现象,重构原生的滚动</strong></p><p><strong>注意在created函数中是不能拿到组件中的dom对象的,必须在组件挂载完成mounted之后才能拿到数据</strong></p><ul><li>通过<strong>ref属性</strong>的设置可以拿到当前组件或者当前指定的元素,通过<code>this.$ref.refname</code>获取</li><li>vh是视口高度viewHeight</li><li>设置滑动固定大小的方法有两种</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 局部滚动需要设置高度 *&#x2F;</span><br><span class="line">&#x2F;* 方式1:绝对定位的方式(父相) *&#x2F;</span><br><span class="line">.content &#123;</span><br><span class="line">  &#x2F;* 注意这里的hidden会使sticky吸附失效 *&#x2F;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 44px;</span><br><span class="line">  bottom: 49px;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* 方式2 *&#x2F;</span><br><span class="line">&#x2F;* .content &#123;</span><br><span class="line">  height: calc(100% - 93px);听过calc计算</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  margin-top: 44px;</span><br><span class="line">&#125; *&#x2F;</span><br></pre></td></tr></table></figure><p><strong><a href="https://better-scroll.github.io/docs/en-US/guide/#getting-started" target="_blank" rel="noopener">better-scroll插件使用官方文档</a></strong></p><ul><li><p>实现思路</p><ul><li><p><strong>在index.html中使用Better-Scroll(测试)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* const bscroll &#x3D; new BScroll(el, &#123;   &#125;)</span><br><span class="line">* 注意: wrapper -&gt; content -&gt; 很多内容</span><br><span class="line">* 1.监听滚动</span><br><span class="line">  * probeType: 0&#x2F;1&#x2F;2(手指滚动)&#x2F;3(只要是滚动)</span><br><span class="line">  * bscroll .on(&#39;scroll&#39;, (position) &#x3D;&gt; &#123;&#125;)</span><br><span class="line">* 2.上拉加载</span><br><span class="line">  * pullUpLoad: true</span><br><span class="line">  * bscroll .on(&#39;pullingUp&#39;, () &#x3D;&gt; &#123;&#125;)</span><br><span class="line">* 3.click: false</span><br><span class="line">  * button可以监听点击</span><br><span class="line">  * div不可以</span><br></pre></td></tr></table></figure></li><li><p><strong>在Vue项目中使用Better-Scroll</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 在Profile.vue中简单的演示</span><br><span class="line">* 对Better-Scroll进行封装: Scroll.vue</span><br><span class="line">* Home.vue和Scroll.vue之间进行通信</span><br><span class="line">  * Home.vue将probeType设置为3</span><br><span class="line">  * Scroll.vue需要通过$emit, 实时将事件发送到Home.vue</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-10-上拉加载更多"><a href="#3-10-上拉加载更多" class="headerlink" title="3.10. 上拉加载更多"></a>3.10. 上拉加载更多</h4><ul><li>通<strong>过Scroll监听上拉加载更多</strong>。</li><li>在Home中加载更多的数据。</li><li>请求数据完成后，调动<strong>finishedPullUp</strong></li></ul><p><strong>工作:封装bettter-scroll插件在项目中</strong></p><h4 id="3-11-返回顶部BackTop实现与显示与隐藏"><a href="#3-11-返回顶部BackTop实现与显示与隐藏" class="headerlink" title="3.11. 返回顶部BackTop实现与显示与隐藏"></a>3.11. 返回顶部BackTop实现与显示与隐藏</h4><p><strong>BackTop实现</strong></p><ul><li>封装BackTop组件</li><li>定义一个常量，用于决定在什么数值下显示BackTop组件</li><li>监听滚动，决定BackTop的显示和隐藏(<strong>需要实时监听滚动事件获取滚动的位置,并通过指令v-show来实现</strong>)</li><li>监听BackTop的点击，点击时，调用scrollTo返回顶部</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scroll对象, scroll.scrollTo(x, y, time)</span><br><span class="line">  * this.$refs.scroll.scrollTo(0, 0, 500)</span><br></pre></td></tr></table></figure><ul><li><strong>组件是不能直接监听点击的,必须要添加修饰符native,来监听原生组件的根元素</strong><ul><li>点击之后获取scroll组件并调用子组件中的方法回到顶部,</li><li><strong>父子组件在传值的时候,dom对象中的动态绑定的值不能是驼峰式的,当子组件中的data中接收的是驼峰式的,父组件中的dom对象拆分为<code>-</code>连接</strong></li><li><strong>子组件-&gt;父组件在通信发送自定义事件的时候建议不要将自定义事件命名为驼峰式,如果命名为驼峰式,在父组件中也要通过<code>-</code>连接</strong></li></ul></li></ul><p><strong>显示与隐藏</strong></p><ul><li>思路</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* isShowBackTop: false</span><br><span class="line">* 监听滚动, 拿到滚动的位置:</span><br><span class="line">  * -position.y &gt; 1000  -&gt; isShowBackTop: true</span><br><span class="line">  * isShowBackTop &#x3D; -position.y &gt; 1000</span><br></pre></td></tr></table></figure><h4 id="3-12-解决首页中可滚动区域的问题"><a href="#3-12-解决首页中可滚动区域的问题" class="headerlink" title="3.12 解决首页中可滚动区域的问题"></a><strong>3.12 解决首页中可滚动区域的问题</strong></h4><p><strong>问题分析</strong></p><ul><li><p>在使用图片进行加载的 ,Better-Scroll在决定有多少区域可以滚动时, 是根据<strong>scrollerHeight</strong>属性决定</p></li><li><p>scrollerHeight属性是根据放Better-Scroll的content中的子组件的高度</p></li><li><p>但是我们的首页中, 刚开始在计算scrollerHeight属性时, 是没有将图片计算在内的</p></li><li><p>所以, 计算出来的告诉是错误的(1300+)</p></li><li><p>后来图片加载进来之后有了新的高度, 但是scrollerHeight属性并没有进行更新.所以滚动出现了问题</p></li></ul><p><strong>问题解决</strong></p><ul><li><p>监听每一张图片是否加载完成, 只要有一张图片加载完成了, 执行一次refresh()</p></li><li><p>如何监听图片加载完成了?</p></li><li><p>原生的js监听图片: img.onload = function() {}</p></li><li><p>Vue中监听: @load=’方法’</p></li><li><p>调用scroll的refresh()</p></li><li><p><strong>如何将GoodsListItem.vue中的事件传入到Home.vue中</strong></p><ul><li>因为涉及到非父子组件的通信, 所以这里我们选择了<strong>事件总线</strong>:用来<strong>集中处理事件</strong>的</li><li>bus -&gt;总线</li><li><code>Vue.prototype.$bus = new Vue()</code></li><li><code>this.$bus.$emit(&#39;事件名称&#39;, 参数)</code></li><li><code>this.$bus.$on(&#39;事件名称&#39;, 回调函数(参数))</code></li></ul><p>这里定义全局事件总线,在Vue.prototype中定义</p><p><a href="https://www.jb51.net/article/132371.htm" target="_blank" rel="noopener">https://www.jb51.net/article/132371.htm</a></p></li></ul><p><strong>问题1:refresh找不到的问题</strong></p><ul><li>第一: 在Scroll.vue中, 调用this.scroll的方法之前, 判断this.scroll对象是否有值</li><li>第二: 在mounted生命周期函数中使用 this.$refs.scroll而不是created中</li></ul><p><strong>问题2对于refresh非常频繁的问题, 进行防抖操作(优化性能)</strong></p><ul><li>防抖debounce/节流throttle(课下研究一下)</li><li>防抖函数起作用的过程:<ul><li>如果我们直接执行refresh, 那么refresh函数会被执行30次.</li></ul><ul><li>可以将refresh函数传入到debounce函数中, 生成一个新的函数.</li><li>之后在调用非常频繁的时候, 就使用新生成的函数.</li><li>而新生成的函数, 并不会非常频繁的调用, 如果下一次执行来的非常快, 那么会将上一次取消掉<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debounce(func, delay) &#123;</span><br><span class="line">       let timer &#x3D; null</span><br><span class="line">       return function (...args) &#123;</span><br><span class="line">         if (timer) clearTimeout(timer)</span><br><span class="line">         timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">           func.apply(this, args)</span><br><span class="line">         &#125;, delay)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li>注意<strong>涉及到加载组件的操作,一般不要放在created函数中,放在mounted()函数中,加载完成之后才有组件</strong></li><li><strong>防抖debounce和节流throttle</strong></li><li>setTimeOut异步事件执行在事件循环机制中是最后执行的,所有即使没有设置时间也会有防抖的效果</li></ul><h4 id="3-13-tabControl的吸顶效果"><a href="#3-13-tabControl的吸顶效果" class="headerlink" title="3.13. tabControl的吸顶效果"></a><strong>3.13. tabControl的吸顶效果</strong></h4><p><strong>获取到tabControl的offsetTop</strong></p><ul><li><p>必须知道滚动到多少时, 开始有吸顶效果, 这个时候就需要获取tabControl的offsetTop</p></li><li><p>但是, 如果直接在mounted中获取tabControl的offsetTop, 那么值是不正确.</p></li><li><p>如何获取正确的值了?(// <strong>重新计算tabControl的offsetTop</strong></p><p>   <strong>// 组件不能直接计算offsetTop只有dom元素才行,$el可以获取组件的绑定的dom元素</strong>)</p></li><li><p>监听HomeSwiper中img的加载完成.</p></li><li><p>加载完成后, 发出事件, 在Home.vue中, 获取正确的值.</p><p><strong>补充:</strong></p></li><li><p>为了不让HomeSwiper多次发出事件,</p></li><li><p>可以使用isLoad的变量进行状态的记录.</p></li><li><p>注意: 这里不进行多次调用和debounce的区别</p></li></ul><h4 id="9-2-监听滚动-动态的改变tabControl的样式"><a href="#9-2-监听滚动-动态的改变tabControl的样式" class="headerlink" title="9.2. 监听滚动, 动态的改变tabControl的样式"></a><strong>9.2. 监听滚动, 动态的改变tabControl的样式</strong></h4><ul><li><p>问题:动态的改变tabControl的样式时, 会出现两个问题:</p><ul><li><p>问题一: 下面的商品内容, 会突然上移</p></li><li><p>问题二: tabControl虽然设置了fixed, 但是也随着Better-Scroll一起滚出去了.</p></li></ul></li></ul><p><strong>其他方案来解决停留问题.</strong></p><ul><li><p>在最上面, 多复制了一份PlaceHolderTabControl组件对象, 利用它来实现停留效果.(home-nav下面)</p><ul><li><p>当用户滚动到一定位置时, PlaceHolderTabControl显示出来.</p></li><li><p>当用户滚动没有达到一定位置时, PlaceHolderTabControl隐藏起来.</p></li></ul></li></ul><p><strong>只有设置了position,才能使用z-index</strong> ,所以在PlaceHolderTabControl中设置样式的<code>position:relative;z-index=4</code>,position设置为relative时,相对于自己的位置不变的</p><h4 id="10-让Home保持原来的状态"><a href="#10-让Home保持原来的状态" class="headerlink" title="10 让Home保持原来的状态"></a><strong>10 让Home保持原来的状态</strong></h4><p><strong>让Home不要随意销毁掉</strong></p><ul><li>keep-alive</li><li>只有keep-alive才会激发activated和deactiated钩子函数</li></ul><p><strong>让Home中的内容保持原来的位置</strong></p><ul><li><p>离开时, 保存一个位置信息saveY.</p></li><li><p>进来时, 将位置设置为原来保存的位置saveY信息即可.</p></li><li><p>注意: 最好回来时, 进行一次refresh()</p></li></ul><h3 id="4-详情页面"><a href="#4-详情页面" class="headerlink" title="4 详情页面"></a>4 详情页面</h3><h4 id="4-1详情组件实现"><a href="#4-1详情组件实现" class="headerlink" title="4.1详情组件实现"></a>4.1详情组件实现</h4><ul><li><p>步骤:</p><ul><li>设置详情的组件</li><li>封装请求数据,并获取请求数据,根据请求数据获取来进行页面的展示network-&gt;detail.js</li></ul></li><li><p><strong>详情页面图片不刷新在keep-alive中需要将详情页面的组件name exclude,这样在每次加载详情页面就会重新提交请求</strong></p></li><li><p>当接收到的数据需要获取的信息非常多,且信息都不在把同一个部分时,考虑<strong>整合的思想</strong>,</p><ul><li>创建一个class对象,</li><li>通过new 一个class对象,将数据保存起来</li><li>在子组件中进行展示的时候直接将创建的class对戏哪个实例传递给子组件即可</li><li><strong>在进行渲染对象中的属性之前,v-if判断对象中的属性的长度是否为空<code>Object.keys(goods).length</code></strong>获取对象中的属性名的个数</li></ul><p><strong>详情页面底部tab-bar需要隐藏</strong></p><ul><li>解决方案,设置position样式和优先级,让detail页面覆盖tabbar</li></ul><p><strong>详情页面的局部滚动</strong>  </p><ul><li>引入封装好的scroll组件,需要滚动的部分通过div包裹起来,并给div设置高度,才能进行滚动</li><li>设置高度的时候要给父元素设置100vh的视口,然后才能计算滚动的距离</li><li>一般在设置定位时,尽量不要用绝对定位和固定定位</li><li>在详情页面中重构页面的滚动,出现加载的图片不能拖动或拖动迟缓的问题,注意监听加载的图片,在图片加载结束之后重新刷新页面进行scrollHeight的刷新</li></ul><p><strong>详情页面的推荐部分使用的依然是googlist,这里需要使用图片懒加载的方式</strong></p><ul><li>下载图片懒加载的插件</li><li>安装插件</li><li>使用插件</li><li><a href="https://www.npmjs.com/package/vue-lazyload" target="_blank" rel="noopener">使用方式见链接</a><br><a href="https://www.cnblogs.com/linjiangxian/p/11599501.html" target="_blank" rel="noopener">https://www.cnblogs.com/linjiangxian/p/11599501.html</a></li><li>goodlist是多个页面在使用,图片的数据属性会有所不同,这里需要对返回的属性值进行选择,在计算属性中返回响应页面的img的src<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main.js</span><br><span class="line">import LazyLoad from &#39;vue-lazyload&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  showImage() &#123;</span><br><span class="line">  return this.goodsItem.img || this.goodsItem.image || this.goodsItem.show.img</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line">&lt;img @load&#x3D;&quot;imgLoad&quot; v-lazy&#x3D;&quot;showImage&quot; :key&#x3D;&quot;showImage&quot; alt&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-2-混入mixins知识点补充"><a href="#4-2-混入mixins知识点补充" class="headerlink" title="4.2 混入mixins知识点补充"></a>4.2 混入<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">mixins</a>知识点补充</h4><ul><li>mixins 选项接收一个混入对象的<strong>数组</strong>。这些混入对象可以像正常的实例对象一样包含实例选项，这些选项将会被合并到最终的选项中，使用的是和 Vue.extend() 一样的选项合并逻辑。也就是说，如果你的混入包含一个 created 钩子，而创建组件本身也有一个，那么两个函数都会被调用。</li><li>Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var mixin &#x3D; &#123;</span><br><span class="line">  created: function () &#123; console.log(1) &#125;</span><br><span class="line">&#125;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  created: function () &#123; console.log(2) &#125;,</span><br><span class="line">  mixins: [mixin]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>利用混入可以将多个组件中重复使用的部分通过自定义mixin进行封装,使用时直接导入即可,(home和detail都有监听图片加载完成之后在页面进行刷新的操作就可以直接将防抖操作连同刷新操作封装在mixin中,在哪个组件中使用就在哪个组件中导入混入mixins)</li></ul><p><strong>解决监听图片加载完成scroll界面进行刷新的方法:解决scroll滚动卡顿的问题</strong></p><ul><li>父子组件之间直接通过emit进行发送通过methods中定义方法刷新</li><li>非父子组件之间通过事件总线的方式(在mounted进行及时刷新)<br>注意:图片加载完成刷新一般都有防抖操作全部在mixin中,获取到返回值之后及时执行刷新操作</li></ul><h4 id="4-3-标题和内容联动效果-详情页面"><a href="#4-3-标题和内容联动效果-详情页面" class="headerlink" title="4.3 标题和内容联动效果(详情页面)"></a>4.3 标题和内容联动效果(详情页面)</h4><p><strong>4.3.1 给标题添加对应的点击事件</strong></p><ul><li>点击标题回到对应的位置</li><li>位置的跳转中需要使用使用周期函数$nextTick(),</li><li>这里获取的值也是不是最新值,需要在图片加载完成之后在将对应位置的值保存在数组中</li><li>在created中设置防抖操作,在图片加载完成之后执行获取当前位置的函数</li></ul><p><strong>知识点:$nextTick(function)</strong></p><ul><li>将回调延迟到下次 DOM 更新循环之后执行。</li><li>在修改数据之后立即使用它，然后等待 DOM 更新。</li><li>它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上</li></ul><p><strong>4.3.2滚动scroll-&gt;到指定位置改变主题的显示</strong></p><ul><li>思路<ul><li>在scroll中传入probeType为true,获得监听scroll的滚动事件权限,</li><li>获取子组件中scroll滚动事件的当前位置,将当前位置和获取的主题数组themeTypes中的数值做比较,当介于0-第二个数值之间,设置当前的currentIndex=0,依次类推</li><li>将获取的currentIndex传递给子组件显示对应的主题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contentScroll(position) &#123;</span><br><span class="line">    &#x2F;&#x2F;  根据滚动的位置获取currentIndex的主题序号发送给NavBar</span><br><span class="line">    position &#x3D; -position;</span><br><span class="line">    let length &#x3D; this.themeTops.length;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class="line">      let iPos &#x3D; this.themeTops[i];</span><br><span class="line">      &#x2F;&#x2F; 这里的条件要分开判断</span><br><span class="line">      &#x2F;&#x2F;&lt;length-1和&#x3D;&#x3D;length-1</span><br><span class="line">      if (</span><br><span class="line">        (i &lt; length - 1 &amp;&amp;</span><br><span class="line">          position &gt;&#x3D; iPos &amp;&amp;</span><br><span class="line">          position &lt; this.themeTops[i + 1]) ||</span><br><span class="line">        (i &#x3D;&#x3D;&#x3D; length - 1 &amp;&amp; position &gt;&#x3D; this.themeTops[i])</span><br><span class="line">      ) &#123;</span><br><span class="line">        if (this.currentIndex !&#x3D;&#x3D; i) &#123;</span><br><span class="line">          this.currentIndex &#x3D; i;</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 传值给子组件</span><br><span class="line">    this.$refs.nav.currentIndex &#x3D; this.currentIndex;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="/2020/05/19/Vue-project/image-20200522190552237.png" alt="image-20200522190552237"></p><h4 id="4-4-回到顶部-封装"><a href="#4-4-回到顶部-封装" class="headerlink" title="4.4 回到顶部(封装)"></a>4.4 回到顶部(封装)</h4><ul><li>通过mixin混入的方式,将backTop进行封装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意混入是一个对象</span><br><span class="line">export const backToMixin &#x3D; &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShowTop: false,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    BackTop</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; 判断回到顶部按钮是否显示</span><br><span class="line">    backTopPosition(position) &#123;</span><br><span class="line">      this.isShowTop &#x3D; -position &gt; TOP_POSITION;</span><br><span class="line">    &#125;,</span><br><span class="line">    topBackClick() &#123;</span><br><span class="line">      this.$refs.scroll.scrollTo(0, 0, 500);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<strong>封装只能封装组件中的方法和属性不能封装方法内的部分是不会进行合并</strong></p><ul><li>封装之后需要在监听滚动事件的方法中触发显示与隐藏的函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.backTopPosition(position);</span><br></pre></td></tr></table></figure><h4 id="4-5-底部工具栏点击加入购物车-通过状态管理Vuex实现"><a href="#4-5-底部工具栏点击加入购物车-通过状态管理Vuex实现" class="headerlink" title="4.5 底部工具栏点击加入购物车(通过状态管理Vuex实现)"></a>4.5 底部工具栏点击加入购物车(通过状态管理Vuex实现)</h4><p><strong>界面实现</strong></p><ul><li>注意底部工具栏是不添加在scroll中的,,</li><li>界面中的整体架构是这样的</li></ul><p><img src="/2020/05/19/Vue-project/image-20200522205058465.png" alt="image-20200522205058465"></p><ul><li><p>这里设置整体页面的视口100vh,在进行页面中的布局</p></li><li><p>在使用position布局时,一般建议使用relative(不会移动自身位置,但是可以脱离文档流),建议少用position/fixed</p></li></ul><p><strong>4.6 添加购物车功能实现</strong></p><img src="/2020/05/19/Vue-project/image-20200522225907476.png" alt="image-20200522225907476" style="zoom:50%;"><ul><li><p>实现思路</p><ul><li>为购物车按钮点击事件</li><li>发送事件给父组件detail</li><li>vuex插件的安装和导入工作</li><li>将购物车的数据存放在store的state中</li><li>需要修改state中的数据时通过mutation和action来修改state中的值</li><li>写好购物车页面的进行页面 路由的跳转</li><li>在页面中分别对页面进行组件化部分的设计和显示</li></ul></li><li><p><strong>vuex使用过程中的注意</strong></p><ul><li><strong>mutation中主要执行同步才做,执行的操作单一化</strong>,(<strong>便于vuex的调试工具跟踪执行状态</strong>)</li><li>逻辑判断,异步操作等代码放在action属性中操作</li><li>在action中对不同的逻辑判断在分发dispatch不同的事件给mutation来修改store中的值</li></ul></li><li><p>vue中getter属性的辅助方法mapGetters可以将getter中的定义方法直接放在computed中使用而不用在重新在计算属性computed重新获取值</p><ul><li>mapGetters直接从vuex中导入(是vuex属性)</li></ul></li><li><p>在添加滚轮注意是事项</p><ul><li>需要给scroll组件设置固定高度</li><li>设置固定高度需要通过calc计算当前视口的大小减去navbar和tabbar<code>cal(100vh - h1px - h2px)</code>,</li><li>在scroll内部如果只有一个组件需要设置高度为100%</li></ul></li><li><p>购物车中的选中按钮的属性应该保存在goods的属性中</p></li><li><p>监听checkedbutton按钮时可以直接添加在组件<code>&lt;CheckButton&gt;</code>中,通过修饰符native</p></li><li><p>购物车底部组件的封装,样式的调整</p><ul><li>在样式调整过程中通过flex布局,</li></ul><p><img src="/2020/05/19/Vue-project/image-20200523173600560.png" alt="image-20200523173600560"></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* flex布局中设置垂直居中,此时的line-height不起作用 *&#x2F;</span><br><span class="line">  align-items: center;</span><br></pre></td></tr></table></figure><p><strong>购物车全选点击事件</strong></p><ul><li>显示状态<ul><li>判断是否有一个不选中,全选就是不选中</li></ul></li><li>点击全选按钮<ul><li>如果原来都是选中,点击 全部不选中</li><li>如果原来都是不选中(某些不选中),全部选中</li></ul></li><li><strong>通过mutations修改state中的属性,但是state中的属性值value是不用通过通过mutation进行修改的</strong></li></ul><p><strong>添加购物车中的弹窗</strong></p><ul><li><p>添加弹窗应该在每次action中添加成功在调用</p></li><li><p>知识点:(<strong>promise/mapActions</strong>)</p><ul><li><strong>在action中返回promise对象判断添加成功 与否,在执行相应的弹窗操作</strong></li><li><strong>action属性中方法通过辅助函数mapActions可以映射到methods中直接使用action中的方法</strong></li><li><strong>这里和getters中的属性可以通过辅助函数mapGetters映射到computed中直接使用一样</strong></li></ul></li><li><p>封装toast弹窗(<strong>通过插件的方式进行封装</strong>)</p><ul><li>封装方式:<ul><li>普通封装</li><li>插件封装</li></ul></li><li>封装toast这里使用的是插件 的方式,<ul><li>封装toast的js文件并到处</li><li>导入之后,通过Vue.use(toast)来安装插件</li><li>在安装插件中会自定安装所需的标签等</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Toast.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;toast&quot; v-show&#x3D;&quot;isShow&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Toast&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false,</span><br><span class="line">      message: &quot;我是弹窗&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show(message, duration &#x3D; 1000) &#123;</span><br><span class="line">      this.message &#x3D; message;</span><br><span class="line">      this.isShow &#x3D; true;</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        this.isShow &#x3D; false;</span><br><span class="line">        this.message &#x3D; &quot;&quot;;</span><br><span class="line">      &#125;, duration);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.toast &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.8);</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">  color: #fff;</span><br><span class="line">  z-index: 99;</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter-active,</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  transition: opacity 0.5s;</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter,</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;vue同一文件夹下的index.js</span><br><span class="line">import Toast from &#39;.&#x2F;Toast&#39;</span><br><span class="line"></span><br><span class="line">const plugin &#x3D; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; 安装插件中的install函数会默认传入Vue对象</span><br><span class="line">plugin.install &#x3D; function (Vue) &#123;</span><br><span class="line">  &#x2F;&#x2F; 1.利用Toast对象创建组件构造器</span><br><span class="line">  const constructor &#x3D; Vue.extend(Toast);</span><br><span class="line">  &#x2F;&#x2F; 2.根据组件构造器创建组件对象</span><br><span class="line">  const toast &#x3D; new constructor();</span><br><span class="line">  &#x2F;&#x2F;3.将组件对象手动挂载到dom元素上</span><br><span class="line">  toast.$mount(document.createElement(&#39;div&#39;));</span><br><span class="line">  &#x2F;&#x2F; 4.将创建的dom元素添加到body中</span><br><span class="line">  document.body.appendChild(toast.$el);</span><br><span class="line">  &#x2F;&#x2F; 5.将toast添加到Vue原型中</span><br><span class="line">  Vue.prototype.$toast &#x3D; toast;</span><br><span class="line">&#125;</span><br><span class="line">export default plugin</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main.js中安装插件</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">&#x2F;&#x2F; 导入懒加载插件</span><br><span class="line">import LazyLoad from &#39;vue-lazyload&#39;</span><br><span class="line">&#x2F;&#x2F; 注意这里导入的是toast中的index.js文件</span><br><span class="line">import Toast from &#39;components&#x2F;common&#x2F;toast&#39;</span><br><span class="line">&#x2F;&#x2F;安装插件,这里会自动执行toast对应的index.js文件中的install函数</span><br><span class="line">Vue.use(Toast)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用方式:</span><br><span class="line">vm.$toast.show(message,duration)</span><br></pre></td></tr></table></figure><h3 id="5-补充"><a href="#5-补充" class="headerlink" title="5 补充"></a>5 补充</h3><ul><li><strong>插件<a href="https://majing.io/posts/10000007721218" target="_blank" rel="noopener">fastclick</a></strong>可以<strong>解决移动端点击延迟300ms的问题</strong><ul><li>下载<code>npm install fastclick --save</code></li><li>main.js中导入</li><li>调用attach()方法</li></ul></li><li><strong>polifill插件</strong>可以解决浏览器不支持promise的</li></ul><h3 id="6-图片懒加载插件vue–lazyload"><a href="#6-图片懒加载插件vue–lazyload" class="headerlink" title="6 图片懒加载插件vue–lazyload"></a>6 图片懒加载插件<a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">vue–lazyload</a></h3><ul><li>下载</li><li>导入</li><li>使用Vue.use()</li><li>修改img中:src-&gt;v-lazy</li></ul><p>具体使用进入<a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">github</a>官方库查看</p><h3 id="7-css中px2vw-css单位转化插件"><a href="#7-css中px2vw-css单位转化插件" class="headerlink" title="7 css中px2vw-css单位转化插件"></a>7 css中px2vw-css单位转化插件</h3><p>学习链接:    <a href="https://blog.csdn.net/qq_42354773/article/details/84629147" target="_blank" rel="noopener">https://blog.csdn.net/qq_42354773/article/details/84629147</a></p><ul><li><p>二者都用于做移动端的适配</p><ul><li>px-&gt;vw转化为视口</li><li>px-&gt;rem转化rem</li></ul></li><li><p>将css中的px单位转化为viewport</p></li><li><p>使用vw实现移动端适配问题</p></li><li><p>这里使用插件<strong>postcss-px-to-viewport</strong>(转化为视口)</p></li><li><p>使用:</p><ul><li><p>安装插件(webpack打包过程中使用–save-dev)</p><p><code>npm install postcss-px-to-viewport --save-dev</code>(开发时依赖)</p></li><li><p>在postcss.onfig.js中配置插件,详细的插件配置使用见<a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">github</a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">    &quot;postcss-px-to-viewport&quot;: &#123;</span><br><span class="line">      unitToConvert: &#39;px&#39;,</span><br><span class="line">      viewportWidth: 375,</span><br><span class="line">      unitPrecision: 5,</span><br><span class="line">      viewportUnit: &#39;vw&#39;,</span><br><span class="line">      fontViewportUnit: &#39;vw&#39;,</span><br><span class="line">      selectorBlackList: [&#39;ignore&#39;, &#39;tab-bar&#39;, &#39;tab-bar-item&#39;],</span><br><span class="line">      minPixelValue: 1,</span><br><span class="line">      mediaQuery: false,</span><br><span class="line">      exclude: [&#x2F;tabbar&#x2F;],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/05/19/Vue-project/image-20200525081633406.png" alt="image-20200525081633406"></p><p><img src="/2020/05/19/Vue-project/image-20200525091245243.png" alt="image-20200525091245243"></p><h3 id="8-项目的部署nginx"><a href="#8-项目的部署nginx" class="headerlink" title="8 项目的部署nginx"></a>8 项目的部署nginx</h3><ul><li><p>项目部署在服务器上,部署的服务器有:</p><ul><li>tomcate</li><li>nginx</li></ul><p><img src="/2020/05/19/Vue-project/image-20200525093643709.png" alt="image-20200525093643709"></p></li><li><p>项目部署流程</p><ul><li>部署之前需要打包<code>npm run build</code></li><li>安装部署的服务器</li></ul></li></ul><h4 id="8-1-nginx"><a href="#8-1-nginx" class="headerlink" title="8.1 nginx"></a>8.1 <a href="http://nginx.org/" target="_blank" rel="noopener">nginx</a></h4><ul><li><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">官网下载稳定版本</a></li></ul><img src="/2020/05/19/Vue-project/image-20200525100802922.png" alt="image-20200525100802922" style="zoom:50%;"><h5 id="windows上部署"><a href="#windows上部署" class="headerlink" title="windows上部署"></a>windows上部署</h5><ul><li>下载好zip直接解压,运行内部的nginx.exe</li><li>浏览器中输入<a href="http://localhost/,出现如下界面,表示nginx代理服务器安装成功" target="_blank" rel="noopener">http://localhost/,出现如下界面,表示nginx代理服务器安装成功</a></li><li>没有出现界面的原因可能是8080端口被占用,关闭对应的服务即可</li></ul><img src="/2020/05/19/Vue-project/image-20200525101822850.png" alt="image-20200525101822850" style="zoom:50%;"><ul><li><p>方式1:将vue中打包好的dist文件夹下的所有内容复制到html文件下即可进行访问,注意入口地址:<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a></p><p><img src="/2020/05/19/Vue-project/image-20200525103435742.png" alt="image-20200525103435742"></p></li><li><p>方式2:将dist文件夹直接放在nginx根目录下,修改nginx的入口文件即可</p><ul><li>在nginx.conf.js中还可以设置反向代理的配置</li><li>在修改了配置之后需要重新启动nginx服务器,</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd nginx的根目录</span><br><span class="line">nginx -s stop    或者    nginx -s quit</span><br><span class="line">stop表示立即停止nginx,不保存相关信息</span><br><span class="line">quit表示正常退出nginx,并保存相关信息</span><br><span class="line">重启(因为改变了配置,需要重启)</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><ul><li>输入入口地址:localhost,不要加路由地址</li></ul></li></ul><p><img src="/2020/05/19/Vue-project/image-20200525105515442.png" alt="image-20200525105515442"></p><h5 id="远程终端部署"><a href="#远程终端部署" class="headerlink" title="远程终端部署"></a>远程终端部署</h5><ul><li><p>在终端部署好环境和系统</p></li><li><p>安装nginx代理服务器</p><p><img src="/2020/05/19/Vue-project/image-20200525112657980.png" alt="image-20200525112657980"></p></li></ul><p>flutter和RN的跨平台框架对比<a href="https://www.jianshu.com/p/51c4f7f6e446" target="_blank" rel="noopener">https://www.jianshu.com/p/51c4f7f6e446</a></p><h3 id="9-webpack-vue详细讲解"><a href="#9-webpack-vue详细讲解" class="headerlink" title="9 webpack+vue详细讲解"></a>9 webpack+vue详细讲解</h3><ul><li><a href="https://github.com/icarusion/vue-vueRouter-webpack" target="_blank" rel="noopener">链接</a></li></ul><p><img src="/2020/05/19/Vue-project/image-20200525101035103.png" alt="image-20200525101035103"></p><h3 id="10-Vue响应式的原理"><a href="#10-Vue响应式的原理" class="headerlink" title="10 Vue响应式的原理"></a>10 Vue响应式的原理</h3><ul><li><p><img src="/2020/05/19/Vue-project/image-20200525134517172.png" alt="image-20200525134517172"></p></li><li><p>响应式依赖的两个技术</p><ul><li>Object.defineProperty():监听属性的改变</li></ul><p><img src="/2020/05/19/Vue-project/image-20200525134141398.png" alt="image-20200525134141398"></p><ul><li>发布者订阅者模式<ul><li>定义两个类,发布者中存放着订阅者,当发布者调用notify()时,订阅者就会执行自己的update函数来更新自己的数值,</li></ul></li></ul></li><li><p>响应式原理的解析图:</p></li></ul><p><img src="/2020/05/19/Vue-project/image-20200525152732915.png" alt="image-20200525152732915"></p><h4 id="10-1-发布者订阅者模式"><a href="#10-1-发布者订阅者模式" class="headerlink" title="10.1 发布者订阅者模式"></a>10.1 发布者订阅者模式</h4><h4 id="10-2-观察者模式"><a href="#10-2-观察者模式" class="headerlink" title="10.2 观察者模式"></a>10.2 观察者模式</h4>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
通过vuecli3搭建商城项目,并完善了项目功能效果,通过nginx代理服务器成功部署在服务器端有效果展示和源码实现
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="webpack" scheme="https://sparkparis.github.io/tags/webpack/"/>
    
      <category term="vue" scheme="https://sparkparis.github.io/tags/vue/"/>
    
      <category term="elementui" scheme="https://sparkparis.github.io/tags/elementui/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记10-前端工程化</title>
    <link href="https://sparkparis.github.io/2020/05/18/Vue%E7%AC%94%E8%AE%B010/"/>
    <id>https://sparkparis.github.io/2020/05/18/Vue%E7%AC%94%E8%AE%B010/</id>
    <published>2020-05-18T14:23:59.000Z</published>
    <updated>2020-05-18T14:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">了解模块化的相关规范,了解webpack,了解使用Vue单文件组件,能够搭建Vue脚手架,掌握Element-UI的使用 <a id="more"></a><!-- TOC --><ul><li><a href="#1模块化的分类">1.模块化的分类</a><ul><li><a href="#a浏览器端的模块化">A.浏览器端的模块化</a></li><li><a href="#b服务器端的模块化">B.服务器端的模块化</a></li><li><a href="#ces6模块化">C.ES6模块化</a></li></ul></li><li><a href="#2在nodejs中安装babel">2.在NodeJS中安装babel</a><ul><li><a href="#a安装babel">A.安装babel</a></li><li><a href="#b创建babelconfigjs">B.创建babel.config.js</a></li><li><a href="#c创建indexjs文件">C.创建index.js文件</a></li><li><a href="#d使用npx执行文件">D.使用npx执行文件</a></li></ul></li><li><a href="#3设置默认导入导出">3.设置默认导入/导出</a><ul><li><a href="#a默认导出">A.默认导出</a></li><li><a href="#b默认导入">B.默认导入</a></li></ul></li><li><a href="#4设置按需导入导出">4.设置按需导入/导出</a><ul><li><a href="#a按需导出">A.按需导出</a></li><li><a href="#b按需导入">B.按需导入</a></li></ul></li><li><a href="#5直接导入并执行代码">5.直接导入并执行代码</a></li><li><a href="#6webpack的概念">6.webpack的概念</a></li><li><a href="#7webpack的基本使用">7.webpack的基本使用</a><ul><li><a href="#a创建项目目录并初始化">A.创建项目目录并初始化</a></li><li><a href="#b创建首页及js文件">B.创建首页及js文件</a></li><li><a href="#c安装jquery">C.安装jQuery</a></li><li><a href="#d导入jquery">D.导入jQuery</a></li><li><a href="#e安装webpack">E.安装webpack</a></li></ul></li><li><a href="#8设置webpack的打包入口出口">8.设置webpack的打包入口/出口</a></li><li><a href="#9设置webpack的自动打包">9.设置webpack的自动打包</a></li><li><a href="#10配置html-webpack-plugin">10.配置html-webpack-plugin</a></li><li><a href="#11webpack中的加载器">11.webpack中的加载器</a></li><li><a href="#12vue单文件组件">12.Vue单文件组件</a></li><li><a href="#13在webpack中使用vue">13.在webpack中使用vue</a></li><li><a href="#14使用webpack打包发布项目">14.使用webpack打包发布项目</a></li><li><a href="#15vue脚手架">15.Vue脚手架</a></li><li><a href="#16vue脚手架的自定义配置">16.Vue脚手架的自定义配置</a></li><li><a href="#17element-ui的基本使用">17.Element-UI的基本使用</a></li></ul><!-- /TOC --><h3 id="1-模块化的分类"><a href="#1-模块化的分类" class="headerlink" title="1.模块化的分类"></a>1.模块化的分类</h3><h4 id="A-浏览器端的模块化"><a href="#A-浏览器端的模块化" class="headerlink" title="A.浏览器端的模块化"></a>A.浏览器端的模块化</h4><ul><li><p>1).AMD(Asynchronous Module Definition,异步模块定义)代表产品为：Require.js</p></li><li><p>2).CMD(Common Module Definition,通用模块定义)代表产品为：Sea.js</p><h4 id="B-服务器端的模块化"><a href="#B-服务器端的模块化" class="headerlink" title="B.服务器端的模块化"></a>B.服务器端的模块化</h4><p>服务器端的模块化规范是使用CommonJS规范：</p></li><li><p>1).使用require引入其他模块或者包</p></li><li><p>2).使用exports或者module.exports导出模块成员</p></li><li><p>3).一个文件就是一个模块，都拥有独立的作用域</p><h4 id="C-ES6模块化"><a href="#C-ES6模块化" class="headerlink" title="C.ES6模块化"></a>C.ES6模块化</h4></li><li><p>ES6模块化规范中定义：</p><ul><li>每一个js文件都是独立的模块</li><li>导入模块成员使用import关键字</li><li>暴露模块成员使用export关键字</li></ul></li><li><p>小结：推荐使用ES6模块化，因为AMD，CMD局限使用与浏览器端，而CommonJS在服务器端使用。<br>  ES6模块化是浏览器端和服务器端通用的规范.</p></li></ul><h3 id="2-在NodeJS中安装babel"><a href="#2-在NodeJS中安装babel" class="headerlink" title="2.在NodeJS中安装babel"></a>2.在NodeJS中安装babel</h3><h4 id="A-安装babel"><a href="#A-安装babel" class="headerlink" title="A.安装babel"></a>A.安装babel</h4><ul><li>打开终端，输入命令：<code>npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/node</code></li><li>安装完毕之后，再次输入命令安装：npm install –save @babel/polyfill<h4 id="B-创建babel-config-js"><a href="#B-创建babel-config-js" class="headerlink" title="B.创建babel.config.js"></a>B.创建babel.config.js</h4></li><li>在项目目录中创建babel.config.js文件。<br>编辑js文件中的代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const presets &#x3D; [</span><br><span class="line">          [&quot;@babel&#x2F;env&quot;,&#123;</span><br><span class="line">              targets:&#123;</span><br><span class="line">                  edge:&quot;17&quot;,</span><br><span class="line">                  firefox:&quot;60&quot;,</span><br><span class="line">                  chrome:&quot;67&quot;,</span><br><span class="line">                  safari:&quot;11.1&quot;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;]</span><br><span class="line">      ]</span><br><span class="line">      &#x2F;&#x2F;暴露</span><br><span class="line">      module.exports &#x3D; &#123; presets &#125;</span><br></pre></td></tr></table></figure><h4 id="C-创建index-js文件"><a href="#C-创建index-js文件" class="headerlink" title="C.创建index.js文件"></a>C.创建index.js文件</h4></li><li>在项目目录中创建index.js文件作为入口文件<br>在index.js中输入需要执行的js代码<h4 id="D-使用npx执行文件"><a href="#D-使用npx执行文件" class="headerlink" title="D.使用npx执行文件"></a>D.使用npx执行文件</h4>  打开终端，输入命令：npx babel-node ./index.js</li></ul><h3 id="3-设置默认导入-导出"><a href="#3-设置默认导入-导出" class="headerlink" title="3.设置默认导入/导出"></a>3.设置默认导入/导出</h3><h4 id="A-默认导出"><a href="#A-默认导出" class="headerlink" title="A.默认导出"></a>A.默认导出</h4><pre><code>export default {    成员A,    成员B,    .......},如下：let num = 100;export default{    num}</code></pre><h4 id="B-默认导入"><a href="#B-默认导入" class="headerlink" title="B.默认导入"></a>B.默认导入</h4><pre><code>import 接收名称 from &quot;模块标识符&quot;，如下：import test from &quot;./test.js&quot;</code></pre><ul><li>注意：在一个模块中，只允许使用export default向外默认暴露一次成员，千万不要写多个export default。<br>如果在一个模块中没有向外暴露成员，其他模块引入该模块时将会得到一个空对象 </li></ul><h3 id="4-设置按需导入-导出"><a href="#4-设置按需导入-导出" class="headerlink" title="4.设置按需导入/导出"></a>4.设置按需导入/导出</h3><h4 id="A-按需导出"><a href="#A-按需导出" class="headerlink" title="A.按需导出"></a>A.按需导出</h4><pre><code>export let num = 998;export let myName = &quot;jack&quot;;export function fn = function(){ console.log(&quot;fn&quot;) }</code></pre><h4 id="B-按需导入"><a href="#B-按需导入" class="headerlink" title="B.按需导入"></a>B.按需导入</h4><pre><code>import { num,fn as printFn ,myName } from &quot;./test.js&quot;//同时导入默认导出的成员以及按需导入的成员import test,{ num,fn as printFn ,myName } from &quot;./test.js&quot;</code></pre><p>注意：一个模块中既可以按需导入也可以默认导入，一个模块中既可以按需导出也可以默认导出</p><h3 id="5-直接导入并执行代码"><a href="#5-直接导入并执行代码" class="headerlink" title="5.直接导入并执行代码"></a>5.直接导入并执行代码</h3><pre><code>import &quot;./test2.js&quot;;</code></pre><h3 id="6-webpack的概念"><a href="#6-webpack的概念" class="headerlink" title="6.webpack的概念"></a>6.webpack的概念</h3><ul><li>webpack是一个流行的前端项目构建工具，可以解决目前web开发的困境。</li><li>webpack提供了模块化支持，代码压缩混淆，解决js兼容问题，性能优化等特性，提高了开发效率和项目的可维护性</li></ul><h3 id="7-webpack的基本使用"><a href="#7-webpack的基本使用" class="headerlink" title="7.webpack的基本使用"></a>7.webpack的基本使用</h3><h4 id="A-创建项目目录并初始化"><a href="#A-创建项目目录并初始化" class="headerlink" title="A.创建项目目录并初始化"></a>A.创建项目目录并初始化</h4><pre><code>创建项目，并打开项目所在目录的终端，输入命令：    npm init -y</code></pre><h4 id="B-创建首页及js文件"><a href="#B-创建首页及js文件" class="headerlink" title="B.创建首页及js文件"></a>B.创建首页及js文件</h4><pre><code>在项目目录中创建index.html页面，并初始化页面结构：在页面中摆放一个ul，ul里面放置几个li在项目目录中创建js文件夹，并在文件夹中创建index.js文件</code></pre><h4 id="C-安装jQuery"><a href="#C-安装jQuery" class="headerlink" title="C.安装jQuery"></a>C.安装jQuery</h4><pre><code>打开项目目录终端，输入命令:npm install jQuery -S</code></pre><h4 id="D-导入jQuery"><a href="#D-导入jQuery" class="headerlink" title="D.导入jQuery"></a>D.导入jQuery</h4><pre><code>打开index.js文件，编写代码导入jQuery并实现功能：import $ from &quot;jquery&quot;;$(function(){    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;cyan&quot;);    $(&quot;li:odd&quot;).css(&quot;background&quot;,&quot;pink&quot;);})</code></pre><ul><li>注意：此时项目运行会有错误，因为import $ from “jquery”;这句代码属于ES6的新语法代码，在浏览器中可能会存在兼容性问题<br>所以我们需要webpack来帮助我们解决这个问题。<h4 id="E-安装webpack"><a href="#E-安装webpack" class="headerlink" title="E.安装webpack"></a>E.安装webpack</h4></li><li>打开项目目录终端，输入命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure></li><li>然后在项目根目录中，创建一个 webpack.config.js 的配置文件用来配置webpack<ul><li>在 webpack.config.js 文件中编写代码进行webpack配置，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode:&quot;development&quot;&#x2F;&#x2F;可以设置为development(开发模式)，production(发布模式)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>补充：mode设置的是项目的编译模式。</li><li>如果设置为development则表示项目处于开发阶段，不会进行压缩和混淆，打包速度会快一些</li><li>如果设置为production则表示项目处于上线发布阶段，会进行压缩和混淆，打包速度会慢一些</li></ul></li><li>修改项目中的package.json文件添加运行脚本dev，如下：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;dev&quot;:&quot;webpack&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：scripts节点下的脚本，可以通过 npm run 运行，如：</span><br><span class="line">运行终端命令：npm run dev</span><br><span class="line">将会启动webpack进行项目打包</span><br></pre></td></tr></table></figure></li><li>运行dev命令进行项目打包，并在页面中引入项目打包生成的js文件<ul><li>打开项目目录终端，输入命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li><li>等待webpack打包完毕之后，找到默认的dist路径中生成的main.js文件，将其引入到html页面中。<br>浏览页面查看效果。</li></ul></li></ul><p>###8.设置webpack的打包入口/出口</p><ul><li><p>在webpack 4.x中，默认会将src/index.js 作为默认的打包入口js文件</p></li><li><p>默认会将dist/main.js 作为默认的打包输出js文件</p></li><li><p>如果不想使用默认的入口/出口js文件，我们可以通过改变 webpack.config.js 来设置入口/出口的js文件，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">    module.exports &#x3D; &#123;</span><br><span class="line">        mode:&quot;development&quot;,</span><br><span class="line">        &#x2F;&#x2F;设置入口文件路径</span><br><span class="line">        entry: path.join(__dirname,&quot;.&#x2F;src&#x2F;xx.js&quot;),</span><br><span class="line">        &#x2F;&#x2F;设置出口文件</span><br><span class="line">        output:&#123;</span><br><span class="line">            &#x2F;&#x2F;设置路径</span><br><span class="line">            path:path.join(__dirname,&quot;.&#x2F;dist&quot;),</span><br><span class="line">            &#x2F;&#x2F;设置文件名</span><br><span class="line">            filename:&quot;res.js&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-设置webpack的自动打包"><a href="#9-设置webpack的自动打包" class="headerlink" title="9.设置webpack的自动打包"></a>9.设置webpack的自动打包</h3></li><li><p>默认情况下，我们更改入口js文件的代码，需要重新运行命令打包webpack，才能生成出口的js文件</p></li><li><p>那么每次都要重新执行命令打包，这是一个非常繁琐的事情，那么，自动打包可以解决这样繁琐的操作。</p></li><li><p>实现自动打包功能的步骤如下：</p><ul><li><p>安装自动打包功能的包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server</span><br><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure></li><li><p>修改package.json中的dev指令如下：</p><pre><code>&quot;scripts&quot;:{    &quot;dev&quot;:&quot;webpack-dev-server&quot;}</code></pre></li><li><p>将引入的js文件路径更改为：<code>&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>运行<code>npm run dev</code>，进行打包</p></li><li><p>打开网址查看效果：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>注意：webpack-dev-server自动打包的输出文件，默认放到了服务器的根目录中.</p></li></ul></li><li><p>补充：<br>在自动打包完毕之后，默认打开服务器网页，实现方式就是打开package.json文件，修改dev命令：<br>  “dev”: “webpack-dev-server –open –host 127.0.0.1 –port 9999”</p></li></ul><h3 id="10-配置html-webpack-plugin"><a href="#10-配置html-webpack-plugin" class="headerlink" title="10.配置html-webpack-plugin"></a>10.配置html-webpack-plugin</h3><ul><li>使用html-webpack-plugin 可以生成一个预览页面。</li><li>因为当我们访问默认的 <a href="http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面" target="_blank" rel="noopener">http://localhost:8080/的时候，看到的是一些文件和文件夹，想要查看我们的页面</a></li><li>还需要点击文件夹点击文件才能查看，那么我们希望默认就能看到一个页面，而不是看到文件夹或者目录。</li><li>实现默认预览页面功能的步骤如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">A.安装默认预览功能的包:html-webpack-plugin</span><br><span class="line">    npm install html-webpack-plugin -D</span><br><span class="line">B.修改webpack.config.js文件，如下：</span><br><span class="line">    &#x2F;&#x2F;导入包</span><br><span class="line">    const HtmlWebpackPlugin &#x3D; require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">    &#x2F;&#x2F;创建对象</span><br><span class="line">    const htmlPlugin &#x3D; new HtmlWebpackPlugin(&#123;</span><br><span class="line">        &#x2F;&#x2F;设置生成预览页面的模板文件</span><br><span class="line">        template:&quot;.&#x2F;src&#x2F;index.html&quot;,</span><br><span class="line">        &#x2F;&#x2F;设置生成的预览页面名称</span><br><span class="line">        filename:&quot;index.html&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">C.继续修改webpack.config.js文件，添加plugins信息：</span><br><span class="line">    module.exports &#x3D; &#123;</span><br><span class="line">        ......</span><br><span class="line">        plugins:[ htmlPlugin ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="11-webpack中的加载器"><a href="#11-webpack中的加载器" class="headerlink" title="11.webpack中的加载器"></a>11.webpack中的加载器</h3><ul><li><p>通过loader打包非js模块：默认情况下，webpack只能打包js文件，如果想要打包非js文件，需要调用loader加载器才能打包</p></li><li><p>loader加载器包含：</p><ul><li>1).less-loader</li><li>2).sass-loader</li><li>3).url-loader:打包处理css中与url路径有关的文件</li><li>4).babel-loader:处理高级js语法的加载器</li><li>5).postcss-loader</li><li>6).css-loader,style-loader</li></ul></li><li><p>注意：<strong>指定多个loader时的顺序是固定的，而调用loader的顺序是从后向前进行调用</strong></p><ul><li><p>A.安装style-loader,css-loader来处理样式文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1).安装包</span><br><span class="line">        npm install style-loader css-loader -D</span><br><span class="line">2).配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line">    module.exports &#x3D; &#123;</span><br><span class="line">        ......</span><br><span class="line">        plugins:[ htmlPlugin ],</span><br><span class="line">        module : &#123;</span><br><span class="line">            rules:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;test设置需要匹配的文件类型，支持正则</span><br><span class="line">                    test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                    &#x2F;&#x2F;use表示该文件类型需要调用的loader</span><br><span class="line">                    use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>B.安装less,less-loader处理less文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1).安装包</span><br><span class="line">        npm install less-loader less -D</span><br><span class="line">    2).配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line">    module.exports &#x3D; &#123;</span><br><span class="line">        ......</span><br><span class="line">        plugins:[ htmlPlugin ],</span><br><span class="line">        module : &#123;</span><br><span class="line">            rules:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;test设置需要匹配的文件类型，支持正则</span><br><span class="line">                    test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                    &#x2F;&#x2F;use表示该文件类型需要调用的loader</span><br><span class="line">                    use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                    use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>C.安装sass-loader,node-sass处理less文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1).安装包</span><br><span class="line">       npm install sass-loader node-sass -D</span><br><span class="line">   2).配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line">   module.exports &#x3D; &#123;</span><br><span class="line">       ......</span><br><span class="line">       plugins:[ htmlPlugin ],</span><br><span class="line">       module : &#123;</span><br><span class="line">           rules:[</span><br><span class="line">               &#123;</span><br><span class="line">                   &#x2F;&#x2F;test设置需要匹配的文件类型，支持正则</span><br><span class="line">                   test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                   &#x2F;&#x2F;use表示该文件类型需要调用的loader</span><br><span class="line">                   use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                   use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]</span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line">                   test:&#x2F;\.scss$&#x2F;,</span><br><span class="line">                   use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;]</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>  补充：安装sass-loader失败时，大部分情况是因为网络原因，详情参考：<br>  <a href="https://segmentfault.com/a/1190000010984731?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010984731?utm_source=tag-newest</a></p></li><li><p>D.安装post-css自动添加css的兼容性前缀（-ie-,-webkit-）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1).安装包</span><br><span class="line">    npm install postcss-loader autoprefixer -D</span><br><span class="line">2).在项目根目录创建并配置postcss.config.js文件</span><br><span class="line">const autoprefixer &#x3D; require(&quot;autoprefixer&quot;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    plugins:[ autoprefixer ]</span><br><span class="line">&#125;</span><br><span class="line">3).配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    ......</span><br><span class="line">    plugins:[ htmlPlugin ],</span><br><span class="line">    module : &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;test设置需要匹配的文件类型，支持正则</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;use表示该文件类型需要调用的loader</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;postcss-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.scss$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>E.打包样式表中的图片以及字体文件<br>在样式表css中有时候会设置背景图片和设置字体文件，一样需要loader进行处理<br>使用url-loader和file-loader来处理打包图片文件以及字体文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1).安装包</span><br><span class="line">    npm install url-loader file-loader -D</span><br><span class="line">2).配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    ......</span><br><span class="line">    plugins:[ htmlPlugin ],</span><br><span class="line">    module : &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;test设置需要匹配的文件类型，支持正则</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;use表示该文件类型需要调用的loader</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.scss$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test:&#x2F;\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;limit用来设置字节数，只有小于limit值的图片，才会转换</span><br><span class="line">                &#x2F;&#x2F;为base64图片</span><br><span class="line">                use:&quot;url-loader?limit&#x3D;16940&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>F.打包js文件中的高级语法：在编写js的时候，有时候我们会使用高版本的js语法<br>有可能这些高版本的语法不被兼容，我们需要将之打包为兼容性的js代码<br>我们需要安装babel系列的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">A.安装babel转换器</span><br><span class="line">    npm install babel-loader @babel&#x2F;core @babel&#x2F;runtime -D</span><br><span class="line">B.安装babel语法插件包</span><br><span class="line">    npm install @babel&#x2F;preset-env @babel&#x2F;plugin-transform-runtime @babel&#x2F;plugin-proposal-class-properties -D</span><br><span class="line">C.在项目根目录创建并配置babel.config.js文件</span><br><span class="line">    </span><br><span class="line">    module.exports &#x3D; &#123;</span><br><span class="line">        presets:[&quot;@babel&#x2F;preset-env&quot;],</span><br><span class="line">        plugins:[ &quot;@babel&#x2F;plugin-transform-runtime&quot;, &quot;@babel&#x2F;plugin-proposal-class-properties&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">D.配置规则：更改webpack.config.js的module中的rules数组</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    ......</span><br><span class="line">    plugins:[ htmlPlugin ],</span><br><span class="line">    module : &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;test设置需要匹配的文件类型，支持正则</span><br><span class="line">                test:&#x2F;\.css$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;use表示该文件类型需要调用的loader</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.less$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test:&#x2F;\.scss$&#x2F;,</span><br><span class="line">                use:[&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;sass-loader&#39;]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test:&#x2F;\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$&#x2F;,</span><br><span class="line">                &#x2F;&#x2F;limit用来设置字节数，只有小于limit值的图片，才会转换</span><br><span class="line">                &#x2F;&#x2F;为base64图片</span><br><span class="line">                use:&quot;url-loader?limit&#x3D;16940&quot;</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                test:&#x2F;\.js$&#x2F;,</span><br><span class="line">                use:&quot;babel-loader&quot;,</span><br><span class="line">                &#x2F;&#x2F;exclude为排除项，意思是不要处理node_modules中的js文件</span><br><span class="line">                exclude:&#x2F;node_modules&#x2F;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="12-Vue单文件组件"><a href="#12-Vue单文件组件" class="headerlink" title="12.Vue单文件组件"></a>12.Vue单文件组件</h3><ul><li>传统Vue组件的缺陷：<ul><li>全局定义的组件不能重名，字符串模板缺乏语法高亮，不支持css(当html和js组件化时，css没有参与其中)</li><li>没有构建步骤限制，只能使用H5和ES5，不能使用预处理器（babel）</li></ul></li><li>解决方案：<br>使用Vue单文件组件，每个单文件组件的后缀名都是.vue<ul><li>每一个Vue单文件组件都由三部分组成<ul><li>1).template组件组成的模板区域</li><li>2).script组成的业务逻辑区域</li><li>3).style样式区域<br>代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">    组件代码区域</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    js代码区域</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">    样式代码区域</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>补充：安装Vetur插件可以使得.vue文件中的代码高亮</strong></p><ul><li>配置.vue文件的加载器<ul><li>A.安装vue组件的加载器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure></li><li>B.配置规则：更改webpack.config.js的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module中的rules数组</span><br><span class="line">const VueLoaderPlugin &#x3D; require(&quot;vue-loader&#x2F;lib&#x2F;plugin&quot;);</span><br><span class="line">const vuePlugin &#x3D; new VueLoaderPlugin();</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    ......</span><br><span class="line">    plugins:[ htmlPlugin, vuePlugin  ],</span><br><span class="line">    module : &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            ...&#x2F;&#x2F;其他规则</span><br><span class="line">            &#123; </span><br><span class="line">                test:&#x2F;\.vue$&#x2F;,</span><br><span class="line">                loader:&quot;vue-loader&quot;,</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-在webpack中使用vue"><a href="#13-在webpack中使用vue" class="headerlink" title="13.在webpack中使用vue"></a>13.在webpack中使用vue</h3>上一节我们安装处理了vue单文件组件的加载器，想要让vue单文件组件能够使用，我们必须要安装vue<br>并使用vue来引用vue单文件组件。</li></ul></li><li>A.安装Vue<br>  npm install vue -S</li><li>B.在index.js中引入vue：import Vue from “vue”</li><li>C.创建Vue实例对象并指定el，最后使用render函数渲染单文件组件  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const vm &#x3D; new Vue(&#123;</span><br><span class="line">    el:&quot;#first&quot;,</span><br><span class="line">    render:h&#x3D;&gt;h(app)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-使用webpack打包发布项目"><a href="#14-使用webpack打包发布项目" class="headerlink" title="14.使用webpack打包发布项目"></a>14.使用webpack打包发布项目</h3><p>在项目上线之前，我们需要将整个项目打包并发布。</p><ul><li>A.配置package.json  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;dev&quot;:&quot;webpack-dev-server&quot;,</span><br><span class="line">    &quot;build&quot;:&quot;webpack -p&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>B.在项目打包之前，可以将dist目录删除，生成全新的dist目录</li></ul><h3 id="15-Vue脚手架"><a href="#15-Vue脚手架" class="headerlink" title="15.Vue脚手架"></a>15.Vue脚手架</h3><ul><li><p>Vue脚手架可以快速生成Vue项目基础的架构。</p><ul><li><p>安装3.x版本的Vue脚手架：<br>npm install -g @vue/cli</p></li><li><p>基于3.x版本的脚手架创建Vue项目：</p><ul><li>1).使用命令创建Vue项目<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">命令：vue create my-project</span><br><span class="line">选择Manually select features(选择特性以创建项目)</span><br><span class="line">勾选特性可以用空格进行勾选。</span><br><span class="line">是否选用历史模式的路由：n</span><br><span class="line">ESLint选择：ESLint + Standard config</span><br><span class="line">何时进行ESLint语法校验：Lint on save</span><br><span class="line">babel，postcss等配置文件如何放置：In dedicated config files(单独使用文件进行配置)</span><br><span class="line">是否保存为模板：n</span><br><span class="line">使用哪个工具安装包：npm</span><br></pre></td></tr></table></figure></li><li>2).基于ui界面创建Vue项目<br>命令：vue ui<br>在自动打开的创建项目网页中配置项目信息。</li><li>3).基于2.x的旧模板，创建Vue项目<br>npm install -g @vue/cli-init<br>vue init webpack my-project</li></ul></li><li><p>分析Vue脚手架生成的项目结构<br>node_modules:依赖包目录<br>public：静态资源目录<br>src：源码目录<br>src/assets:资源目录<br>src/components：组件目录<br>src/views:视图组件目录<br>src/App.vue:根组件<br>src/main.js:入口js<br>src/router.js:路由js<br>babel.config.js:babel配置文件<br>.eslintrc.js:</p></li></ul></li></ul><h3 id="16-Vue脚手架的自定义配置"><a href="#16-Vue脚手架的自定义配置" class="headerlink" title="16.Vue脚手架的自定义配置"></a>16.Vue脚手架的自定义配置</h3><pre><code>A.通过 package.json 进行配置 [不推荐使用]    &quot;vue&quot;:{        &quot;devServer&quot;:{            &quot;port&quot;:&quot;9990&quot;,            &quot;open&quot;:true        }    }B.通过单独的配置文件进行配置，创建vue.config.js    module.exports = {        devServer:{            port:8888,            open:true        }    }</code></pre><h3 id="17-Element-UI的基本使用"><a href="#17-Element-UI的基本使用" class="headerlink" title="17.Element-UI的基本使用"></a>17.Element-UI的基本使用</h3><p>Element-UI:一套基于2.0的桌面端组件库<br>官网地址：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p><ul><li>A.安装：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure></li><li>B.导入使用：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导入组件</span><br><span class="line">import ElementUI from &quot;element-ui&quot;;</span><br><span class="line">&#x2F;&#x2F;导入样式</span><br><span class="line">import &quot;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;;</span><br><span class="line">&#x2F;&#x2F;安装插件</span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
了解模块化的相关规范,了解webpack,了解使用Vue单文件组件,能够搭建Vue脚手架,掌握Element-UI的使用
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="webpack" scheme="https://sparkparis.github.io/tags/webpack/"/>
    
      <category term="elemant-ui" scheme="https://sparkparis.github.io/tags/elemant-ui/"/>
    
      <category term="vue-cli" scheme="https://sparkparis.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记9-axios框架(网络模块封装)</title>
    <link href="https://sparkparis.github.io/2020/05/16/Vue%E7%AC%94%E8%AE%B09/"/>
    <id>https://sparkparis.github.io/2020/05/16/Vue%E7%AC%94%E8%AE%B09/</id>
    <published>2020-05-16T15:00:21.000Z</published>
    <updated>2020-05-18T10:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">axios框架的学习使用,涉及到网络安全方面的知识xss,CSRF,异步框架代理服务器Nginx<a id="more"></a><!-- TOC --><ul><li><a href="#12-网络模块的封装">12 网络模块的封装</a><ul><li><a href="#121-jsonp">12.1 jsonp</a></li><li><a href="#122-axios框架httpwwwaxios-jscomzh-cndocs">12.2 <a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">axios框架</a></a><ul><li><a href="#1221-认识axios网络模块">12.2.1 认识axios网络模块</a><ul><li><a href="#axios-api详细解析"><strong>axios API详细解析</strong></a><ul><li><a href="#axiosconfig">axios(config)</a></li><li><a href="#axiosurl-config">axios(url[, config])</a></li></ul></li><li><a href="#请求方法的别名">请求方法的别名</a></li><li><a href="#处理并发请求">处理并发请求</a></li><li><a href="#创建实例">创建实例</a><ul><li><a href="#axioscreate">axios.create()</a></li></ul></li><li><a href="#实例方法">实例方法</a></li><li><a href="#请求配置包括">请求配置包括</a></li><li><a href="#响应配置">响应配置</a></li><li><a href="#配置默认值">配置默认值</a><ul><li><a href="#全局的-axios-默认值">全局的 axios 默认值</a></li><li><a href="#自定义实例默认值">自定义实例默认值</a></li><li><a href="#配置的优先顺序">配置的优先顺序</a></li></ul></li><li><a href="#拦截器">拦截器</a></li></ul></li><li><a href="#1222-发送基本请求">12.2.2 发送基本请求</a></li><li><a href="#1223-axios发送并发请求">12.2.3 axios发送并发请求</a></li><li><a href="#1224-axios创建实例和设置默认配置">12.2.4 axios创建实例和设置默认配置</a></li><li><a href="#1225-axios的封装">12.2.5 axios的封装</a></li><li><a href="#1224-axios拦截器的使用">12.2.4 axios拦截器的使用</a></li></ul></li></ul></li><li><a href="#13-前端安全">13 前端安全</a><ul><li><a href="#131-xsshttpsjuejinimpost5bad9140e51d450e935c6d64">13.1 <a href="https://juejin.im/post/5bad9140e51d450e935c6d64" target="_blank" rel="noopener">xss</a></a></li><li><a href="#132-csrf攻击httpsjuejinimpost5bc009996fb9a05d0a055192">13.2 <a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noopener">CSRF攻击</a></a></li><li><a href="#133-nginxhttpsjuejinimpost5ea931866fb9a043815146fb异步框架网站服务器"><strong><a href="https://juejin.im/post/5ea931866fb9a043815146fb" target="_blank" rel="noopener">13.3 Nginx</a></strong>异步框架网站服务器</a></li></ul></li></ul><!-- /TOC --><p><a href="https://juejin.im/post/5d5b6a1b6fb9a06af23875fa" target="_blank" rel="noopener">axios中文</a></p><p><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">axios官方</a></p><h1 id="12-网络模块的封装"><a href="#12-网络模块的封装" class="headerlink" title="12 网络模块的封装"></a>12 网络模块的封装</h1><ul><li><p>常见的网络请求模块以及对比</p><ul><li>JSONP的原理和封装<ul><li>JSONP原理回顾</li><li>JSONP请求封装</li></ul></li><li>axios的内容详解<ul><li>认识axios网络模块</li><li>发送基本请求</li><li>axios创建实例</li><li>axios拦截器的使用</li></ul></li></ul></li><li><p>网络模块的选择:</p><p>Vue中发送网络请求有非常多的方式,开发中</p><ul><li><p>选择一: 传统的Ajax是基于XMLHttpRequest(XHR)</p><p>为什么不用它呢?</p><p>非常好解释, 配置和调用方式等非常混乱.</p><p>编码起来看起来就非常蛋疼.</p><p>所以真实开发中很少直接使用, 而是使用jQuery-Ajax</p></li><li><p>选择二: 在前面的学习中, 我们经常会使用jQuery-Ajax</p><p>相对于传统的Ajax非常好用.</p><p>为什么不选择它呢?</p><p>首先, 我们先明确一点: 在Vue的整个开发中都是不需要使用jQuery了.</p><p>那么, 就意味着为了方便我们进行一个网络请求, 特意引用一个jQuery, 你觉得合理吗?</p><p>jQuery的代码1w+行.</p><p>Vue的代码才1w+行.</p><p>完全没有必要为了用网络请求就引用这个重量级的框架.</p></li><li><p>选择三: 官方在Vue1.x的时候, 推出了Vue-resource.</p><p>Vue-resource的体积相对于jQuery小很多.</p><p>另外Vue-resource是官方推出的.</p><p>为什么不选择它呢?</p><p>在Vue2.0退出后, Vue作者就在GitHub的Issues中说明了去掉vue-resource, 并且以后也不会再更新.</p><p>那么意味着以后vue-reource不再支持新的版本时, 也不会再继续更新和维护.</p><p>对以后的项目开发和维护都存在很大的隐患.</p></li><li><p>选择四: 在说明不再继续更新和维护vue-resource的同时, 作者还<strong>推荐了一个框架: axios</strong>,为什么不用它呢?</p><p><strong>axios有非常多的优点, 并且用起来也非常方便.</strong></p></li></ul></li></ul><h2 id="12-1-jsonp"><a href="#12-1-jsonp" class="headerlink" title="12.1 jsonp"></a>12.1 jsonp</h2><ul><li><p>前端开发中, 我们一种常见的<strong>网络请求方式就是JSONP</strong>,使用JSONP最主要的<strong>原因</strong>往往是为了<strong>解决跨域访问的问题.</strong></p></li><li><p><strong>jsonp原理</strong></p><ul><li><p>JSONP的<strong>核心</strong>在于通过<code>&lt;script&gt;</code>标签的<strong>src来帮助我们请求数据</strong>.<strong>绕过同源政策的限制</strong></p><p>原因是我们的项目部署在domain1.com服务器上时, 是不能直接访问domain2.com服务器上的资料的.</p><p>这个时候, 我们利用<code>&lt;script&gt;</code>标签的src帮助我们去服务器请求到数据, 将数据当做一个javascript的函数来执行, 并且执行的过程中传入我们需要的json.</p><p>所以, <strong>封装jsonp的核心</strong>就在于我们<strong>监听window上的jsonp进行回调时的名称.</strong></p></li></ul></li></ul><img src="/2020/05/16/Vue%E7%AC%94%E8%AE%B09/image-20200517003123601.png" alt="image-20200517003123601" style="zoom:80%;"><ul><li><strong>jsonp请求的封装</strong><ul><li>没有promise的实现</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 拼接参数</span><br><span class="line">function handleParams(data) &#123;</span><br><span class="line">  let params &#x3D; &#39;&#39;;</span><br><span class="line">  for (let attr in data) &#123;</span><br><span class="line">    data[key] &amp;&amp; (params +&#x3D; &#39;&amp;&#39; + attr + &#39;&#x3D;&#39; + data[attr]);</span><br><span class="line">  &#125;</span><br><span class="line">  return params</span><br><span class="line">&#125;</span><br><span class="line">export default function (options) &#123;</span><br><span class="line">  &#x2F;&#x2F; 1.获取jsonp的url</span><br><span class="line">  const url &#x3D; options.url;</span><br><span class="line">  &#x2F;&#x2F; 2.创建script标签</span><br><span class="line">  const script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">  &#x2F;&#x2F; 3.创建callback函数名(不重复)</span><br><span class="line">  const callback &#x3D; &#39;jsonp&#39; + Math.random().toString().replace(&#39;.&#39;, &#39;&#39;);</span><br><span class="line">  &#x2F;&#x2F; 4.监听windows上的jsonp调用</span><br><span class="line">  window[callback] &#x3D; options.success;</span><br><span class="line">  &#x2F;&#x2F; 5.拼接参数,发送请求</span><br><span class="line">  let params &#x3D; handleParams(options.data);</span><br><span class="line">  script.src &#x3D; url + &#39;?callback&#x3D;&#39; + callback + params</span><br><span class="line">  &#x2F;&#x2F; 6.标签追加到页面</span><br><span class="line">  document.body.appendChild(script);</span><br><span class="line">  &#x2F;&#x2F; script添加onload()事件,执行结束,移出script标签</span><br><span class="line">  script.onload &#x3D; function () &#123;</span><br><span class="line">    document.body.removeChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于promise的实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 拼接参数</span><br><span class="line">function handleParams(data) &#123;</span><br><span class="line">  let params &#x3D; &#39;&#39;;</span><br><span class="line">  for (let attr in data) &#123;</span><br><span class="line">    data[attr] &amp;&amp; (params +&#x3D; &#39;&amp;&#39; + attr + data[attr])</span><br><span class="line">  &#125;</span><br><span class="line">  return params</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 封装jsonp(通过promise的方式)</span><br><span class="line">export default function (options) &#123;</span><br><span class="line">  &#x2F;&#x2F;1.  创建script标签</span><br><span class="line">  const script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">  &#x2F;&#x2F; 2.创建callback函数(不重名)</span><br><span class="line">  let callback &#x3D; &#39;jsonp&#39; + Math.random().toString().replace(&#39;.&#39;, &#39;&#39;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 将发送的操作封装在promise中</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 通过监听window中的callback执行</span><br><span class="line">    try &#123;</span><br><span class="line">      &#x2F;&#x2F; 3.监听windows上的jsonp,在全局添加回调函数,</span><br><span class="line">      window[callback] &#x3D; function (result) &#123;</span><br><span class="line">        &#x2F;&#x2F; 执行下一次的操作之前先移除上一次的script标签</span><br><span class="line">        this.document.removeChild(&#39;script&#39;);</span><br><span class="line">        &#x2F;&#x2F; 见回调函数中的参数返回</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;;&#x2F;&#x2F;将回调函数的对象赋值给全局函数对象</span><br><span class="line">      &#x2F;&#x2F; 4.拼接参数,发送请求</span><br><span class="line">      let params &#x3D; handleParams(optioms.data)</span><br><span class="line">      script.src &#x3D; options.url + callback + params;</span><br><span class="line">      &#x2F;&#x2F;5. 添加到页面中</span><br><span class="line">      document.body.appendChild(script);</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/05/16/Vue%E7%AC%94%E8%AE%B09/image-20200517151252727.png" alt="image-20200517151252727" style="zoom:50%;"><h2 id="12-2-axios框架"><a href="#12-2-axios框架" class="headerlink" title="12.2 axios框架"></a>12.2 <a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">axios框架</a></h2><h3 id="12-2-1-认识axios网络模块"><a href="#12-2-1-认识axios网络模块" class="headerlink" title="12.2.1 认识axios网络模块"></a>12.2.1 认识axios网络模块</h3><ul><li>Axios 是一个<strong>基于 promise 的 HTTP 库</strong>，可以用在浏览器和 node.js 中。</li><li>特性:<ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener">XSRF</a></li></ul></li><li>使用axios(axios是http库的框架,需要<strong>下载库文件并且导入才能使用</strong>)<ul><li>下载(npm的方式)<ul><li><code>$ npm i axios --save</code>开发依赖</li></ul></li><li>导入axios</li><li>使用axios</li></ul></li></ul><h4 id="axios-API详细解析"><a href="#axios-API详细解析" class="headerlink" title="axios API详细解析"></a><strong>axios API详细解析</strong></h4><h5 id="axios-config"><a href="#axios-config" class="headerlink" title="axios(config)"></a>axios(config)</h5><ul><li><p>通过axios传递相关配置来创建请求</p></li><li><p><strong>axios中config选项</strong></p><ul><li>config是一个对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">请求配置信息</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>注意请求配置信息中get请求属性-&gt;params,post请求-&gt;data属性</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 发送 POST 请求</span><br><span class="line">axios(&#123;</span><br><span class="line">  method: &#39;post&#39;,</span><br><span class="line">  url: &#39;&#x2F;user&#x2F;12345&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 获取远端图片</span><br><span class="line">axios(&#123;</span><br><span class="line">  method:&#39;get&#39;,</span><br><span class="line">  url:&#39;http:&#x2F;&#x2F;bit.ly&#x2F;2mTM3nY&#39;,</span><br><span class="line">  responseType:&#39;stream&#39;</span><br><span class="line">&#125;)</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(&#39;ada_lovelace.jpg&#39;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="axios-url-config"><a href="#axios-url-config" class="headerlink" title="axios(url[, config])"></a>axios(url[, config])</h5><ul><li>[]表示是可选的</li><li>发送get请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios(&#39;&#x2F;user&#x2F;123&#39;,&#123;请求配置信息&#125;)</span><br></pre></td></tr></table></figure><h4 id="请求方法的别名"><a href="#请求方法的别名" class="headerlink" title="请求方法的别名"></a>请求方法的别名</h4><ul><li>axios.request(config)</li><li>axios.get(url[, config])</li><li>axios.delete(url[, config])</li><li>axios.head(url[, config])</li><li>axios.options(url[, config])</li><li>axios.post(url[, data[, config]])</li><li>axios.put(url[, data[, config]])</li><li>axios.patch(url[, data[, config]])</li></ul><h4 id="处理并发请求"><a href="#处理并发请求" class="headerlink" title="处理并发请求"></a>处理并发请求</h4><ul><li>axios.all(iterable),类似于promise.all</li><li>axios.spread(callback),直接通过回调函数的方式获取返回值数组中的数值通过实参接收</li></ul><h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h4><ul><li>可以使用自定义配置新建一个 axios 实例,比如在不同的baseurl中发送请求,就可以单独创建实例</li></ul><h5 id="axios-create"><a href="#axios-create" class="headerlink" title="axios.create()"></a>axios.create()</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const instance &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: &#39;https:&#x2F;&#x2F;some-domain.com&#x2F;api&#x2F;&#39;,</span><br><span class="line">  timeout: 1000,</span><br><span class="line">  headers: &#123;&#39;X-Custom-Header&#39;: &#39;foobar&#39;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li><p>以下是可用的实例方法。<strong>指定的配置将与实例的配置合并</strong>。</p><ul><li><p>axios#request(config)</p></li><li><p>axios#get(url[, config])</p></li><li><p>axios#delete(url[, config])</p></li><li><p>axios#head(url[, config])</p></li><li><p>axios#options(url[, config])</p></li><li><p>axios#post(url[, data[, config]])</p></li><li><p>axios#put(url[, data[, config]])</p></li><li><p>axios#patch(url[, data[, config]])</p></li></ul></li></ul><h4 id="请求配置包括"><a href="#请求配置包括" class="headerlink" title="请求配置包括"></a>请求配置包括</h4><ul><li>这些是创建请求时可以用的配置选项。只有 <code>url</code> 是必需的。如果没有指定 <code>method</code>，请求将默认使用 <code>get</code> 方法。</li><li>注意在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &#x2F;&#x2F; &#96;url&#96; 是用于请求的服务器 URL</span><br><span class="line">  url: &#39;&#x2F;user&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;method&#96; 是创建请求时使用的方法</span><br><span class="line">  method: &#39;get&#39;, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;baseURL&#96; 将自动加在 &#96;url&#96; 前面，除非 &#96;url&#96; 是一个绝对 URL。</span><br><span class="line">  &#x2F;&#x2F; 它可以通过设置一个 &#96;baseURL&#96; 便于为 axios 实例的方法传递相对 URL</span><br><span class="line">  baseURL: &#39;https:&#x2F;&#x2F;some-domain.com&#x2F;api&#x2F;&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;transformRequest&#96; 允许在向服务器发送前，修改请求数据</span><br><span class="line">  &#x2F;&#x2F; 只能用在 &#39;PUT&#39;, &#39;POST&#39; 和 &#39;PATCH&#39; 这几个请求方法</span><br><span class="line">  &#x2F;&#x2F; 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br><span class="line">  transformRequest: [function (data, headers) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对 data 进行任意转换处理</span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;transformResponse&#96; 在传递给 then&#x2F;catch 前，允许修改响应数据</span><br><span class="line">  transformResponse: [function (data) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对 data 进行任意转换处理</span><br><span class="line">    return data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;headers&#96; 是即将被发送的自定义请求头</span><br><span class="line">  headers: &#123;&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;&#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;params&#96; 是即将与请求一起发送的 URL 参数</span><br><span class="line">  &#x2F;&#x2F; 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: 12345</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; &#96;paramsSerializer&#96; 是一个负责 &#96;params&#96; 序列化的函数</span><br><span class="line">  &#x2F;&#x2F; (e.g. https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;qs, http:&#x2F;&#x2F;api.jquery.com&#x2F;jquery.param&#x2F;)</span><br><span class="line">  paramsSerializer: function(params) &#123;</span><br><span class="line">    return Qs.stringify(params, &#123;arrayFormat: &#39;brackets&#39;&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;data&#96; 是作为请求主体被发送的数据</span><br><span class="line">  &#x2F;&#x2F; 只适用于这些请求方法 &#39;PUT&#39;, &#39;POST&#39;, 和 &#39;PATCH&#39;</span><br><span class="line">  &#x2F;&#x2F; 在没有设置 &#96;transformRequest&#96; 时，必须是以下类型之一：</span><br><span class="line">  &#x2F;&#x2F; - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br><span class="line">  &#x2F;&#x2F; - 浏览器专属：FormData, File, Blob</span><br><span class="line">  &#x2F;&#x2F; - Node 专属： Stream</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;timeout&#96; 指定请求超时的毫秒数(0 表示无超时时间)</span><br><span class="line">  &#x2F;&#x2F; 如果请求话费了超过 &#96;timeout&#96; 的时间，请求将被中断</span><br><span class="line">  timeout: 1000,</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; &#96;withCredentials&#96; 表示跨域请求时是否需要使用凭证</span><br><span class="line">  withCredentials: false, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;adapter&#96; 允许自定义处理请求，以使测试更轻松</span><br><span class="line">  &#x2F;&#x2F; 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span><br><span class="line">  adapter: function (config) &#123;</span><br><span class="line">    &#x2F;* ... *&#x2F;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; &#96;auth&#96; 表示应该使用 HTTP 基础验证，并提供凭据</span><br><span class="line">  &#x2F;&#x2F; 这将设置一个 &#96;Authorization&#96; 头，覆写掉现有的任意使用 &#96;headers&#96; 设置的自定义 &#96;Authorization&#96;头</span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: &#39;janedoe&#39;,</span><br><span class="line">    password: &#39;s00pers3cret&#39;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; &#96;responseType&#96; 表示服务器响应的数据类型，可以是 &#39;arraybuffer&#39;, &#39;blob&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;</span><br><span class="line">  responseType: &#39;json&#39;, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;responseEncoding&#96; indicates encoding to use for decoding responses</span><br><span class="line">  &#x2F;&#x2F; Note: Ignored for &#96;responseType&#96; of &#39;stream&#39; or client-side requests</span><br><span class="line">  responseEncoding: &#39;utf8&#39;, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; &#96;xsrfCookieName&#96; 是用作 xsrf token 的值的cookie的名称</span><br><span class="line">  xsrfCookieName: &#39;XSRF-TOKEN&#39;, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;xsrfHeaderName&#96; is the name of the http header that carries the xsrf token value</span><br><span class="line">  xsrfHeaderName: &#39;X-XSRF-TOKEN&#39;, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; &#96;onUploadProgress&#96; 允许为上传处理进度事件</span><br><span class="line">  onUploadProgress: function (progressEvent) &#123;</span><br><span class="line">    &#x2F;&#x2F; Do whatever you want with the native progress event</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;onDownloadProgress&#96; 允许为下载处理进度事件</span><br><span class="line">  onDownloadProgress: function (progressEvent) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对原生进度事件的处理</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; &#96;maxContentLength&#96; 定义允许的响应内容的最大尺寸</span><br><span class="line">  maxContentLength: 2000,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;validateStatus&#96; 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 &#96;validateStatus&#96; 返回 &#96;true&#96; (或者设置为 &#96;null&#96; 或 &#96;undefined&#96;)，promise 将被 resolve; 否则，promise 将被 rejecte</span><br><span class="line">  validateStatus: function (status) &#123;</span><br><span class="line">    return status &gt;&#x3D; 200 &amp;&amp; status &lt; 300; &#x2F;&#x2F; default</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;maxRedirects&#96; 定义在 node.js 中 follow 的最大重定向数目</span><br><span class="line">  &#x2F;&#x2F; 如果设置为0，将不会 follow 任何重定向</span><br><span class="line">  maxRedirects: 5, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;socketPath&#96; defines a UNIX Socket to be used in node.js.</span><br><span class="line">  &#x2F;&#x2F; e.g. &#39;&#x2F;var&#x2F;run&#x2F;docker.sock&#39; to send requests to the docker daemon.</span><br><span class="line">  &#x2F;&#x2F; Only either &#96;socketPath&#96; or &#96;proxy&#96; can be specified.</span><br><span class="line">  &#x2F;&#x2F; If both are specified, &#96;socketPath&#96; is used.</span><br><span class="line">  socketPath: null, &#x2F;&#x2F; default</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;httpAgent&#96; 和 &#96;httpsAgent&#96; 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span><br><span class="line">  &#x2F;&#x2F; &#96;keepAlive&#96; 默认没有启用</span><br><span class="line">  httpAgent: new http.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line">  httpsAgent: new https.Agent(&#123; keepAlive: true &#125;),</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#39;proxy&#39; 定义代理服务器的主机名称和端口</span><br><span class="line">  &#x2F;&#x2F; &#96;auth&#96; 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class="line">  &#x2F;&#x2F; 这将会设置一个 &#96;Proxy-Authorization&#96; 头，覆写掉已有的通过使用 &#96;header&#96; 设置的自定义 &#96;Proxy-Authorization&#96; 头。</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: &#39;127.0.0.1&#39;,</span><br><span class="line">    port: 9000,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: &#39;mikeymike&#39;,</span><br><span class="line">      password: &#39;rapunz3l&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;cancelToken&#96; 指定用于取消请求的 cancel token</span><br><span class="line">  &#x2F;&#x2F; （查看后面的 Cancellation 这节了解更多）</span><br><span class="line">  cancelToken: new CancelToken(function (cancel) &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="响应配置"><a href="#响应配置" class="headerlink" title="响应配置"></a>响应配置</h4><ul><li>某个请求的响应包含以下信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; &#96;data&#96; 由服务器提供的响应</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;status&#96; 来自服务器响应的 HTTP 状态码</span><br><span class="line">  status: 200,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;statusText&#96; 来自服务器响应的 HTTP 状态信息</span><br><span class="line">  statusText: &#39;OK&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; &#96;headers&#96; 服务器响应的头</span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; &#96;config&#96; 是为请求提供的配置信息</span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line"> &#x2F;&#x2F; &#39;request&#39;</span><br><span class="line">  &#x2F;&#x2F; &#96;request&#96; is the request that generated this response</span><br><span class="line">  &#x2F;&#x2F; It is the last ClientRequest instance in node.js (in redirects)</span><br><span class="line">  &#x2F;&#x2F; and an XMLHttpRequest instance the browser</span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>then</code> 时，你将接收下面这样的响应 :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#39;&#x2F;user&#x2F;12345&#39;)</span><br><span class="line">  .then(function(response) &#123;</span><br><span class="line">    console.log(response.data);</span><br><span class="line">    console.log(response.status);</span><br><span class="line">    console.log(response.statusText);</span><br><span class="line">    console.log(response.headers);</span><br><span class="line">    console.log(response.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>在使用 <code>catch</code> 时，或传递 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noopener">rejection callback</a> 作为 <code>then</code> 的第二个参数时，响应可以通过 <code>error</code> 对象可被使用，正如在<a href="https://www.kancloud.cn/yunye/axios/234845#handling-errors" target="_blank" rel="noopener">错误处理</a>这一节所讲。</li></ul><h4 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a>配置默认值</h4><ul><li>你可以指定将被用在各个请求的配置默认值</li></ul><h5 id="全局的-axios-默认值"><a href="#全局的-axios-默认值" class="headerlink" title="全局的 axios 默认值"></a>全局的 axios 默认值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL &#x3D; &#39;https:&#x2F;&#x2F;api.example.com&#39;;</span><br><span class="line">axios.defaults.headers.common[&#39;Authorization&#39;] &#x3D; AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;x-www-form-urlencoded&#39;;</span><br></pre></td></tr></table></figure><h5 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Set config defaults when creating the instance</span><br><span class="line">const instance &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: &#39;https:&#x2F;&#x2F;api.example.com&#39;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Alter defaults after instance has been created</span><br><span class="line">instance.defaults.headers.common[&#39;Authorization&#39;] &#x3D; AUTH_TOKEN;</span><br></pre></td></tr></table></figure><h5 id="配置的优先顺序"><a href="#配置的优先顺序" class="headerlink" title="配置的优先顺序"></a>配置的优先顺序</h5><p>配置会以一个优先顺序进行合并。这个顺序是：在 <code>lib/defaults.js</code> 找到的库的默认值，然后是实例的 <code>defaults</code> 属性，最后是请求的 <code>config</code> 参数。后者将优先于前者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 此时超时配置的默认值是 &#96;0&#96;</span><br><span class="line">var instance &#x3D; axios.create();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 覆写库的超时默认值</span><br><span class="line">&#x2F;&#x2F; 现在，在超时前，所有请求都会等待 2.5 秒</span><br><span class="line">instance.defaults.timeout &#x3D; 2500;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 为已知需要花费很长时间的请求覆写超时设置</span><br><span class="line">instance.get(&#39;&#x2F;longRequest&#39;, &#123;</span><br><span class="line">  timeout: 5000</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><ul><li>在请求或响应被 <code>then</code> 或 <code>catch</code> 处理前拦截它们。</li><li>请求拦截:<code>axios.interceptors.request.use(function(config){},function(err)}{})</code></li><li>响应拦截:<code>axios.interceptors.response.use(function(config){},function(err)}{})</code></li><li><strong>注意</strong>:拦截之后的操作执行之后必须将拦截的内容返回才能执行后续的请求操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    &#x2F;&#x2F; 在发送请求之前做些什么</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对请求错误做些什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对响应数据做点什么</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 对响应错误做点什么</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>移出拦截器<ul><li>格式:<code>axios.interceptors.request.eject(拦截器)</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const myInterceptor &#x3D; axios.interceptors.request.use(function () &#123;&#x2F;*...*&#x2F;&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><ul><li>自定义 axios 实例添加拦截器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const instance &#x3D; axios.create();</span><br><span class="line">instance.interceptors.request.use(function () &#123;&#x2F;*...*&#x2F;&#125;);</span><br></pre></td></tr></table></figure><h3 id="12-2-2-发送基本请求"><a href="#12-2-2-发送基本请求" class="headerlink" title="12.2.2 发送基本请求"></a>12.2.2 发送基本请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.axios的基本使用axios(config),返回值就是一个promise</span><br><span class="line">axios(&#123;</span><br><span class="line">  url: &quot;http:&#x2F;&#x2F;123.207.32.32:8000&#x2F;home&#x2F;multidata&quot;</span><br><span class="line">&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 这里可以直接获取返回值</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">2.axios.get(config)</span><br><span class="line">axios.get(&#123;</span><br><span class="line">  url: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#x2F;home&#x2F;data&#39;,</span><br><span class="line">  &#x2F;&#x2F; 专门针对get请求的参数</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: &#39;pop&#39;,</span><br><span class="line">    page: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 3.axios.post(config)</span><br><span class="line">axios.post(&#123;</span><br><span class="line">  url: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#x2F;home&#39;,</span><br><span class="line">  &#x2F;&#x2F; 参数传递是通过请求体传递的这里,只有post可用</span><br><span class="line">  post: &#123;</span><br><span class="line">    name: &#39;张三&#39;,</span><br><span class="line">    age: 12</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="12-2-3-axios发送并发请求"><a href="#12-2-3-axios发送并发请求" class="headerlink" title="12.2.3 axios发送并发请求"></a>12.2.3 axios发送并发请求</h3><ul><li><p>我们可能需求同时发送两个请求</p><p>使用axios.all, 可以放入多个请求的数组.</p><p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.axios发送并发请求,和promise.all类似</span><br><span class="line">&#x2F;&#x2F; axios.spread()可以将返回的数组在参数中接收</span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">  url: &#39;&#x2F;home&#x2F;multidata&#39;</span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">  url: &#39;&#x2F;home&#x2F;multidata&#39;</span><br><span class="line">&#125;)]).then(axios.spread((res1, res2) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res1);</span><br><span class="line">  console.log(res2);</span><br><span class="line"></span><br><span class="line">&#125;)).catch((err &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;执行失败,返回值执行失败的错误信息</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h3 id="12-2-4-axios创建实例和设置默认配置"><a href="#12-2-4-axios创建实例和设置默认配置" class="headerlink" title="12.2.4 axios创建实例和设置默认配置"></a>12.2.4 axios创建实例和设置默认配置</h3><ul><li>设置默认配置(全局)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 4.使用全局的axios对默认的服务器地址进行默认设置,此时在写utl中就不用了写baseUel,注意设置一定要提前设置</span><br><span class="line">&#x2F;&#x2F; 设置全局的默认路径</span><br><span class="line">&#x2F;&#x2F; axios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;;</span><br><span class="line">&#x2F;&#x2F; &#x2F;&#x2F; 设置延时</span><br><span class="line">&#x2F;&#x2F; axios.defaults.timeout &#x3D; 5000</span><br></pre></td></tr></table></figure><ul><li><p>当项目部署在多个服务器上时,此时就不能设置全局默认配置,</p><ul><li>解决方案<ul><li>通过异步框架的<strong><a href="https://juejin.im/post/5ea931866fb9a043815146fb" target="_blank" rel="noopener">网站服务器Nginx</a></strong></li><li>通过创建axios实例,在实例对象中单独设置baseUrl</li></ul></li><li>创建实例:<code>const instance = axios.create(config)</code>,</li><li>调用实例对象:<code>instance(config)</code>,和axios的调用一样</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 当项目部署在多个服务器时(涉及到异步框架的网页服务器Nginx,作为中间的代理服务器分发出去),此时的baseUrl是不一致的,这是后就不能设置全局的baseUrl,解决方案:通过创建axios的实例,在每个实例中设置,此时创建的每个实例的用法和axios一样</span><br><span class="line">const instance &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: &#39;http:&#x2F;&#x2F;123.27.32.32:8000&#39;,</span><br><span class="line">  timeout: 5000</span><br><span class="line">&#125;)</span><br><span class="line">instance(&#123;</span><br><span class="line">  url: &#39;&#x2F;home&#x2F;multidata&#39;,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: &#39;pop&#39;,</span><br><span class="line">    page: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">const instance2 &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: &#39;http:&#x2F;&#x2F;123.27.32.32:8000&#39;,</span><br><span class="line">  timeout: 5000</span><br><span class="line">&#125;)</span><br><span class="line">instance2(&#123;</span><br><span class="line">  url: &#39;&#x2F;home&#x2F;multidata&#39;,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: &#39;pop&#39;,</span><br><span class="line">    page: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="12-2-5-axios的封装"><a href="#12-2-5-axios的封装" class="headerlink" title="12.2.5 axios的封装"></a>12.2.5 axios的封装</h3><ul><li><p>解决的问题:在使用axios的时候封装在进行代码重构时方便重构,封装的方式如下</p><h4 id="方式1-传递两个回调函数"><a href="#方式1-传递两个回调函数" class="headerlink" title="方式1:传递两个回调函数"></a>方式1:传递两个回调函数</h4><ul><li>封装:在src下面创建network-&gt;request.js<ul><li>require(config,success,error)<ul><li>config(对象,success(回调函数,error(回调函数)))</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">export function request(config, success, error) &#123;</span><br><span class="line">  &#x2F;&#x2F; instance返回的promise,axios支持promise,创建axios实例对象</span><br><span class="line">  const instance &#x3D; axios.create(&#123;</span><br><span class="line">    baseURL: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;,</span><br><span class="line">    timeout: 5000</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F; 发送请求</span><br><span class="line">  instance(config).then(res &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 通过回调函数的方式将返回值获取,回调函数在使用时自定义,通过参数拿到返回值</span><br><span class="line">    success(res);</span><br><span class="line">  &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">    error(err);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用:导入直接使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; request &#125; from &quot;.&#x2F;network&#x2F;request&quot;;</span><br><span class="line">request(&#123;</span><br><span class="line">  url: &#39;&#x2F;home&#x2F;multidata&#39;</span><br><span class="line">&#125;, (res) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; success函数,通过res接收参数</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;</span><br><span class="line">  , err &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;error函数</span><br><span class="line">    console.log(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="方式2-在config中传入两回调函数作为参数"><a href="#方式2-在config中传入两回调函数作为参数" class="headerlink" title="方式2:在config中传入两回调函数作为参数"></a>方式2:在config中传入两回调函数作为参数</h4><ul><li>封装:在src下面创建network-&gt;request.js<ul><li>request(config)<ul><li>config:baseConfig(对象),success(回调函数),error(回调函数)</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">export function request(config) &#123;</span><br><span class="line">  const instance &#x3D; axios.create(&#123;</span><br><span class="line">    baseURL: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;,</span><br><span class="line">    timeout: 5000</span><br><span class="line">  &#125;);</span><br><span class="line">  instance(config.baseConfig).then(res &#x3D;&gt; &#123;</span><br><span class="line">    config.success(res)</span><br><span class="line">  &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">    config.error(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; request &#125; from &quot;.&#x2F;network&#x2F;request&quot;;</span><br><span class="line">request(&#123;</span><br><span class="line">  baseConfig: &#123;</span><br><span class="line">    url: &#39;&#x2F;home&#x2F;multidata&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function (res) &#123;</span><br><span class="line">    &#x2F;&#x2F; success函数,通过res接收参数</span><br><span class="line">    console.log(res);</span><br><span class="line">  &#125;,</span><br><span class="line">  error: function (err) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="方式3-返回promise对象"><a href="#方式3-返回promise对象" class="headerlink" title="方式3:返回promise对象"></a>方式3:返回promise对象</h4><ul><li>封装:在src下面创建network-&gt;request.js<ul><li>axios执行的异步操作,将异步操作包裹在promise对象中获取去返回值</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">&#x2F;&#x2F; 封装方式3(promise方式将异步执行包裹在promise内部,通过then和catch接收响应结果)</span><br><span class="line">export function request(config) &#123;</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    const instance &#x3D; axios.create(&#123;</span><br><span class="line">      baseURL: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;,</span><br><span class="line">      timeout: 5000</span><br><span class="line">    &#125;);</span><br><span class="line">    instance(config).then(res &#x3D;&gt; &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用封装:通过then和catch来自动执行resolve()和reject</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request(&#123;</span><br><span class="line">  url: &#39;&#x2F;home&#x2F;multidata&#39;</span><br><span class="line">&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="方式4-直接返回promise-推荐使用这种"><a href="#方式4-直接返回promise-推荐使用这种" class="headerlink" title="方式4:直接返回promise(推荐使用这种)"></a>方式4:直接返回promise(推荐使用这种)</h4><ul><li>封装:在src下面创建network-&gt;request.js<ul><li>axios的实例对象返回的本身就是promise对象,不需要再次封装,直接返回</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export function request(config) &#123;</span><br><span class="line">  &#x2F;&#x2F; 1.创建axios实例对象</span><br><span class="line">  const instance &#x3D; axios.create(&#123;</span><br><span class="line">    baseURL: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;,</span><br><span class="line">    timeout: 5000</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F; 拦截器内容在拦截器的使用部分</span><br><span class="line"> </span><br><span class="line">  &#x2F;&#x2F; 发送请求</span><br><span class="line">  return instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用,和方式3一样</li></ul></li></ul><h3 id="12-2-4-axios拦截器的使用"><a href="#12-2-4-axios拦截器的使用" class="headerlink" title="12.2.4 axios拦截器的使用"></a>12.2.4 axios拦截器的使用</h3><ul><li>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。</li><li><strong>注意在每次拦截的时候,操作执行完毕需要将拦截 的内容return后续请求才会执行</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2.1 请求拦截器的作用</span><br><span class="line"> instance.interceptors.request.use(config &#x3D;&gt; &#123;</span><br><span class="line">   &#x2F;&#x2F; 1.比如config中的一些信息不符合服务器的要求</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 2.比如每次发送网络请求时, 都希望在界面中显示一个请求的图标</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 3.某些网络请求(比如登录(token)), 必须携带一些特殊的信息</span><br><span class="line">   return config</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 2.2 响应拦截</span><br><span class="line"> instance.interceptors.response.use(res &#x3D;&gt; &#123;</span><br><span class="line">   console.log(res)</span><br><span class="line">   &#x2F;&#x2F; 每次拦截之后才做之后必须返回才能执行后续操作</span><br><span class="line">   return res.data</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>请求拦截器的可以做的事情:</p><ol><li>比如config中的一些信息不符合服务器的要求</li><li>比如每次发送网络请求时, 都希望在界面中显示一个请求的图标</li><li>某些网络请求(比如登录(token)), 必须携带一些特殊的信息</li></ol></li><li><p>请求拦截中错误拦截较少，通常都是配置相关的拦截</p><p>可能的错误比如请求超时，可以将页面跳转到一个错误页面中。</p></li><li><p>响应拦截中完成的事情：</p><ul><li>响应的成功拦截中，主要是对数据进行过滤。</li><li>响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</li></ul></li><li><p>拦截器参数:参数1:正确拦截函数;参数2:错误拦截函数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response&#x2F;request.use(正确拦截回调函数,错误拦截回调函数)</span><br></pre></td></tr></table></figure><h2 id="12-3-axios和vue-react框架的整合"><a href="#12-3-axios和vue-react框架的整合" class="headerlink" title="12.3 axios和vue/react框架的整合"></a>12.3 axios和vue/react框架的整合</h2><h3 id="vue-axios"><a href="#vue-axios" class="headerlink" title="vue-axios"></a><a href="http://www.axios-js.com/zh-cn/docs/vue-axios.html" target="_blank" rel="noopener">vue-axios</a></h3><ul><li>基于vue的axios的封装</li></ul><h2 id="vue-axios-plugin"><a href="#vue-axios-plugin" class="headerlink" title="vue-axios-plugin"></a><a href="http://www.axios-js.com/zh-cn/docs/vue-axios-plugin.html" target="_blank" rel="noopener">vue-axios-plugin</a></h2><ul><li>vuejs项目的axios插件</li></ul><h3 id="react-axios"><a href="#react-axios" class="headerlink" title="react-axios"></a><a href="http://www.axios-js.com/zh-cn/docs/react-axios.html" target="_blank" rel="noopener">react-axios</a></h3><ul><li>适用于react框架的Axios 组件， 具有 child function callback.<br>在render阶段进行异步请求。</li></ul><h1 id="13-前端安全"><a href="#13-前端安全" class="headerlink" title="13 前端安全"></a>13 前端安全</h1><h2 id="13-1-xss"><a href="#13-1-xss" class="headerlink" title="13.1 xss"></a>13.1 <a href="https://juejin.im/post/5bad9140e51d450e935c6d64" target="_blank" rel="noopener">xss</a></h2><h2 id="13-2-CSRF攻击"><a href="#13-2-CSRF攻击" class="headerlink" title="13.2 CSRF攻击"></a>13.2 <a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noopener">CSRF攻击</a></h2><h2 id="13-3-Nginx异步框架网站服务器"><a href="#13-3-Nginx异步框架网站服务器" class="headerlink" title="13.3 Nginx异步框架网站服务器"></a><strong><a href="https://juejin.im/post/5ea931866fb9a043815146fb" target="_blank" rel="noopener">13.3 Nginx</a></strong>异步框架网站服务器</h2><h1 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h1><h2 id="前端交互概述"><a href="#前端交互概述" class="headerlink" title="前端交互概述"></a>前端交互概述</h2><ul><li><p>接口调用的方式有哪些</p><ul><li><p>原生ajax</p></li><li><p>基于jQuery的ajax</p></li><li><p>Fetch调用:ajax+promise的使用,fetch的接口返回值是promise</p></li><li><p>Promise:结局了异步深层嵌套</p></li><li><p>axios接口:接口返回值也是promise</p></li></ul></li><li><p>url 地址格式有哪些</p><ul><li><p>传统的url</p></li><li><p>Restful形式的url</p></li></ul></li></ul><h2 id="fetch-API使用"><a href="#fetch-API使用" class="headerlink" title="fetch API使用"></a><a href="https://zh.javascript.info/fetch" target="_blank" rel="noopener">fetch API使用</a></h2><ul><li>fetch 就是 ajax + Promise. 使用的方式和 jquery 提供的 $.ajax() 差不多</li><li>fetch默认是get请求</li><li>详细使用查看此<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">链接MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
axios框架的学习使用,涉及到网络安全方面的知识xss,CSRF,异步框架代理服务器Nginx
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="http" scheme="https://sparkparis.github.io/tags/http/"/>
    
      <category term="vue" scheme="https://sparkparis.github.io/tags/vue/"/>
    
      <category term="axios" scheme="https://sparkparis.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记8-Vuex详解</title>
    <link href="https://sparkparis.github.io/2020/05/13/Vue%E7%AC%94%E8%AE%B08/"/>
    <id>https://sparkparis.github.io/2020/05/13/Vue%E7%AC%94%E8%AE%B08/</id>
    <published>2020-05-13T08:47:07.000Z</published>
    <updated>2020-05-18T14:10:02.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">promise的使用,Vuex详细使用,<a id="more"></a><!-- TOC --><ul><li><a href="#11-vuexhttpsvuexvuejsorgzhguide状态管理">11 <a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vuex</a>状态管理</a><ul><li><a href="#111-vuex介绍">11.1 Vuex介绍</a><ul><li><a href="#vuex">Vuex</a></li><li><a href="#vuex核心store">Vuex核心store</a></li><li><a href="#页面状态管理">页面状态管理</a></li><li><a href="#vuex基本思想">Vuex基本思想</a></li><li><a href="#vue官方调试工具vue-devtools">Vue官方调试工具vue devtools</a></li></ul></li><li><a href="#112-vuex的基本使用">11.2 Vuex的基本使用</a><ul><li><a href="#1121-基本使用">11.2.1 基本使用</a></li><li><a href="#1122-modules涉及知识点">11.2.2 modules涉及知识点</a><ul><li><a href="#vuex中数据的响应式原理">Vuex中数据的响应式原理</a></li><li><a href="#mutation常量类型"><strong>Mutation常量类型</strong></a></li></ul></li><li><a href="#1123-vuexhttpsvuexvuejsorgzhapivuex-store详细使用">11.2.3 <a href="https://vuex.vuejs.org/zh/api/#vuex-store" target="_blank" rel="noopener">Vuex</a>详细使用</a><ul><li><a href="#vuexstore">Vuex.Store</a></li><li><a href="#vuexstore-构造器选项">Vuex.Store 构造器选项</a><ul><li><a href="#statehttpsvuexvuejsorgzhguidestatehtml"><a href="https://vuex.vuejs.org/zh/guide/state.html" target="_blank" rel="noopener">state</a></a></li><li><a href="#mutationshttpsvuexvuejsorgzhguidemutationshtml"><a href="https://vuex.vuejs.org/zh/guide/mutations.html" target="_blank" rel="noopener">mutations</a></a></li><li><a href="#actionshttpsvuexvuejsorgzhguideactionshtml"><a href="https://vuex.vuejs.org/zh/guide/actions.html" target="_blank" rel="noopener">actions</a></a></li><li><a href="#gettershttpsvuexvuejsorgzhguidegettershtml"><a href="https://vuex.vuejs.org/zh/guide/getters.html" target="_blank" rel="noopener">getters</a></a></li><li><a href="#moduleshttpsvuexvuejsorgzhguidemoduleshtml"><a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">modules</a></a></li></ul></li><li><a href="#vuexstore-实例属性httpsvuexvuejsorgzhapivuex-store"><a href="https://vuex.vuejs.org/zh/api/#vuex-store" target="_blank" rel="noopener">Vuex.Store 实例属性</a></a><ul><li><a href="#state">state</a></li><li><a href="#getters">getters</a></li></ul></li><li><a href="#vuexstore-实例方法">Vuex.Store 实例方法</a><ul><li><a href="#commithttpsvuexvuejsorgzhapicommit"><a href="https://vuex.vuejs.org/zh/api/#commit" target="_blank" rel="noopener">commit</a></a></li><li><a href="#dispatchhttpsvuexvuejsorgzhapidispatch"><a href="https://vuex.vuejs.org/zh/api/#dispatch" target="_blank" rel="noopener">dispatch</a></a></li></ul></li></ul></li><li><a href="#1124-vuex模块化管理">11.2.4 Vuex模块化管理</a></li></ul></li></ul></li><li><a href="#补充promise的使用">补充promise的使用</a><ul><li><a href="#promise介绍">promise介绍</a></li><li><a href="#promisehttpsdevelopermozillaorgzh-cndocswebjavascriptreferenceglobal_objectspromise的基本使用"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">promise</a>的基本使用</a></li><li><a href="#链式编程">链式编程</a></li><li><a href="#promiseallhttpsdevelopermozillaorgzh-cndocswebjavascriptreferenceglobal_objectspromiseall"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a></a></li></ul></li></ul><!-- /TOC --><h1 id="11-Vuex状态管理"><a href="#11-Vuex状态管理" class="headerlink" title="11 Vuex状态管理"></a>11 <a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vuex</a>状态管理</h1><h2 id="11-1-Vuex介绍"><a href="#11-1-Vuex介绍" class="headerlink" title="11.1 Vuex介绍"></a>11.1 Vuex介绍</h2><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>,是一个<strong>插件</strong><ul><li>它采用 <strong>集中式存储管理</strong> 应用的所有组件的<strong>状态</strong>，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">devtools</a><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener"> extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</li></ul></li></ul><h3 id="Vuex核心store"><a href="#Vuex核心store" class="headerlink" title="Vuex核心store"></a>Vuex核心store</h3><ul><li><p>每一个 <strong>Vuex 应用的核心就是 store（仓库）</strong>。“store”基本上就是一个容器，它包含着你的应用中大部分的<strong>状态 (state)</strong>。Vuex 和单纯的全局对象有以下两点不同：</p><ul><li><strong>Vuex 的状态存储是响应式</strong>的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li><strong>你不能直接改变 store 中的状态</strong>。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515162651936.png" alt="image-20200515162651936"></p></li><li><p>Vuex管理的状态包括(<strong>多个组件间共享</strong>):</p><ul><li>如果你做过大型开放，你一定遇到过多个状态，在多个界面间的共享问题。</li><li>比如用户的登录状态、用户名称、头像、地理位置信息等等。</li><li>比如商品的收藏、购物车中的物品等等。</li><li>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的</li></ul></li><li><p><strong>Vuex实现了组件共享和响应式</strong></p></li></ul><h3 id="页面状态管理"><a href="#页面状态管理" class="headerlink" title="页面状态管理"></a>页面状态管理</h3><ul><li><p><strong>单页面的状态管理</strong></p><ul><li>State：不用多说，就是我们的状态。确定应用的数据源（你姑且可以当做就是data中的属性）</li><li>View：视图层，可以针对State的变化，显示不同的信息。</li><li>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515151218266.png" alt="image-20200515151218266"></p></li><li><p><strong>多页面状态管理</strong></p><ul><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。</li></ul></li></ul><h3 id="Vuex基本思想"><a href="#Vuex基本思想" class="headerlink" title="Vuex基本思想"></a>Vuex基本思想</h3><ul><li><strong>Vuex背后的基本思想</strong>:<strong>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</strong><ul><li>即:将共享的状态抽取出来，交给我们的大管家，统一进行管理。按照我<strong>规定好的</strong>规定，进行访问和修改等操作</li></ul></li></ul><h3 id="Vue官方调试工具vue-devtools"><a href="#Vue官方调试工具vue-devtools" class="headerlink" title="Vue官方调试工具vue devtools"></a>Vue官方调试工具vue devtools</h3><ul><li><p><strong>Vue 的官方调试工具 devtools extension</strong>的安装</p><ul><li>在浏览器的设置中添加扩展程序devtools</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515210123924.png" alt="image-20200515210123924"></p><ul><li>在运行的程序中可以看到vue,点击进行程序的调试</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515210726955.png" alt="image-20200515210726955"></p></li></ul><h2 id="11-2-Vuex的基本使用"><a href="#11-2-Vuex的基本使用" class="headerlink" title="11.2 Vuex的基本使用"></a>11.2 Vuex的基本使用</h2><h3 id="11-2-1-基本使用"><a href="#11-2-1-基本使用" class="headerlink" title="11.2.1 基本使用"></a>11.2.1 基本使用</h3><ul><li><p>使用步骤:(<strong>Vuex是一个插件,所以在使用中必须通过<a href="https://vuejs.bootcss.com/api/#Vue-use" target="_blank" rel="noopener">Vue.use(Vuex)</a>来安装插件才能使用</strong>)</p><ul><li>下载:用npm进行安装(开发时依赖)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><ul><li>导入,并安装插件Vue.use(Vuex)</li><li>创建实例对象store,之后可以通过<strong>$store</strong>来获取实例对象store(单独创建文件夹store-&gt;index.js)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">&#x2F;&#x2F; 导入</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">&#x2F;&#x2F; 1.安装插件</span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2 创建对象</span><br><span class="line">const state &#x3D; &#123;</span><br><span class="line">  count: 1000</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; mutations &#x3D; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; actions &#x3D; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F; getters &#x3D; &#123;&#125;</span><br><span class="line">&#x2F;&#x2F;构造器Vuex.Store</span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  &#x2F;&#x2F; mutations,</span><br><span class="line">  &#x2F;&#x2F; actions,</span><br><span class="line">  &#x2F;&#x2F; getters,</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 之后可以直接通过$store来获取状态管理对象store</span><br><span class="line">export default store</span><br></pre></td></tr></table></figure><ul><li><strong>Vuex 通过 <code>store</code> 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中</strong>,在入口文件中引入store-&gt;index.js文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">引入store</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  &#x2F;&#x2F;添加store,Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这里store和router一样,可以通过<strong>$store</strong>来获取Vue对象中的状态管理实例<strong>store</strong><ul><li><strong>在script标签的组件内部通过<code>this.$store</code>获取到实例对象,并通过<code>.store属性名</code>获取属性值</strong></li><li><strong>在.vue文件组件的模板中通过<code>$store</code>获取,这里获取的是全局store对象</strong></li></ul></li></ul></li><li><p>Vuex 依赖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">Promise</a>。如果你支持的浏览器并没有实现 Promise (比如 IE)，那么你可以使用一个 polyfill 的库，例如 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">es6-promise</a>。</p></li></ul><h3 id="11-2-2-modules涉及知识点"><a href="#11-2-2-modules涉及知识点" class="headerlink" title="11.2.2 modules涉及知识点"></a>11.2.2 modules涉及知识点</h3><h4 id="Vuex中数据的响应式原理"><a href="#Vuex中数据的响应式原理" class="headerlink" title="Vuex中数据的响应式原理"></a>Vuex中数据的响应式原理</h4><ul><li><p>Vuex的store中的<strong>state是响应式的,</strong> 当state中的数据发生改变时, Vue组件会自动更新</p></li><li><p><strong>Mutation响应规则</strong>(可以发生响应的前提)</p><ul><li><strong>提前在store中初始化好所需的属性</strong>(响应式的前提条件)<ul><li><strong>原理</strong>:在state中初始化好属性后,该属性会被直接添加到响应式的系统里,Vue中的响应式系统会实时监控watch(dev-&gt;watches)这些属性的变化并刷新显示在页面中</li><li><strong>注意</strong>后添加的属性如果直接进行添加是做不到响应式的,并没有添加到响应式的系统中,常见的不能响应式的数据有<ul><li>通过数组的下标修改数组中的值就不能做到响应式的<code>arr[index]=0</code>,解决方案通过splice()</li><li>通过state直接添加/删除属性<code>state.info[未初始化属性]=&#39;&#39;``delete state.info.name</code>name是初始化过的属性</li></ul></li></ul></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/%E5%B1%9E%E6%80%A7%E8%A2%AB%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD.jpg" alt="属性被添加到响应式系统中"></p><ul><li><strong>当给state中的对象添加新属性时</strong>, <strong>解决方案</strong>:使用下面的方式<ul><li>方式一: 使用Vue.set(obj, ‘newProp’, 123)</li><li>方式二: 用新对象给旧对象重新赋值(借助扩展运算符)</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">updateInfo(state) &#123;</span><br><span class="line">    &#x2F;&#x2F; 1.初始化之前定义的数据是可以做到数据响应式的</span><br><span class="line">    state.info.name &#x3D; &#39;respark&#39;</span><br><span class="line">    &#x2F;&#x2F; 2.为初始化属性添加属性值,并不会响应</span><br><span class="line">    state.info[&#39;address&#39;] &#x3D; &#39;哈尔滨&#39;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    3.解决未初始化属性的响应,</span><br><span class="line">    - 通过Vue.set()</span><br><span class="line">    - 给对象赋一个新的值</span><br><span class="line">    *&#x2F;</span><br><span class="line">    &#x2F;&#x2F; 方式1</span><br><span class="line">    Vue.set(state.info, &#39;age&#39;, 45)&#x2F;&#x2F;可响应</span><br><span class="line">    &#x2F;&#x2F; 方式2:这里通过扩展运算符将对象转为用逗号分隔的参数序列,在添加新的属性</span><br><span class="line">    state.info &#x3D; &#123; ...state.info, &#39;height&#39;: 1.88 &#125;</span><br><span class="line">    &#x2F;&#x2F; 4. 删除初始化属性(不能做到响应式)</span><br><span class="line">    delete state.info[&#39;age&#39;]</span><br><span class="line">    &#x2F;&#x2F; delete state.info.age</span><br><span class="line">    &#x2F;&#x2F; 5.删除属性解决</span><br><span class="line">    Vue.delete(state.info, &#39;age&#39;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener">Vue.set()</a>/ Vue.delete()</p><ul><li><p>二者都是全局api,通过Vue的全局api操作的属性会添加到响应式系统里,可以做到实时的数据响应</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener">Vue.set( target, propertyName/index, value )</a></p><ul><li><p><strong>参数</strong>：</p><ul><li><code>{Object | Array} target</code>要修改的目标对象</li><li><code>{string | number} propertyName/index</code>目标对象中的key(对象关键字)/index(数组索引号)</li><li><code>{any} value</code>要修改的值</li></ul></li><li><p><strong>返回值</strong>：设置的值。</p></li><li><p><strong>用法</strong>：</p><p>向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 <code>this.myObject.newProperty = &#39;hi&#39;</code>)</p></li><li><p>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p></li></ul></li><li><p><a href="https://cn.vuejs.org/v2/api/#Vue-delete" target="_blank" rel="noopener">Vue.delete( target, propertyName/index )</a></p><ul><li><p><strong>参数</strong>：</p><ul><li><code>{Object | Array} target</code></li><li><code>{string | number} propertyName/index</code></li></ul></li><li><p><strong>用法</strong>：</p><p>删除对象的 property。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到 property 被删除的限制，但是你应该很少会使用它</p></li><li><p>目标对象不能是一个 Vue 实例或 Vue 实例的根数据对象。</p></li><li><p>仅在 2.2.0+ 中同样支持在数组上工作。</p></li></ul></li></ul></li></ul><h4 id="Mutation常量类型"><a href="#Mutation常量类型" class="headerlink" title="Mutation常量类型"></a><strong>Mutation常量类型</strong></h4><ul><li><p>ES6中导入方式:</p><ul><li>通过<code>export</code>导出的变量和函数,导入时通过对象接收对应的变量和函数<code>import {变量名,函数名} from &#39;&#39;</code></li><li>通过<code>export default</code>函数/变量 ,默认导出,导入时可通过重新命名default导出的名称,只能有一个默认导出,<code>import 重命名 from &#39;&#39;</code></li><li>可以通过<code>as</code>进行重名<code>import * as 重命名 from &#39;&#39;</code></li></ul></li><li><p>使用<strong>常量替代 mutation 事件类型</strong>在各种 Flux 实现中是很常见的模式。</p><ul><li>这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</li></ul></li><li><p>具体操作:</p><ul><li>创建文件mutation.types.js,p并且在其中定义我们的常量.</li><li>在store-&gt;index.js和vue文件中分别导入</li><li><strong>定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</strong>格式:<code>[常量名](){}</code></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200516101703125.png" alt="image-20200516101703125"></p></li></ul><h3 id="11-2-3-Vuex详细使用"><a href="#11-2-3-Vuex详细使用" class="headerlink" title="11.2.3 Vuex详细使用"></a>11.2.3 <a href="https://vuex.vuejs.org/zh/api/#vuex-store" target="_blank" rel="noopener">Vuex</a>详细使用</h3><h4 id="Vuex-Store"><a href="#Vuex-Store" class="headerlink" title="Vuex.Store"></a>Vuex.Store</h4><ul><li>Vuex.Store()是一个构造器,通过new来创建store的实例对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;...options&#125;)</span><br></pre></td></tr></table></figure><h4 id="Vuex-Store-构造器选项"><a href="#Vuex-Store-构造器选项" class="headerlink" title="Vuex.Store 构造器选项"></a>Vuex.Store 构造器选项</h4><p>构造器中传入的参数一个对象,对象中包含options属性,主要包括:</p><h5 id="state"><a href="#state" class="headerlink" title="state"></a><a href="https://vuex.vuejs.org/zh/guide/state.html" target="_blank" rel="noopener">state</a></h5><ul><li><p>类型: <code>Object | Function</code></p></li><li><p>Vuex store 实例的根 state 对象</p></li><li><p>store 实例中读取状态最简单的方法就是在<a href="https://cn.vuejs.org/guide/computed.html" target="_blank" rel="noopener">计算属性</a>中返回某个状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Counter &#x3D; &#123;</span><br><span class="line">  template: &#96;&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;div&gt;&#96;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果你传入返回一个对象的函数，其返回的对象会被用作根 state。这在你想要重用 state 对象，尤其是对于重用 module 来说非常有用<a href="https://vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E9%87%8D%E7%94%A8" target="_blank" rel="noopener">模块重用</a></p></li><li><p>单一状态树:Vuex 使用<strong>单一状态树</strong>——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (<a href="https://en.wikipedia.org/wiki/Single_source_of_truth" target="_blank" rel="noopener">SSOT</a>)”而存在。这也意味着，<strong>每个应用将仅仅包含一个 store 实例</strong>。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p></li></ul><h5 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a><a href="https://vuex.vuejs.org/zh/guide/mutations.html" target="_blank" rel="noopener">mutations</a></h5><ul><li><p>类型: <code>{ [type: string]: Function }</code></p></li><li><p>在 store 上注册 mutation，处理函数总是接受 <code>state</code> 作为第一个参数（如果定义在模块中，则为模块的局部状态），<code>payload</code> 作为第二个参数（可选）。</p></li><li><p><strong>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</strong>。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515224450156.png" alt="image-20200515224450156"></p><ul><li><p><strong>提交载荷(Payload):就是传递参数,参数可以是字符串/对象</strong></p><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515230840810.png" alt="image-20200515230840810"></p><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515231005511.png" alt="image-20200515231005511"></p></li><li><p><strong>提交mutation的两种方式:</strong></p><ul><li><p>字符串形式:你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 <code>increment</code> 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 <strong>store.commit</strong> 方法：</p><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515225111135.png" alt="image-20200515225111135"></p></li><li><p><strong>对象风格的提交</strong>:直接使用包含 <code>type</code> 属性的对象：</p></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515232451958.png" alt="image-20200515232451958"></p></li></ul></li><li><p><strong>mutation必须是同步函数</strong>,不是同步函数devtools无法追踪状态的改变,</p><ul><li>当我们使用devtools时, 可以devtools可以帮助我们捕捉mutation的快照.</li><li><strong>通常不要再mutation中进行异步的操作</strong>,若要执行异步操作action进行传递</li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200516102823772.png" alt="image-20200516102823772" style="zoom:50%;"></li><li><p>小结:<strong>修改状态的两种方式</strong></p><ul><li><strong>没有异步操作直接提交mutation</strong></li><li><strong>存在异步操作先分发action-&gt;再提交mutation</strong></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515162651936.png" alt="image-20200515162651936"></p></li></ul><h5 id="actions"><a href="#actions" class="headerlink" title="actions"></a><a href="https://vuex.vuejs.org/zh/guide/actions.html" target="_blank" rel="noopener">actions</a></h5><ul><li><p>类型: <code>{ [type: string]: Function }</code></p><p>在 store 上注册 action。<strong>处理函数总是接受 <code>context</code> 作为第一个参数(默认会传入)</strong>，<code>payload</code> 作为第二个参数（可选）。</p><p><code>context</code> 对象包含以下属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  state,      &#x2F;&#x2F; 等同于 &#96;store.state&#96;，若在模块中则为局部状态</span><br><span class="line">  rootState,  &#x2F;&#x2F; 等同于 &#96;store.state&#96;，只存在于模块中</span><br><span class="line">  commit,     &#x2F;&#x2F; 等同于 &#96;store.commit&#96;</span><br><span class="line">  dispatch,   &#x2F;&#x2F; 等同于 &#96;store.dispatch&#96;</span><br><span class="line">  getters,    &#x2F;&#x2F; 等同于 &#96;store.getters&#96;</span><br><span class="line">  rootGetters &#x2F;&#x2F; 等同于 &#96;store.getters&#96;，只存在于模块中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时如果有第二个参数 <code>payload</code> 的话也能够接收。</p><p><strong>注册action</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>Action 函数接受一个<strong>与 store 实例具有相同方法和属性的 context 对象</strong>，因此你可以调用 <code>context.commit</code> 提交一个 mutation，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 state 和 getters。当我们在之后介绍到 <a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">Modules</a> 时，你就知道 context 对象为什么不是 store 实例本身了。</p><p>经常用到 <strong>ES2015 的 <a href="https://github.com/lukehoban/es6features#destructuring" target="_blank" rel="noopener">参数解构</a> 来简化代码（</strong>特别是我们需要调用 <code>commit</code> 很多次的时候）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(&#39;increment&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Action 类似于 mutation，不同在于：</p><ul><li><strong>Action 提交的是 mutation</strong>，而不是直接变更状态。</li><li>Action <strong>可以包含任意异步操作</strong>。</li></ul></li><li><p><strong>action的分发</strong>:</p><ul><li>action中通过<code>store.dispatch</code>()分发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#39;increment&#39;)</span><br></pre></td></tr></table></figure><ul><li><strong>store.dispatch()支持同样的载荷方式(参数的传递)和对象方式进行分发</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 以载荷形式分发</span><br><span class="line">store.dispatch(&#39;incrementAsync&#39;, &#123;</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 以对象形式分发</span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">  type: &#39;incrementAsync&#39;,</span><br><span class="line">  amount: 10</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>在组件中分发action一定要先在根节点注入store</strong></li></ul></li><li><p><strong>组合action</strong></p><ul><li><p><strong>异步操作执行中在执行成功或失败后进行相应操作和获取返回值问题的解决方案</strong>:</p><ul><li>1.promise解决,</li><li>2.异步函数解决</li></ul></li><li><p><strong>action通常是异步操作</strong>,涉及到异步操作涉及到返回值的获取问题,<strong>异步操作放在一个Promise中, 并且在成功或者失败后, 调用对应的resolve或reject,以此来判断action执行的时期</strong>,并在异步不同的时期进行其他操作,<strong>通过组合action来实现更加复杂的异步流程</strong></p></li><li><p><strong><code>store.dispatch</code> 可以处理被触发的 action 的处理函数返回的 Promise</strong>，并且 <strong><code>store.dispatch</code> 仍旧返回 Promise：</strong></p><ul><li>action中返回promise对象,将异步操作包裹在promise对象中</li><li><code>store.dispatch(&#39;actionA&#39;)</code> <strong>分发了action中的事件类型,该事件函数就会执行,</strong>执行之后就会返回一个promise对象(也就是actionA回调函数中返回的promise对象),在该<strong>promise对象后面通过then()和catch()方法就就可以得到异步操作执行的执行结果</strong></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">actionA中的事件类型和回调函数,只有在分发dispatch的时候才会执行并返回事件类型对应的事件函数执行后的promise对象,</span><br><span class="line">  actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        commit(&#39;someMutation&#39;)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">分发之后返回actionA事件函数的promise对象,通过then()和catch()方法就就可以得到异步操作执行结果</span><br><span class="line">store.dispatch(&#39;actionA&#39;).then(() &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">也可以在另外的action中直接调用</span><br><span class="line">actions: &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    return dispatch(&#39;actionA&#39;).then(() &#x3D;&gt; &#123;</span><br><span class="line">      commit(&#39;someOtherMutation&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>通过promise可以解决异步操作返回值问题同样可以通过异步函数(async/await)解决</strong>组合的action乳腺<ul><li>异步函数中添加async,await只能在async函数中出现</li><li>await操作一直会等到该异步操作执行完毕拿到返回值才会执行下一步操作</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设 getData() 和 getOtherData() 返回的是 Promise</span><br><span class="line"></span><br><span class="line">actions: &#123;</span><br><span class="line">  async actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(&#39;gotData&#39;, await getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  async actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    await dispatch(&#39;actionA&#39;) &#x2F;&#x2F; 等待 actionA 完成</span><br><span class="line">    commit(&#39;gotOtherData&#39;, await getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 <code>store.dispatch</code> 在不同模块中可以触发多个 action 函数。<strong>在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</strong></p><ul><li><strong>注意action中可以通过参数结构的方式来获取context中传递过来的属性值</strong><code>{commit,state}=context</code></li></ul></li><li><p>测试代码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">index.js</span><br><span class="line">const actions &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; 异步方式修改状态,回到函数中默认传入参数context执行上下文(state)</span><br><span class="line">  &#x2F;&#x2F; 1.普通的异步操作</span><br><span class="line">  actionUpdateInfo(context, payload) &#123;</span><br><span class="line">    console.log(payload.message);</span><br><span class="line">    payload.success();</span><br><span class="line">  通过action进行提交</span><br><span class="line">    context.commit(&#39;updateInfo&#39;);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 2.promise解决:将异步操作包裹在promise中</span><br><span class="line">  actionUpdateInfo(&#123; commit &#125;) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;*</span><br><span class="line">      resolve()执行自定调用then()方法</span><br><span class="line">      reject()执行自动调用catch()方法</span><br><span class="line">      通过这两个回调函数可以获取到返回值</span><br><span class="line">      *&#x2F;</span><br><span class="line">      &#x2F;&#x2F; 通过action进行提交,通过定时器模拟异步操作</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        commit(&#39;updateInfo&#39;);</span><br><span class="line">        &#x2F;&#x2F; 通过resolve返回执行正确的结果</span><br><span class="line">        resolve(&#39;commit执行正确&#39;)</span><br><span class="line">        &#x2F;&#x2F; 通过reject返回执行错误的执行结果</span><br><span class="line">        reject(&#39;commit执行错误&#39;)</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 3.异步函数解决,后续解决</span><br><span class="line">&#125;</span><br><span class="line">app.vue</span><br><span class="line">updateInfo() &#123;</span><br><span class="line">      &#x2F;&#x2F; 同步执行</span><br><span class="line">      this.$store.commit(&quot;updateInfo&quot;);</span><br><span class="line">      异步执行通过action,对应的方法dispatch分发</span><br><span class="line">      this.$store.dispatch(&quot;actionUpdateInfo&quot;);</span><br><span class="line">      action中同样支持载荷方式(传递参数)和对象风格提交方式</span><br><span class="line">      this.$store.dispatch(&quot;actionUpdateInfo&quot;, &#123;</span><br><span class="line">        message: &quot;dispatch分发&quot;,</span><br><span class="line">        success: () &#x3D;&gt; &#123;</span><br><span class="line">          console.log(&quot;ok&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      &#x2F;&#x2F; 对象风格提交</span><br><span class="line">      this.$store.dispatch(&#123;</span><br><span class="line">        type: &quot;actionUpdateInfo&quot;,</span><br><span class="line">        message: &quot;dispatch分发载荷&quot;,</span><br><span class="line">        success: () &#x3D;&gt; &#123;</span><br><span class="line">          console.log(&quot;ok&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      &#x2F;&#x2F; 组合action,异步操作执行中在执行成功或失败后进行相应操作和获取返回值问题的解决方案:1.promise解决,2.异步函数解决</span><br><span class="line">      &#x2F;&#x2F; 1.promise</span><br><span class="line">      this.$store</span><br><span class="line">        .dispatch(&quot;actionUpdateInfo&quot;)</span><br><span class="line">        .then(result &#x3D;&gt; &#123;</span><br><span class="line">          console.log(result);</span><br><span class="line">          console.log(&quot;这里可以进行执行正确的操作&quot;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(err &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="getters"><a href="#getters" class="headerlink" title="getters"></a><a href="https://vuex.vuejs.org/zh/guide/getters.html" target="_blank" rel="noopener">getters</a></h5><ul><li>类型: <code>{ [key: string]: Function }</code></li></ul><p>在 store 上注册 getter，getter 方法接受以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">state,     &#x2F;&#x2F; 如果在模块中定义则为模块的局部状态</span><br><span class="line">getters,   &#x2F;&#x2F; 等同于 store.getters</span><br></pre></td></tr></table></figure><p>注册的 getter 暴露为 <code>store.getters</code>。</p><ul><li><p>应用场景:从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：如果有多个组件需要用到此属性在每个组件的computed中都通过$store.state来计算不是很理想,</p><ul><li>解决方案:<strong>通过store中的getters(类似于组件中的计算属性computed)</strong>就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</li><li>调用的使用直接<strong>$store.getters.属性名称</strong></li><li>注意:<strong>这里和计算属性一样getters中存储的都是属性,不是方法</strong></li></ul></li><li><p>getter(state,getters)</p><ul><li>参数1:默认传入state,会自动传入</li><li>参数2:可选,接受其他的getter作为第二参数</li><li>可以在任何组件中直接使用它</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    doneTodos: state &#x3D;&gt; &#123;</span><br><span class="line">      return state.todos.filter(todo &#x3D;&gt; todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">    doneTodosCount: (state, getters) &#x3D;&gt; &#123;</span><br><span class="line">    return getters.doneTodos.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">使用</span><br><span class="line">store.getters.doneTodosCount &#x2F;</span><br></pre></td></tr></table></figure></li><li><p>访问方式</p><ul><li><p>通过<strong>属性</strong>进行访问</p><ul><li>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值：<code>$store.getters.属性名称**</code></li><li>可以很容易的在任何组件中使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  doneTodosCount () &#123;</span><br><span class="line">    return this.$store.getters.doneTodosCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过<strong>方法</strong>访问(实现传参)</p><ul><li>通过让 getter 返回一个函数，来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  getTodoById: (state) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;箭头函数</span><br><span class="line">  (id) &#x3D;&gt; &#123;</span><br><span class="line">    return state.todos.find(todo &#x3D;&gt; todo.id &#x3D;&#x3D;&#x3D; id)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;完整写法:</span><br><span class="line">getMoreAge: function (state) &#123;</span><br><span class="line">    &#x2F;&#x2F; 箭头函数</span><br><span class="line">    return function (age) &#123;</span><br><span class="line">      return state.students.filter(s &#x3D;&gt; s.age &gt; age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getters.getTodoById(2)访问</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="modules"><a href="#modules" class="headerlink" title="modules"></a><a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">modules</a></h5><ul><li>类型: <code>Object</code></li><li>包含了子模块的对象，会被<strong>合并到 store</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  key: &#123;</span><br><span class="line">    state,</span><br><span class="line">    namespaced?,命名空间</span><br><span class="line">    mutations,</span><br><span class="line">    actions?,</span><br><span class="line">    getters?,</span><br><span class="line">    modules?</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与根模块的选项一样，每个模块也包含 <code>state</code> 和 <code>mutations</code> 选项。模块的状态使用 key 关联到 store 的根状态。模块的 <strong>mutation 和 getter 只会接收 module 的局部状态作为第一个参数</strong>，而不是根状态，并且模块 <strong>action 的 <code>context.state</code> 同样指向局部状态</strong>。</p><ul><li>使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。</li><li>每个模块拥有自己的 <strong>state、mutation、action、getter</strong>、甚至是嵌套子模块——从上至下进行同样方式的分割：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const moduleA &#x3D; &#123;</span><br><span class="line">  state: () &#x3D;&gt; (&#123; ... &#125;),带命名空间的写法,不带命名空间表示声明的是全局state,state&#123;&#125;</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;获取访问状态</span><br><span class="line">store.state.a &#x2F;&#x2F; -&gt; moduleA 的状态</span><br><span class="line">store.state.b &#x2F;&#x2F; -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure><ul><li><p><strong>子模块中定义的所有的state、mutation、action、getter中的属性都会合并到根store中对应的state、mutation、action、getter中</strong>访问都需要到根store中访问</p><ul><li><strong>访问子模块的state</strong>:<code>store.state.子模块.属性名</code>.在根store中在访问子模块中的state中的状态</li><li><strong>访问子模块的gettters</strong>:<code>store.getters.属性名</code>子模块中getters合并</li><li><strong>访问子模块中的motations和action</strong>:直接通过根store调用对应的 方法即可</li></ul></li><li><p><strong>模块的局部状态</strong></p><ul><li>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>。</li><li>对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，根节点状态则为 <code>context.rootState</code>：context包括的内容如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  state,      &#x2F;&#x2F; 等同于 &#96;store.state&#96;，若在模块中则为局部状态</span><br><span class="line">  rootState,  &#x2F;&#x2F; 等同于 &#96;store.state&#96;，只存在于模块中</span><br><span class="line">  commit,     &#x2F;&#x2F; 等同于 &#96;store.commit&#96;</span><br><span class="line">  dispatch,   &#x2F;&#x2F; 等同于 &#96;store.dispatch&#96;</span><br><span class="line">  getters,    &#x2F;&#x2F; 等同于 &#96;store.getters&#96;</span><br><span class="line">  rootGetters &#x2F;&#x2F; 等同于 &#96;store.getters&#96;，只存在于模块中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1 const moduleA &#x3D; &#123;</span><br><span class="line">  state: () &#x3D;&gt; (&#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;),</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      &#x2F;&#x2F; 这里的 &#96;state&#96; 对象是模块的局部状态</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount (state) &#123;</span><br><span class="line">      return state.count * 2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">2 actions: &#123;</span><br><span class="line"> &#x2F;&#x2F;参数为context</span><br><span class="line">    incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      if ((state.count + rootState.count) % 2 &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">        commit(&#39;increment&#39;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">3 getters: &#123;</span><br><span class="line"> &#x2F;&#x2F;根节点作为第三个参数暴露出来,第二个参数为子模块汇总对应的getter</span><br><span class="line">    sumWithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      return state.count + rootState.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>命名空间</p><ul><li>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</li><li>可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。详细见<a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">官方文档</a></li></ul></li></ul><h4 id="Vuex-Store-实例属性"><a href="#Vuex-Store-实例属性" class="headerlink" title="Vuex.Store 实例属性"></a><a href="https://vuex.vuejs.org/zh/api/#vuex-store" target="_blank" rel="noopener">Vuex.Store 实例属性</a></h4><h5 id="state-1"><a href="#state-1" class="headerlink" title="state"></a>state</h5><ul><li><p>类型: <code>Object</code></p><p>根状态，只读</p></li></ul><h5 id="getters-1"><a href="#getters-1" class="headerlink" title="getters"></a>getters</h5><ul><li><p>类型: <code>Object</code></p><p>暴露出注册的 getter，只读</p></li></ul><h4 id="Vuex-Store-实例方法"><a href="#Vuex-Store-实例方法" class="headerlink" title="Vuex.Store 实例方法"></a>Vuex.Store 实例方法</h4><h5 id="commit"><a href="#commit" class="headerlink" title="commit"></a><a href="https://vuex.vuejs.org/zh/api/#commit" target="_blank" rel="noopener">commit</a></h5><ul><li><code>store.commit(type: string, payload?: any, options?: Object)</code><ul><li>参数1:type的String名称</li><li>参数2:可选,payload可以是变量/对象</li></ul></li><li><code>store.commit(mutation: Object, options?: Object)</code><ul><li>参数1:mutation</li></ul></li></ul><h5 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a><a href="https://vuex.vuejs.org/zh/api/#dispatch" target="_blank" rel="noopener">dispatch</a></h5><ul><li><p><code>store.dispatch(type: string, payload?: any, options?: Object): Promise</code></p></li><li><p><code>store.dispatch(action: Object, options?: Object): Promise</code></p></li><li><p>通常支持<strong>参数的传递</strong>和<strong>对象风格的提交</strong>和commit一样</p></li></ul><h3 id="11-2-4-Vuex模块化管理"><a href="#11-2-4-Vuex模块化管理" class="headerlink" title="11.2.4 Vuex模块化管理"></a>11.2.4 Vuex模块化管理</h3><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200516222227321.png" alt="image-20200516222227321"></p><h1 id="补充promise的使用"><a href="#补充promise的使用" class="headerlink" title="补充promise的使用"></a>补充promise的使用</h1><h2 id="promise介绍"><a href="#promise介绍" class="headerlink" title="promise介绍"></a>promise介绍</h2><ul><li><strong>promise是异步编程的一种解决方案,可以获取异步函数中的返回值(对异步事件封装的方式)</strong></li><li>处理异步事件的场景<ul><li>ajax发送网络请求(ajax本来执行本身就是异步任务)</li><li>文件的读取,数据库的获取等异步函数执行</li><li>定时器异步操作</li></ul></li><li>问题,当网络请求嵌套调用就会出现<strong>回调地狱的问题</strong>,<ul><li>代码难看且不容易维护</li><li>通过promise的方式来解决</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">处理操作</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>定时器是异步事件,这里通过定时器模拟解决回调地狱的问题</p></li><li><p>小结:</p><ul><li><strong>插件都需要导入在安装Vue.use(插件)才能使用</strong></li><li><strong>router和vuex都是插件</strong></li></ul></li></ul><h2 id="promise的基本使用"><a href="#promise的基本使用" class="headerlink" title="promise的基本使用"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">promise</a>的基本使用</h2><ul><li>格式:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;...&#125; <span class="comment">/* executor */</span>  );</span><br></pre></td></tr></table></figure><ul><li><p>有异步操作时, 就可以给异步操作包装一个Promise,promise有三种状态</p><ul><li><strong><em>pending</em>: 初始状态，既不是成功，也不是失败状态。</strong></li><li><strong><em>fulfilled</em>: 意味着操作成功完成。会自动调用resolve回调函数,并调用then()方法</strong></li><li><strong><em>rejected</em>: 意味着操作失败。会自动调用reject回调函数,并通过catch()方法获取结果</strong></li></ul><p>pending 状态的 Promise 对象可能会变为fulfilled 状态并传递一个值给相应的状态处理方法，也可能变为失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 <code>then</code> 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当Promise状态为<em>fulfilled</em>时，调用 then 的 onfulfilled 方法，当Promise状态为<em>rejected</em>时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p><p><strong>状态发生变化会自动执行相应的回调函数</strong>,</p><p><strong>通过回调函数中传递参数的方式获取执行结果</strong></p><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515073331851.png" alt="image-20200515073331851"></p></li><li><p>promise是一个构造函数,通过new创建,new -&gt; 构造函数(1.保存了一些状态信息 2.执行传入的函数)</p></li><li><p>promise属性</p><ul><li><p>Promise.length:length属性，其值总是为 1 (构造器参数的数目).</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/prototype" target="_blank" rel="noopener"><code>Promise.prototype</code></a></p><p>表示 <code>Promise</code> 构造器的原型.</p></li></ul></li><li><p>promise方法</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener"><code>Promise.all(iterable)</code></a>:这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功; 败的promise对象的错误信息作为它的失败错误信息。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener"><code>Promise.race(iterable)</code></a>:当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</li></ul></li><li><p>异步函数执行解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Promise很明显是创建一个Promise对象</span><br><span class="line">小括号中((resolve, reject) &#x3D;&gt; &#123;&#125;)也很明显就是一个函数，而且我们这里用的是之前刚刚学习过的箭头函数。</span><br><span class="line">但是resolve, reject它们是什么呢？</span><br><span class="line">我们先知道一个事实：在创建Promise时，传入的这个箭头函数是固定的（一般我们都会这样写）</span><br><span class="line">resolve和reject它们两个也是函数，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。</span><br><span class="line">成功还是失败？</span><br><span class="line">如果是成功的，那么通常我们会调用resolve(messsage)，这个时候，我们后续的then会被回调。</span><br><span class="line">如果是失败的，那么通常我们会调用reject(error)，这个时候，我们后续的catch会被回调</span><br></pre></td></tr></table></figure><ul><li><p>代码</p><ul><li>方式1:<ul><li>then(()=&gt;{}):参数是箭头函数,resolve执行调用</li><li>catch(()=&gt;{}):reject执行调用</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 2.promise一般使用在异步操作,对异步操作进行封装</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 包裹异步执行函数</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 成功的时候执行,通过给回调函数传递参数的方式获取执行结果</span><br><span class="line">    resolve(&#39;hello world&#39;);</span><br><span class="line">    &#x2F;&#x2F; 失败的时候执行</span><br><span class="line">    reject(&#39;err message&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then((result) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 通过形参接收resolve回调函数通过实参传过来的执行结果</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>方式2:<ul><li>then(()=&gt;{},()=&gt;{})参数是两个箭头函数,第一个参数表示传入成功时调用,第二个参数传入失败时调用</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;Hello World&#39;);</span><br><span class="line">    reject(&#39;err message&#39;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).then(data &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;, err &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><strong>promise解决回调地狱问题</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 3.回调地狱问题的解决</span><br><span class="line">new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;Hello World&#39;);</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data)</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      resolve(&#39;Hello Vue&#39;)</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><ul><li><p><strong>链式编程</strong>:因为 <code>Promise.prototype.then</code> 和 <code>Promise.prototype.catch</code> 方法<strong>返回promise 对象， 所以它们可以被链式调用。</strong></p></li><li><p><strong>promise中resolve的三种书写方式,注意前面有return 关键字</strong></p><ul><li>new promise中resolve()</li><li>new Promise只有resolve参数且没有异步执行操作时====Promise.resolve(参数)</li><li>Promise.resolve()===直接写参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.链式编程完整写法</span><br><span class="line">new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 异步执行</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;aaa&#39;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第1层执行的结果&#39;);</span><br><span class="line">  &#x2F;&#x2F; 第二次发送请求</span><br><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    resolve(data + &#39;111&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第2层执行的结果&#39;)</span><br><span class="line">  &#x2F;&#x2F; 第三层发送请求</span><br><span class="line">  return new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    resolve(data + &#39;222&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第三次执行结果&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.new Promise中只有resolve一个参数,并且在第二层开始就没有异步执行操作,Promise.resolve()代替</span><br><span class="line">&#x2F;&#x2F; new Promise(resolve &#x3D;&gt; resolve(结果))简写</span><br><span class="line">new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 异步执行</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;aaa&#39;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第1层执行的结果&#39;);</span><br><span class="line">  &#x2F;&#x2F; 第二次发送请求</span><br><span class="line">  return Promise.resolve(data + &#39;111&#39;)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第2层执行的结果&#39;)</span><br><span class="line">  &#x2F;&#x2F; 第三层发送请求</span><br><span class="line">  return Promise.resolve(data + &#39;222&#39;)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第3次执行结果&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.省略掉Promise.resolve,内部会处理成promise对象返回</span><br><span class="line">new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 异步执行</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;aaa&#39;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第1层执行的结果&#39;);</span><br><span class="line">  &#x2F;&#x2F; 第二次发送请求</span><br><span class="line">  return data + &#39;111&#39;</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第2层执行的结果&#39;)</span><br><span class="line">  &#x2F;&#x2F; 第三层发送请求</span><br><span class="line">  return data + &#39;222&#39;</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第3次执行结果&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>抛出异常的两种方式,注意抛出异常后面都需要链式编程调用catch()方法</strong></p><ul><li>reject()抛出异常,<ul><li>reject</li><li>return Promise.reject()</li></ul></li><li>throw ‘异常信息’:手动抛出异常</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 4.出现catch的情况, reject抛出</span><br><span class="line">new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 异步执行</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;aaa&#39;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第1层执行的结果&#39;);</span><br><span class="line">  &#x2F;&#x2F; 第二次发送请求,抛出异常</span><br><span class="line">  return Promise.reject(&#39;err message&#39;)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第2层执行的结果&#39;)</span><br><span class="line">  &#x2F;&#x2F; 第三层发送请求</span><br><span class="line">  return data + &#39;222&#39;</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第3次执行结果&#39;)</span><br><span class="line">&#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 5.出现catch的情况,throw手动抛出</span><br><span class="line">new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 异步执行</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;aaa&#39;)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第1层执行的结果&#39;);</span><br><span class="line">  &#x2F;&#x2F; 第二次发送请求,注意这里没有return 关键字</span><br><span class="line">  throw &#39;err message throw&#39;</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第2层执行的结果&#39;)</span><br><span class="line">  &#x2F;&#x2F; 第三层发送请求</span><br><span class="line">  return data + &#39;222&#39;</span><br><span class="line">&#125;).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data, &#39;第3次执行结果&#39;)</span><br><span class="line">&#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all()</a></h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener"><code>Promise.all()</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener"><code>Promise.race()</code></a> 是并行运行异步操作的两个组合式工具。</p></li><li><p><code>Promise.all(iterable)</code> 方法</p><ul><li><p>参数:一个<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol" target="_blank" rel="noopener">可迭代</a>对象，如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array" target="_blank" rel="noopener"><code>Array</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String" target="_blank" rel="noopener"><code>String</code></a>。</p></li><li><p>返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> 实例，此实例在 <code>iterable</code> 参数内所有的 <code>promise</code> 都“完成（resolved）”或参数中不包含 <code>promise</code> 时回调完成（resolve）；</p></li><li><p>如果参数中 <code>promise</code> 有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败 <code>promise</code> 的结果。</p></li><li><p>通常在启动多个异步任务并发运行并为其结果创建承诺之后使用，以便人们可以等待所有任务完成。</p></li></ul></li><li><p>子promise返回值</p><ul><li>该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；</li><li>一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.成功情况:子promise中的返回值(对象&#x2F;字符串)保存在.then方法接收的数组参数中,</span><br><span class="line">Promise.all([</span><br><span class="line">  new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      resolve(&#39;hello&#39;)</span><br><span class="line">      &#x2F;&#x2F; resolve(&#123; name: &#39;spark&#39;, age: 12 &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;),</span><br><span class="line">  new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      resolve(&#39;world&#39;)</span><br><span class="line">      &#x2F;&#x2F; resolve(&#123; name: &#39;zhangsan&#39;, age: 12 &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;)</span><br><span class="line">]).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 2.错误情况:其中一个出现错误,.catch捕获子promise中的错误信息</span><br><span class="line">Promise.all([</span><br><span class="line">  new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      reject(&#39;err message&#39;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;),</span><br><span class="line">  new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; resolve(&#39;world&#39;)</span><br><span class="line">      resolve(&#123; name: &#39;zhangsan&#39;, age: 12 &#125;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;)</span><br><span class="line">]).then((data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B08/image-20200515093836437.png" alt="image-20200515093836437"></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener">promise.race()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
promise的使用,Vuex详细使用,
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="前端" scheme="https://sparkparis.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://sparkparis.github.io/tags/vue/"/>
    
      <category term="vuex" scheme="https://sparkparis.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记7-Vue-Router前端路由</title>
    <link href="https://sparkparis.github.io/2020/05/13/Vue%E7%AC%94%E8%AE%B07/"/>
    <id>https://sparkparis.github.io/2020/05/13/Vue%E7%AC%94%E8%AE%B07/</id>
    <published>2020-05-13T08:44:04.000Z</published>
    <updated>2020-05-15T00:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">Vue-Router前端路由<a id="more"></a><!-- TOC --><ul><li><a href="#10-vue-router">10 Vue-Router</a><ul><li><a href="#101-认识路由">10.1 认识路由</a><ul><li><a href="#1011-路由">10.1.1 路由</a></li><li><a href="#1012-后端路由阶段">10.1.2 后端路由阶段</a></li><li><a href="#1013-前后端分离阶段">10.1.3 前后端分离阶段</a></li><li><a href="#1014单页面富应用阶段前端路由的提出">10.1.4单页面富应用阶段(前端路由的提出)</a></li><li><a href="#1015-前端路由的核心">10.1.5 前端路由的核心</a><ul><li><a href="#url的hash">URL的hash</a></li><li><a href="#html5的historyhttpsdevelopermozillaorgzh-cndocswebapihistory模式">HTML5的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noopener">history</a>模式</a></li></ul></li></ul></li><li><a href="#102-vue-router基本使用">10.2 vue-router基本使用</a><ul><li><a href="#1021-认识vue-router">10.2.1 认识Vue-Router</a></li><li><a href="#1022-vue-routerhttpsroutervuejsorgzhguideessentialspassing-propshtml的安装和使用">10.2.2 <a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#对象模式" target="_blank" rel="noopener">Vue-Router</a>的安装和使用</a></li><li><a href="#1023-细节部分">10.2.3 细节部分</a><ul><li><a href="#设置路由的默认路径httpsroutervuejsorgzhguideessentialsredirect-and-aliashtml"><a href="https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html#重定向" target="_blank" rel="noopener">设置路由的默认路径</a></a></li><li><a href="#router构建选项httpsroutervuejsorgzhapirouter-"><a href="https://router.vuejs.org/zh/api/#router-构建选项" target="_blank" rel="noopener">Router构建选项</a></a></li><li><a href="#router-link-propshttpsroutervuejsorgzhapirouter-link-props"><a href="https://router.vuejs.org/zh/api/#router-link-props" target="_blank" rel="noopener">router-link props</a></a></li><li><a href="#动态路由">动态路由</a><ul><li><a href="#动态路由跳转的两种方式">动态路由跳转的两种方式</a></li><li><a href="#动态路由的命名httpsroutervuejsorgzhguideessentialsnamed-routeshtml"><a href="https://router.vuejs.org/zh/guide/essentials/named-routes.html" target="_blank" rel="noopener">动态路由的命名</a></a></li><li><a href="#动态路由对象httpsroutervuejsorgzhapi"><a href="https://router.vuejs.org/zh/api/#路由对象" target="_blank" rel="noopener">动态路由对象</a></a></li><li><a href="#动态路由匹配httpsroutervuejsorgzhguideessentialsdynamic-matchinghtml"><a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html" target="_blank" rel="noopener">动态路由匹配</a></a></li></ul></li></ul></li><li><a href="#1024-路由的懒加载httpsroutervuejsorgzhguideadvancedlazy-loadinghtml">10.2.4 <a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_blank" rel="noopener">路由的懒加载</a></a><ul><li><a href="#认识路由的懒加载">认识路由的懒加载</a></li><li><a href="#路由懒加载的效果">路由懒加载的效果</a></li><li><a href="#路由懒加载的方式">路由懒加载的方式</a></li></ul></li></ul></li><li><a href="#103-vue-router嵌套路由httpsroutervuejsorgzhguideessentialsnested-routeshtml">10.3 <a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html" target="_blank" rel="noopener">vue-router嵌套路由</a></a></li><li><a href="#104-vue-router参数传递httpsroutervuejsorgzhguideessentialspassing-propshtmlhttpsroutervuejsorgzhguideessentialspassing-propshtml布尔模式">10.4 <a href="[https://router.vuejs.org/zh/guide/essentials/passing-props.html#布尔模式](https://router.vuejs.org/zh/guide/essentials/passing-props.html#布尔模式)">vue-router参数传递</a></a></li><li><a href="#105-vue-router导航守卫httpsroutervuejsorgzhguideadvancednavigation-guardshtml">10.5 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#全局前置守卫" target="_blank" rel="noopener">vue-router导航守卫</a></a></li><li><a href="#106-keep-alivehttpscnvuejsorgv2apikeep-alive">10.6 <a href="https://cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="noopener">keep-alive</a></a></li><li><a href="#107-tabbar案例学会组件的封装cli2">10.7 tabbar案例(学会组件的封装cli2)</a></li></ul></li></ul><!-- /TOC --><h1 id="10-Vue-Router"><a href="#10-Vue-Router" class="headerlink" title="10 Vue-Router"></a>10 Vue-Router</h1><h2 id="10-1-认识路由"><a href="#10-1-认识路由" class="headerlink" title="10.1 认识路由"></a>10.1 认识路由</h2><h3 id="10-1-1-路由"><a href="#10-1-1-路由" class="headerlink" title="10.1.1 路由"></a>10.1.1 路由</h3><ul><li><strong>路由</strong>（<strong>routing</strong>）就是通过互联的网络把信息从源地址传输到目的地址的活动.</li><li>路由器提供了两种机制: <strong>路由和转送</strong>.<ul><li>路由是决定数据包从<strong>来源</strong>到<strong>目的地</strong>的路径</li><li>转送将<strong>输入端</strong>的数据转移到合适的<strong>输出端</strong></li></ul></li><li>路由中有一个非常重要的概念叫路由表.<ul><li>路由表本质上就是一个映射表, 决定了数据包的指向</li></ul></li><li>不同的公网地址是唯一的,每个公网中对应一个路由器,路由器中会为每个设备分配唯一的ip内网地址,路由器中存在映射表,保存内网中的ip地址和设备对应的MAC物理地址.</li></ul><h3 id="10-1-2-后端路由阶段"><a href="#10-1-2-后端路由阶段" class="headerlink" title="10.1.2 后端路由阶段"></a>10.1.2 后端路由阶段</h3><ul><li><p>什么是<strong>后端路由</strong></p><ul><li>后端路由:<strong>在服务器端处理url和页面之间的关系</strong></li><li>后端渲染:在服务器端(后端)将页面渲染好在发送给客户端展示</li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/01-后端路由阶段.png" alt="01-后端路由阶段" style="zoom:80%;"></li><li><p>多网页如何进行处理(通过后端路由的方式)</p><ul><li>一个页面有自己对应的网址, 也就是URL.</li><li>URL会发送到服务器, 服务器会通过正则对该URL进行匹配, 并且最后交给一个Controller进行处理.</li><li>Controller进行各种处理, 最终生成HTML或者数据, 返回给前端.</li><li>这就完成了一个IO操作.</li></ul></li><li><p>后端路由的有点</p><ul><li>当我们页面中需要请求不同的<strong>路径</strong>内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户顿.</li><li>这种情况下渲染好的页面, <strong>不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化.</strong></li></ul></li><li><p>后端路由的缺点</p><ul><li>一种情况是整个页面的模块由后端人员来编写和维护的.</li><li>另一种情况是前端开发人员如果要开发页面, 需要通过PHP和Java等语言来编写页面代码.</li><li>而且通常情况下HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情</li></ul></li></ul><h3 id="10-1-3-前后端分离阶段"><a href="#10-1-3-前后端分离阶段" class="headerlink" title="10.1.3 前后端分离阶段"></a>10.1.3 前后端分离阶段</h3><ul><li><p>随着<strong>Ajax</strong>的出现, 有了前后端分离的开发模式.</p><ul><li><p><strong>后端只提供API来返回数据</strong>, <strong>前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中.</strong></p></li><li><p>这样做最大的<strong>优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上</strong>.</p></li><li><p>并且<strong>当移动端(iOS/Android)出现后, 后端不需要进行任何处理, 依然使用之前的一套API即可.</strong></p></li><li><p>目前很多的网站依然采用这种模式开发.</p></li></ul></li><li><p>前后端执行流程</p><ul><li>获取静态页面都是通过静态服务器获取,</li><li>静态服务器中<strong>存在多个url对应的html页面</strong>,通过前端不同的url返回静态页面<br><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/02-%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%98%B6%E6%AE%B5.png" alt="02-前端后端分离阶段"><h3 id="10-1-4单页面富应用阶段-前端路由的提出"><a href="#10-1-4单页面富应用阶段-前端路由的提出" class="headerlink" title="10.1.4单页面富应用阶段(前端路由的提出)"></a>10.1.4单页面富应用阶段(前端路由的提出)</h3></li></ul></li><li><p><strong>SPA</strong>最主要的特点就是在前后端分离的基础上加了一层前端路由.前端来维护一套路由规则.</p></li><li><p>SPA路由阶段</p><ul><li>这里只有一个html页面,</li><li>一次性请求所有的资源</li><li>针对不同的url会对应不同的组价再从所有的资源中抽离出对应的组件显示</li><li>url和组件的对应的关系是由前端路由来实现</li></ul></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/03-SPA%E9%A1%B5%E9%9D%A2%E9%A1%B5%E9%9D%A2%E7%9A%84%E9%98%B6%E6%AE%B5.png" alt="03-SPA页面页面的阶段"></p><ul><li>前端路由中url和组件之间的关系</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/04-%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E4%B8%ADurl%E5%92%8C%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB.jpg" alt="04-前端路由中url和组件的关系"></p><h3 id="10-1-5-前端路由的核心"><a href="#10-1-5-前端路由的核心" class="headerlink" title="10.1.5 前端路由的核心"></a>10.1.5 前端路由的核心</h3><ul><li><strong>前端路由的核心:改变URL，但是页面不进行整体的刷新。</strong></li><li>实现改变url页面不刷新方式有两种:<ul><li>通过url中的hash</li><li>HTML5的history模式：<strong>pushState</strong></li></ul></li></ul><h4 id="URL的hash"><a href="#URL的hash" class="headerlink" title="URL的hash"></a>URL的hash</h4><ul><li>URL的hash也就是锚点(#), 本质上是改变window.location的href属性.</li><li>我们可以通过直接赋值location.hash来改变href, 但是页面不发生刷新</li><li>实现:<code>location.hash=&#39;&#39;</code></li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513181427498.png" alt="image-20200513181427498" style="zoom:80%;"><h4 id="HTML5的history模式"><a href="#HTML5的history模式" class="headerlink" title="HTML5的history模式"></a>HTML5的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noopener">history</a>模式</h4><ul><li>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener">history.pushState({},’’,’url’</a>:类似于栈结构,不断压栈</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/replaceState" target="_blank" rel="noopener">history.replaceState()</a>:</li><li>history.go()</li><li>history.forward()</li><li>history.back()</li></ul></li><li>执行效果</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513183745445.png" alt="image-20200513183745445"></p><ul><li><p>补充说明：</p><ul><li><p>history.back() 等价于 history.go(-1)</p></li><li><p>history.forward() 则等价于 history.go(1)</p></li><li><p>这三个接口等同于浏览器界面的前进后退。</p></li></ul></li></ul><h2 id="10-2-vue-router基本使用"><a href="#10-2-vue-router基本使用" class="headerlink" title="10.2 vue-router基本使用"></a>10.2 vue-router基本使用</h2><h3 id="10-2-1-认识Vue-Router"><a href="#10-2-1-认识Vue-Router" class="headerlink" title="10.2.1 认识Vue-Router"></a>10.2.1 认识Vue-Router</h3><ul><li><p>目前前端流行的三大框架, 都有自己的路由实现:</p><ul><li><p>Angular的ngRouter</p></li><li><p>React的ReactRouter</p></li><li><p>Vue的vue-router</p></li></ul></li><li><p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener"><strong>vue-router</strong></a>是Vue.js官方的<strong>路由插件</strong>，<strong>它和vue.js是深度集成的，适合用于构建单页面应用</strong>,包含功能:</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ul></li><li><p>vue-router是<strong>基于路由和组件的</strong></p><ul><li><p>路由用于设定访问路径, 将路径和组件映射起来.</p></li><li><p>在vue-router的单页面应用中, 页面的路径的改变就是组件的切换.</p></li></ul></li></ul><h3 id="10-2-2-Vue-Router的安装和使用"><a href="#10-2-2-Vue-Router的安装和使用" class="headerlink" title="10.2.2 Vue-Router的安装和使用"></a>10.2.2 <a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">Vue-Router</a>的安装和使用</h3><ul><li><p>学习了webpack, 后续开发中我们主要是<strong>通过工程化的方式进行开发的</strong>,直接使用npm来安装路由即可.</p></li><li><p>安装:<code>npm install vue-router --save</code>生产依赖,可以在脚手架直接选中(在src-&gt;router-&gt;index.js中配置前端路由)</p></li><li><p>使用</p><ul><li>在模块化工程中使用它(因为是一个插件, 所以可以通过Vue.use()来安装路由功能)</li><li>第一步：导入路由对象，并且调用 <strong>Vue.use(VueRouter)</strong>安装插件,所有的插件在使用之前必须安装执行的是<strong>VueRouter.iinstall</strong></li><li>第二步：创建路由实例，并且传入路由映射配置</li><li>第三步：在Vue实例中挂载创建的路由实例</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513185511577.png" alt="image-20200513185511577"></p></li><li><p>使用vue-router的步骤:</p><ul><li><p>第一步: 创建路由组件</p></li><li><p>第二步: 配置路由映射: 组件和路径映射关系</p></li><li><p>第三步: 使用路由: 通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code></p></li></ul></li><li><p>代码</p><ul><li>创建的路由对象实例中的属性<strong>routes</strong></li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513231609529.png" alt="image-20200513231609529" style="zoom:80%;"><ul><li>在vue对象中挂载路由实例的属性:<strong>router</strong></li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513231632349.png" alt="image-20200513231632349" style="zoom:80%;"><ul><li>创建路由组件</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513231714654.png" alt="image-20200513231714654"></p><ul><li>配置组件和路由之间的关系</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513231751053.png" alt="image-20200513231751053"></p><ul><li>使用路由.<ul><li><code>&lt;router-link&gt;</code>: 该标签是一个vue-router中已经内置的组件, 它会被渲染成一个<code>&lt;a&gt;</code>标签.</li><li><code>&lt;router-view&gt;</code>: 该标签会根据当前的路径, 动态渲染出不同的组件.</li><li>网页的其他内容, 比如顶部的标题/导航, 或者底部的一些版权信息等会和<code>&lt;router-view&gt;</code>处于同一个等级.</li><li>在路由切换时, 切换的是<code>&lt;router-view&gt;</code>挂载的组件, 其他内容不会发生改变.</li></ul></li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513231824881.png" alt="image-20200513231824881" style="zoom:80%;"><ul><li>效果展示</li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513232059711.png" alt="image-20200513232059711" style="zoom:67%;"></li></ul><h3 id="10-2-3-细节部分"><a href="#10-2-3-细节部分" class="headerlink" title="10.2.3 细节部分"></a>10.2.3 细节部分</h3><h4 id="设置路由的默认路径"><a href="#设置路由的默认路径" class="headerlink" title="设置路由的默认路径"></a><a href="https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html#%E9%87%8D%E5%AE%9A%E5%90%91" target="_blank" rel="noopener">设置路由的默认路径</a></h4><ul><li><strong>路由的默认路径</strong>:通过重定向的方式,在配置路由时</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513232341458.png" alt="image-20200513232341458"></p><h4 id="Router构建选项"><a href="#Router构建选项" class="headerlink" title="Router构建选项"></a><a href="https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9" target="_blank" rel="noopener">Router构建选项</a></h4><ul><li><h3 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface RouteConfig &#x3D; &#123;</span><br><span class="line">  path: string,</span><br><span class="line">  component?: Component,</span><br><span class="line">  name?: string, &#x2F;&#x2F; 命名路由</span><br><span class="line">  components?: &#123; [name: string]: Component &#125;, &#x2F;&#x2F; 命名视图组件</span><br><span class="line">  redirect?: string | Location | Function,</span><br><span class="line">  props?: boolean | Object | Function,</span><br><span class="line">  alias?: string | Array&lt;string&gt;,</span><br><span class="line">  children?: Array&lt;RouteConfig&gt;, &#x2F;&#x2F; 嵌套路由</span><br><span class="line">  beforeEnter?: (to: Route, from: Route, next: Function) &#x3D;&gt; void,</span><br><span class="line">  meta?: any,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 2.6.0+</span><br><span class="line">  caseSensitive?: boolean, &#x2F;&#x2F; 匹配规则是否大小写敏感？(默认值：false)</span><br><span class="line">  pathToRegexpOptions?: Object &#x2F;&#x2F; 编译正则的选项</span><br><span class="line">&#125;</span><br><span class="line">#mode</span><br></pre></td></tr></table></figure><ul><li><h3 id="linkActiveClass"><a href="#linkActiveClass" class="headerlink" title="linkActiveClass"></a>linkActiveClass</h3><ul><li>全局配置 `` 默认的激活的 class。参考 <a href="https://router.vuejs.org/zh/api/#router-link" target="_blank" rel="noopener">router-link</a></li></ul></li><li><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><ul><li>应用的基路径。例如，如果整个单页应用服务在 <code>/app/</code> 下，然后 <code>base</code> 就应该设为 <code>&quot;/app/&quot;</code></li></ul></li><li><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>默认情况下路径的改变是使用的<strong>URL的hash</strong>(url中携带#).使用<strong>HTML5的history模式</strong>(可以去除#号), 非常简单, 进行如下配置即可</p></li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513232525385.png" alt="image-20200513232525385" style="zoom:80%;"><h4 id="router-link-props"><a href="#router-link-props" class="headerlink" title="router-link props"></a><a href="https://router.vuejs.org/zh/api/#router-link-props" target="_blank" rel="noopener">router-link props</a></h4><ul><li><p>属性:其与见链接</p><ul><li><p>to</p><ul><li><p>类型: <code>string | Location</code></p></li><li><p>required</p><p>表示目标路由的链接。当被点击后，内部会立刻把 <code>to</code> 的值传到 <code>router.push()</code>，所以这个值可以是一个字符串或者是描述目标位置的对象。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 字符串 --&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;home&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;!-- 渲染结果 --&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;home&quot;&gt;Home&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span><br><span class="line">&lt;router-link v-bind:to&#x3D;&quot;&#39;home&#39;&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#39;home&#39;&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 同上 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#39;home&#39; &#125;&quot;&gt;Home&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 命名的路由 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 带查询参数，下面的结果为 &#x2F;register?plan&#x3D;private --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; path: &#39;register&#39;, query: &#123; plan: &#39;private&#39; &#125;&#125;&quot;</span><br><span class="line">  &gt;Register&lt;&#x2F;router-link</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://router.vuejs.org/zh/guide/essentials/named-routes.html" target="_blank" rel="noopener"><strong>router-link</strong></a>补充,还有其他属性</p><ul><li><p>tag: tag可以指定<code>&lt;router-link&gt;</code>之后渲染成什么组件, 比如上面的代码会被渲染成一个<code>&lt;li&gt;</code>元素, 而不是<code>&lt;a&gt;</code>(默认情况下)   eg:<code>&lt;router-link to=&#39;/home&#39; tag=&#39;li&#39;&gt;</code></p></li><li><p>replace: replace不会留下history记录, 所以指定replace的情况下, 后退键返回不能返回到上一个页面中</p></li><li><p>active-class: 当<code>&lt;router-link&gt;</code>对应的路由匹配成功时, 会自动给当前元素设置一个<strong>router-link-active</strong>的class, 设置<strong>active-class</strong>可以<strong>修改默认的名称.</strong></p><ul><li><p>在进行高亮显示的导航菜单或者底部tabbar时, 会使用到该类.</p></li><li><p>但是通常不会修改类的属性, 会直接使用默认的router-link-active即可.</p></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513233031502.png" alt="image-20200513233031502"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot; replace active-class&#x3D;&quot;active&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>该class具体的名称也可以通过router实例的属性进行修改</strong>— <strong>修改**</strong>linkActiveClass**,</p><ul><li><p><code>linkActiveClass:&#39;类名名称&#39;</code>应用在含有多个router-link的标签中</p></li><li><p>exact-active-class</p><ul><li><p>类似于active-class, 只是在精准匹配下才会出现的class.</p></li><li><p>后面看到嵌套路由时, 我们再看下这个属性.</p></li></ul></li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513233328093.png" alt="image-20200513233328093" style="zoom:80%;"><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513233628450.png" alt="image-20200513233628450"></p><h4 id="router-view-props"><a href="#router-view-props" class="headerlink" title="router-view props"></a><a href="https://router.vuejs.org/zh/api/#router-view" target="_blank" rel="noopener">router-view props</a></h4></li></ul><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><h5 id="动态路由跳转的两种方式"><a href="#动态路由跳转的两种方式" class="headerlink" title="动态路由跳转的两种方式"></a>动态路由跳转的两种方式</h5><ul><li><p>直接通过<code>&lt;router-link to=&#39;路由路径跳转&#39;&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#x2F;home&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过js代码跳转(修改代码的方式)</p><ul><li>所有的组件中都添加了属性<strong>$router(这里的$router指的是new实例对象 的router)</strong>    ,这里链接命名路由<code>this.$router.push</code></li><li>通过绑定事件点击的的方式</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    homeClick() &#123;</span><br><span class="line">      &#x2F;&#x2F; 通过代码的方式修改路由,组件中都有$router属性</span><br><span class="line">      &#x2F;&#x2F; push---&gt;pushState()</span><br><span class="line">      &#x2F;&#x2F; replace---&gt;replaceState</span><br><span class="line">      &#x2F;&#x2F; this.$router.push(&quot;&#x2F;home&quot;).catch(err &#x3D;&gt; &#123;&#125;);</span><br><span class="line">      this.$router.replace(&quot;&#x2F;home&quot;).catch(err &#x3D;&gt; &#123;&#125;);</span><br><span class="line">      console.log(&quot;home&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    aboutClick() &#123;</span><br><span class="line">      &#x2F;&#x2F; this.$router.push(&quot;&#x2F;about&quot;).catch(err &#x3D;&gt; &#123;&#125;);</span><br><span class="line">      this.$router.replace(&quot;&#x2F;about&quot;).catch(err &#x3D;&gt; &#123;&#125;);</span><br><span class="line">      console.log(&quot;about&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513233828430.png" alt="image-20200513233828430" style="zoom:80%;"><h5 id="动态路由的命名"><a href="#动态路由的命名" class="headerlink" title="动态路由的命名"></a><a href="https://router.vuejs.org/zh/guide/essentials/named-routes.html" target="_blank" rel="noopener">动态路由的命名</a></h5><p>有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;user&#x2F;:userId&#39;,</span><br><span class="line">      name: &#39;user&#39;,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要链接到一个命名路由，可以给 <code>router-link</code> 的 <code>to</code> 属性传一个对象：<strong>传递对象或者变量一定要动态绑定v-bind</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><p>这跟代码调用 <code>router.push()</code> 是一回事：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.push(&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure><p>这两种方式都会把路由导航到 <code>/user/123</code> 路径。</p><h5 id="动态路由对象"><a href="#动态路由对象" class="headerlink" title="动态路由对象"></a><a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">动态路由对象</a></h5><ul><li><p>路由对象:一个<strong>路由对象 (route object)</strong> 表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的<strong>路由记录 (route records)</strong>。</p></li><li><p>路由对象是不可变 (immutable) 的，每次成功的导航后都会产生一个新的对象。</p><p>路由对象出现在多个地方:</p><ul><li>在组件内，即 <code>this.$route</code></li><li>在 <code>$route</code> 观察者回调内</li><li><code>router.match(location)</code> 的返回值</li></ul></li><li><p><strong>区分$router和$route</strong></p><ul><li><p><strong>this.$router</strong></p><p>router 实例。通过new VueRouter创建的,<strong>添加路由的时候使用</strong>,在添加路由的第二种跳转方式中使用</p></li><li><p><strong>this.$route</strong></p><p>当前激活的<a href="https://router.vuejs.org/zh/api/#路由对象" target="_blank" rel="noopener">路由信息对象</a>。这个属性是只读的，里面的属性是 immutable (不可变) 的，不过你可以 watch (监测变化) 它。</p></li></ul></li><li><p><strong>路由对象属性</strong></p><ul><li><p><strong>$route.path</strong></p><ul><li><p>类型: <code>string</code></p><p>字符串，对应当前路由的路径，总是解析为绝对路径，如 <code>&quot;/foo/bar&quot;</code>。</p></li></ul></li><li><p><strong>$route.params</strong></p><ul><li><p>类型: <code>Object</code></p><p>一个 key/value 对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。</p></li></ul></li><li><p><strong>$route.query</strong></p><ul><li><p>类型: <code>Object</code></p><p>一个 key/value 对象，表示 URL 查询参数。例如，对于路径 <code>/foo?user=1</code>，则有 <code>$route.query.user == 1</code>，如果没有查询参数，则是个空对象。</p></li></ul></li><li><p><strong>$route.hash</strong></p><ul><li><p>类型: <code>string</code></p><p>当前路由的 hash 值 (带 <code>#</code>) ，如果没有 hash 值，则为空字符串。</p></li></ul></li><li><p><strong>$route.fullPath</strong></p><ul><li><p>类型: <code>string</code></p><p>完成解析后的 URL，包含查询参数和 hash 的完整路径。</p></li></ul></li><li><p><strong>$route.matched</strong></p><ul><li>类型: <code>Array</code></li></ul><p><strong>一个数组，包含当前路由的所有嵌套路径片段的路由记录 。路由记录就是 <code>routes</code> 配置数组中的对象副本 (还有在 <code>children</code> 数组)。</strong></p><p>当 URL 为 <code>/foo/bar</code>，<code>$route.matched</code> 将会是一个包含从上到下的所有对象 (副本)。</p></li><li><p><strong>$route.name</strong></p><p>当前路由的名称，如果有的话。(查看<a href="https://router.vuejs.org/zh/guide/essentials/named-routes.html" target="_blank" rel="noopener">命名路由</a>)</p></li><li><p><strong>$route.redirectedFrom</strong></p><p>如果存在重定向，即为重定向来源的路由的名字。(参阅<a href="https://router.vuejs.org/zh/guide/essentials/redirect-and-alias.html" target="_blank" rel="noopener">重定向和别名</a>)</p></li></ul></li><li><p><strong>路由对象方法</strong></p><ul><li><a href="https://router.vuejs.org/zh/api/#router-beforeresolve" target="_blank" rel="noopener"> router.beforeEach</a></li><li><a href="https://router.vuejs.org/zh/api/#router-aftereach" target="_blank" rel="noopener">router.beforeResolve</a></li><li><a href="https://router.vuejs.org/zh/api/#router-aftereach" target="_blank" rel="noopener">router.afterEach</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;* 必须调用 &#96;next&#96; *&#x2F;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeResolve((to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;* 必须调用 &#96;next&#96; *&#x2F;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach((to, from) &#x3D;&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>增加全局的导航守卫。参考<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener">导航守卫</a>。</p><p>在 2.5.0+ 这三个方法都返回一个移除已注册的守卫/钩子的函数</p><ul><li>router.push</li><li>router.replace</li><li>router.go</li><li>router.back</li><li>router.forward</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.push(location, onComplete?, onAbort?)</span><br><span class="line">router.push(location).then(onComplete).catch(onAbort)</span><br><span class="line">router.replace(location, onComplete?, onAbort?)</span><br><span class="line">router.replace(location).then(onComplete).catch(onAbort)</span><br><span class="line">router.go(n)</span><br><span class="line">router.back()</span><br><span class="line">router.forward()</span><br></pre></td></tr></table></figure><p>动态的导航到一个新 URL。参考<a href="https://router.vuejs.org/zh/guide/essentials/navigation.html" target="_blank" rel="noopener">编程式导航</a></p><ul><li>router.resolve<ul><li>解析目标位置 (格式和 `` 的 <code>to</code> prop 一样)。<ul><li><code>current</code> 是当前默认的路由 (通常你不需要改变它)</li><li><code>append</code> 允许你在 <code>current</code> 路由上附加路径 (如同 <a href="https://router.vuejs.org/zh/api/#router-link.md-props" target="_blank" rel="noopener"><code>router-link</code></a>)</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const resolved: &#123;</span><br><span class="line">  location: Location;</span><br><span class="line">  route: Route;</span><br><span class="line">  href: string;</span><br><span class="line">&#125; &#x3D; router.resolve(location, current?, append?)</span><br></pre></td></tr></table></figure></li></ul><h5 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a><a href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html" target="_blank" rel="noopener">动态路由匹配</a></h5><ul><li><strong>动态路由</strong>:在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望是如下的路径<ul><li>/user/aaaa或/user/bbbb</li><li>除了有前面的/user之外，后面还跟上了用户的ID</li><li>这种<strong>path和Component的匹配关系</strong>，我们称之为<strong>动态路由(也是路由传递数据的一种方式)</strong>。</li><li>注意这里的<strong>$route指的是当前活跃的路由</strong></li><li><strong>注意:在传递对象时,必须采用动态绑定v-bind的方式</strong></li></ul></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200513234140847.png" alt="image-20200513234140847"></p><h3 id="10-2-4-路由的懒加载"><a href="#10-2-4-路由的懒加载" class="headerlink" title="10.2.4 路由的懒加载"></a>10.2.4 <a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" target="_blank" rel="noopener">路由的懒加载</a></h3><h4 id="认识路由的懒加载"><a href="#认识路由的懒加载" class="headerlink" title="认识路由的懒加载"></a>认识路由的懒加载</h4><ul><li>问题:<ul><li>首先, 我们知道路由中通常会定义很多不同的页面.</li><li>这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.</li><li>但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大.</li><li>如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.</li></ul></li><li>解决方案;路由的懒加载</li><li><strong>路由懒加载的作用:</strong><ul><li>路由懒加载的主要作用就是<strong>将路由对应的组件打包成一个个的js代码块.</strong></li><li>只有在这个路由被访问到的时候, 才加载对应的组件</li></ul></li></ul><h4 id="路由懒加载的效果"><a href="#路由懒加载的效果" class="headerlink" title="路由懒加载的效果"></a>路由懒加载的效果</h4><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514082618778.png" alt="image-20200514082618778"></p><h4 id="路由懒加载的方式"><a href="#路由懒加载的方式" class="headerlink" title="路由懒加载的方式"></a>路由懒加载的方式</h4><ul><li>方式一: 结合Vue的异步组件和Webpack的代码分析.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Home &#x3D; resolve &#x3D;&gt; &#123; require.ensure([&#39;..&#x2F;components&#x2F;Home.vue&#39;], () &#x3D;&gt; &#123; resolve(require(&#39;..&#x2F;components&#x2F;Home.vue&#39;)) &#125;)&#125;;</span><br></pre></td></tr></table></figure><ul><li>方式二: AMD写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const About &#x3D; resolve &#x3D;&gt; require([&#39;..&#x2F;components&#x2F;About.vue&#39;], resolve);</span><br></pre></td></tr></table></figure><ul><li>方式三: 在<strong>ES6中, 我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割.</strong>通过匿名函数的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Home &#x3D; () &#x3D;&gt; import(&#39;..&#x2F;components&#x2F;Home.vue&#39;)</span><br></pre></td></tr></table></figure><h2 id="10-3-vue-router嵌套路由"><a href="#10-3-vue-router嵌套路由" class="headerlink" title="10.3 vue-router嵌套路由"></a>10.3 <a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html" target="_blank" rel="noopener">vue-router嵌套路由</a></h2><ul><li><p>嵌套路由:一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件.</p></li><li><p>路由和组件的关系</p><ul><li><p>实现嵌套路由有两个步骤:</p><ul><li><p>创建对应的子组件, 并且在路由映射中配置对应的子路由.</p></li><li><p>在组件内部使用<code>&lt;router-view&gt;</code>标签.</p></li></ul></li></ul></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514090833556.png" alt="image-20200514090833556"></p><ul><li><p>实现步骤:</p><ul><li>在路由routes中设置<strong>children:</strong>[]属性,来设置二级路由,<strong>注意二级路由不加/</strong></li><li>二级路由组件</li><li>在一级路由组件中添加二级路由<code>&lt;router-link&gt;</code>和二级路由视图<code>&lt;router-view&gt;</code>,注意<strong>二级路由要使用完整的路由路径’/一级路由/二级路由’</strong></li><li>在iindex.js中导入组件</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514092440110.png" alt="image-20200514092440110"></p></li><li><p>可以在children中设置路由的默认路径</p></li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514093340750.png" alt="image-20200514093340750" style="zoom:50%;"><h2 id="10-4-vue-router参数传递"><a href="#10-4-vue-router参数传递" class="headerlink" title="10.4 vue-router参数传递"></a>10.4 <a href="[https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F](https://router.vuejs.org/zh/guide/essentials/passing-props.html#布尔模式)">vue-router参数传递</a></h2><ul><li><p>传递参数主要有两种类型: params和query</p><ul><li><p><strong>params的类型:</strong>动态绑定路由的时候采用的就是这种方式</p><ul><li>配置路由格式: /router/:id</li><li>传递的方式: 在path后面跟上对应的值</li><li>传递后形成的路径: /router/123, /router/abc</li><li>获取方式:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$route.params</span><br><span class="line">类型: Object</span><br><span class="line">一个 key&#x2F;value 对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。</span><br></pre></td></tr></table></figure></li><li><p><strong>query的类型</strong></p><ul><li><p>配置路由格式: /router, 也就是普通配置</p></li><li><p>传递的方式: 对象中使用query的key作为传递方式</p></li><li><p>传递后形成的路径: /router?id=123, /router?id=abc</p></li><li><p>获取方式:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$route.query</span><br><span class="line">类型: Object</span><br><span class="line">一个 key&#x2F;value 对象，表示 URL 查询参数。例如，对于路径 &#x2F;foo?user&#x3D;1，则有 $route.query.user &#x3D;&#x3D; 1，如果没有查询参数，则是个空对象</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现方式:</p><ul><li><code>&lt;router-link&gt;</code>的方式<strong>,注意在to中的path必须要使用绝对路径/</strong></li><li>JavaScript代码方式</li></ul></li><li><p>实现:</p><ul><li><p>传递参数方式1:<code>&lt;router-link&gt;</code>,</p><ul><li>注意:<ul><li>to中传递的对象必须动态绑定v-bind</li><li>to中传递对象的path属性必须添加绝对路径/</li><li>设置之后请求参数的格式</li></ul></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514101332875.png" alt="image-20200514101332875"></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 请求参数1传入对象的方式, --&gt;</span><br><span class="line">   &lt;router-link v-bind:to&#x3D;&quot;&#123;name:&#39;user&#39;,params:&#123;id:userId&#125;&#125;&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;!-- 请求参数方式2: --&gt;</span><br><span class="line">   &lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;profile&#39;,query:&#123;name:&#39;spark&#39;,age:12,height:1.8&#125;&#125;&quot;&gt;个人档案&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li></ul><p>  <img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514095214892.png" alt="image-20200514095214892"></p><ul><li><p>传递参数的方式2:js代码</p><ul><li>注意:<ul><li>这里需要进行异常处理通过catch(err=&gt;{})</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">APP.vue-&gt;template</span><br><span class="line">&lt;button @click&#x3D;&quot;userClick&quot;&gt;用户&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;profileClick&quot;&gt;</span><br><span class="line"></span><br><span class="line">APP.vue-&gt;methods</span><br><span class="line">userClick() &#123;</span><br><span class="line">      &#x2F;&#x2F; 路由url传入对象</span><br><span class="line">      this.$router</span><br><span class="line">        .replace(&#123; name: &quot;user&quot;, params: &#123; id: this.userId &#125; &#125;)</span><br><span class="line">        .catch(err &#x3D;&gt; &#123;&#125;);</span><br><span class="line">      console.log(this.userId);</span><br><span class="line">    &#125;,</span><br><span class="line">    profileClick() &#123;</span><br><span class="line">      this.$router</span><br><span class="line">        .push(&#123;</span><br><span class="line">          path: &quot;&#x2F;profile&quot;,</span><br><span class="line">          query: &#123; name: &quot;spark&quot;, age: 12, height: 1.8 &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(err &#x3D;&gt; &#123;&#125;);&#x2F;&#x2F;异常处理</span><br><span class="line">      console.log(this.$route.query);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取参数</p><ul><li><code>$route.params</code>和<code>$route.query</code></li><li>获取内部的参数,直接在后面<code>.属性名</code>即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;$route.query&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;$route.query.name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;$route.query.age&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;$route.query.height&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;&#x2F;h2&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>所有的组件都是继承自vue对象</strong>,<strong>在Vue的原型中添加属性或者方法,组件中都会继承</strong></p></li><li><p><strong>$route和$router是有区别的</strong></p><ul><li>$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法</li><li>$route为当前router跳转对象,活跃对象里面可以获取name、path、query、params等 </li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514104947828.png" alt="image-20200514104947828"></p></li></ul><h2 id="10-5-vue-router导航守卫"><a href="#10-5-vue-router导航守卫" class="headerlink" title="10.5 vue-router导航守卫"></a>10.5 <a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">vue-router导航守卫</a></h2><ul><li><p>解决的问题:在一个SPA应用中, 如何改变网页的标题</p></li><li><p>解决方案:</p><ul><li>普通的解决方案:在每个对应的.vue组件中,通过mounted声明周期函数,执行对应代码的修改即可,页面较多时不容易维护</li><li>通过导航守卫的方式进行解决</li></ul></li><li><p>导航守卫是:</p><ul><li>vue-router提供的导航守卫主要<strong>用来监听路由的进入和离开的</strong></li><li>vue-router提供了<strong>beforeEach</strong>和<strong>afterEach的钩子函数</strong>, 它们会在<strong>路由即将改变前和改变后触发</strong>.</li></ul></li><li><p>利用导航守卫beforeEach解决:</p><ul><li>我们可以在钩子当中定义一些标题, 可以利用meta来定义</li><li>其次, 利用导航守卫,修改我们的标题.</li><li>router.beforeEach()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">导航钩子的三个参数解析:</span><br><span class="line">to: 即将要进入的目标的路由对象.</span><br><span class="line">from: 当前导航即将要离开的路由对象.</span><br><span class="line">next: 调用该方法后, 才能进入下一个钩子.</span><br></pre></td></tr></table></figure><ul><li>完整代码router-&gt;index,js</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">const routes &#x3D; [</span><br><span class="line">  &#x2F;&#x2F; 设置默认路径</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#39;,</span><br><span class="line">    &#x2F;&#x2F; redirect重定向,文件一开始就设置默认的home首页</span><br><span class="line">    redirect: &#39;&#x2F;home&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;home&#39;,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      &#x2F;&#x2F; 设置属性</span><br><span class="line">      title: &#39;首页&#39;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#x2F;&#x2F;设置默认路径</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;&#39;,</span><br><span class="line">        redirect: &#39;news&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &#x2F;&#x2F; 二级目录不用添加&#x2F;</span><br><span class="line">        path: &#39;news&#39;,</span><br><span class="line">        component: HomeNews</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#39;message&#39;,</span><br><span class="line">        component: HomeMessage</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;about&#39;,</span><br><span class="line">    component: About,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      &#x2F;&#x2F; 设置属性</span><br><span class="line">      title: &#39;关于&#39;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;user&#x2F;:id&#39;,</span><br><span class="line">    component: User,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      &#x2F;&#x2F; 设置属性</span><br><span class="line">      title: &#39;用户&#39;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 命名路由</span><br><span class="line">    name: &#39;user&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;profile&#39;,</span><br><span class="line">    component: Profile,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      &#x2F;&#x2F; 设置属性</span><br><span class="line">      title: &#39;个人档案&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  &#x2F;&#x2F; 这里routes</span><br><span class="line">  routes,</span><br><span class="line">  &#x2F;&#x2F; 默认的加载方式是hash,前面都带有#,http:&#x2F;&#x2F;localhost:8081&#x2F;#&#x2F;about</span><br><span class="line">  &#x2F;&#x2F; 设置加载模式为history去除#,http:&#x2F;&#x2F;localhost:8081&#x2F;about</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  &#x2F;&#x2F; 设置路由中的插件被点击的链接变化</span><br><span class="line">  linkActiveClass: &#39;active&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置前置守卫(guard)</span><br><span class="line">router.beforeEach((to, from, nexty) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 从from跳转到to</span><br><span class="line">  document.title &#x3D; to.matched[0].meta.title</span><br><span class="line">  console.log(to);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 通过next转给下一个钩子函数,否则代码不会向下执行</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导出路由实例</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><ul><li>to—router的输出显示</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514154041640.png" alt="image-20200514154041640"></p></li><li><p>知识点小结:</p><ul><li><p><strong><a href="https://router.vuejs.org/zh/guide/advanced/meta.html" target="_blank" rel="noopener">routes中的meta属性</a></strong>表示的是路由元信息,存放路由相关的数据,访问通过router中的matched属性访问</p></li><li><p>钩子函数的解析</p><ul><li><p><strong>router.beforeEach(),全局前置守卫,路由跳转之前执行</strong></p><p>当一个导航触发时，全局前置守卫按照创建顺序调用。<strong>守卫是异步解析执行</strong>，此时导航在所有守卫 resolve 完之前一直处于 <strong>等待中</strong>。</p><p>每个守卫方法接收三个参数：</p><ul><li><strong><code>to: Route</code></strong>: 即将要进入的目标 <a href="https://router.vuejs.org/zh/api/#路由对象" target="_blank" rel="noopener">路由对象</a></li><li><strong><code>from: Route</code></strong>: 当前导航正要离开的路由</li><li><strong><code>next: Function</code></strong>: 一定要调用该方法来 <strong>resolve</strong> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。<ul><li><strong><code>next()</code></strong>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <strong>confirmed</strong> (确认的)。</li><li><strong><code>next(false)</code></strong>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li><li><strong><code>next(&#39;/&#39;)</code> 或者 <code>next({ path: &#39;/&#39; })</code></strong>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 <code>next</code> 传递任意位置对象，且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <a href="https://router.vuejs.org/zh/api/#to" target="_blank" rel="noopener"><code>router-link</code> 的 <code>to</code> prop</a> 或 <a href="https://router.vuejs.org/zh/api/#router-push" target="_blank" rel="noopener"><code>router.push</code></a> 中的选项。</li><li><strong><code>next(error)</code></strong>: (2.4.0+) 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <a href="https://router.vuejs.org/zh/api/#router-onerror" target="_blank" rel="noopener"><code>router.onError()</code></a> 注册过的回调。</li></ul></li></ul><p><strong>确保要调用 <code>next</code> 方法，否则钩子就不会被 resolved解析。</strong></p></li><li><p><strong>router.afterEach().全局后置钩子hook,路由跳转之后执行,不需要主动调用next()函数.钩子函数已经执行完了</strong></p></li></ul></li><li><p>导航守卫划分:</p><ul><li><p>全局守卫:</p><ul><li>beforeEach</li><li>beforeResolve:在 2.5.0+ 你可以用 <code>router.beforeResolve</code> 注册一个全局守卫。这和 <code>router.beforeEach</code> 类似，区别是在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后</strong>，解析守卫就被调用。</li><li>afterEach</li></ul></li><li><p>路由独享守卫</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li><li><p>组件内的守卫</p><ul><li><code>beforeRouteEnter</code></li><li><code>beforeRouteUpdate</code> (2.2 新增)</li><li><code>beforeRouteLeave</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onst Foo &#x3D; &#123;</span><br><span class="line">  template: &#96;...&#96;,</span><br><span class="line">  beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">    &#x2F;&#x2F; 在渲染该组件的对应路由被 confirm 前调用</span><br><span class="line">    &#x2F;&#x2F; 不！能！获取组件实例 &#96;this&#96;</span><br><span class="line">    &#x2F;&#x2F; 因为当守卫执行前，组件实例还没被创建</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, from, next) &#123;</span><br><span class="line">    &#x2F;&#x2F; 在当前路由改变，但是该组件被复用时调用</span><br><span class="line">    &#x2F;&#x2F; 举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class="line">    &#x2F;&#x2F; 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class="line">    &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">    &#x2F;&#x2F; 导航离开该组件的对应路由时调用</span><br><span class="line">    &#x2F;&#x2F; 可以访问组件实例 &#96;this&#96;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>完整的导航解析流程</p><ul><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li></ul></li></ul><h2 id="10-6-keep-alive"><a href="#10-6-keep-alive" class="headerlink" title="10.6 keep-alive"></a>10.6 <a href="https://cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="noopener">keep-alive</a></h2><ul><li><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染</p></li><li><p>两个重要的属性</p><ul><li>include - 字符串或正则表达，只有匹配的组件会被缓存</li><li>exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过exclude&#x3D;&quot;组件名称,组件名称&quot;,注意这里的组件名称就是组价中name的值,可以去除这里的默认操作</span><br></pre></td></tr></table></figure></li><li><p>router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：</p></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514163531902.png" alt="image-20200514163531902"></p><ul><li><p>通过生命周期函数进行验证</p></li><li><p>keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。当组件在<code>&lt;keep-alive&gt;</code> 组件 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。<strong>(即:生命周期函数activated和deactivated只在keep-alive包裹的组件中切换才会调用执行)</strong></p></li><li><p>需求解决:切换url后缓存之前的二级路由选中状态</p><ul><li><strong>keep-alive是放在调用该组件的位置,并包裹该组件</strong></li><li>组件中设置path,通过activated周期函数设置url</li><li>通过组件内导航守卫beforeRouterLeave保存path</li><li>添加keep-alive组件后create和destroy只执行一次</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">组件Home.vue</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &#x2F;&#x2F; 设置路径实现切换后路径的缓存</span><br><span class="line">      path: &quot;&#x2F;home&#x2F;news&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 声明周期函数</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&quot;home-created&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&quot;home-destroyed&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 这两个函数只有在该组件放在keep-alive组件中切换使用才会调用,注意,keep-alive放在调用该组件的地方</span><br><span class="line">  activated() &#123;</span><br><span class="line">    &#x2F;&#x2F; 页面激活时执行</span><br><span class="line">    this.$router.push(this.path).catch(err &#x3D;&gt; &#123;&#125;);</span><br><span class="line">    console.log(&quot;home-activated&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  deactivated() &#123;</span><br><span class="line">    console.log(&quot;home-deactivated&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 组件内导航守卫,保存路由离开之前的path</span><br><span class="line">  beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">    console.log(this.$route.path);</span><br><span class="line">    this.path &#x3D; this.$route.path;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">调用组件的App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- keep-alive组件的使用使用该组件 --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;router-view &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;keep-alive&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">vue生命周期函数知识点</a></p></li></ul><h2 id="10-7-tabbar案例-学会组件的封装cli2"><a href="#10-7-tabbar案例-学会组件的封装cli2" class="headerlink" title="10.7 tabbar案例(学会组件的封装cli2)"></a>10.7 tabbar案例(学会组件的封装cli2)</h2><ul><li>实现思路</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 如果在下方有一个单独的TabBar组件，你如何封装</span><br><span class="line">自定义TabBar组件，在APP中使用</span><br><span class="line">让TabBar出于底部，并且设置相关的样式</span><br><span class="line">2.TabBar中显示的内容由外界决定</span><br><span class="line">定义插槽</span><br><span class="line">flex布局平分TabBar</span><br><span class="line">3.自定义TabBarItem，可以传入 图片和文字</span><br><span class="line">定义TabBarItem，并且定义两个插槽：图片、文字。</span><br><span class="line">给两个插槽外层包装div，用于设置样式。</span><br><span class="line">填充插槽，实现底部TabBar的效果</span><br><span class="line">4.传入 高亮图片</span><br><span class="line">定义另外一个插槽，插入active-icon的数据</span><br><span class="line">定义一个变量isActive，通过v-show来决定是否显示对应的icon</span><br><span class="line">5.TabBarItem绑定路由数据</span><br><span class="line">安装路由：npm install vue-router —save</span><br><span class="line">完成router&#x2F;index.js的内容，以及创建对应的组件</span><br><span class="line">main.js中注册router</span><br><span class="line">APP中加入&lt;router-view&gt;组件</span><br><span class="line">6.点击item跳转到对应路由，并且动态决定isActive</span><br><span class="line">监听item的点击，通过this.$router.replace()替换路由路径</span><br><span class="line">通过this.$route.path.indexOf(this.link) !&#x3D;&#x3D; -1来判断是否是active</span><br><span class="line">7.动态计算active样式</span><br><span class="line">封装新的计算属性：this.isActive ? &#123;&#39;color&#39;: &#39;red&#39;&#125; : &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>效果图</li></ul><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514235351995.png" alt="image-20200514235351995" style="zoom:50%;"><ul><li>代码实现:</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B07/image-20200514235303794.png" alt="image-20200514235303794"></p><ul><li><p>知识点汇总:</p><ul><li><strong>组件名称首字母都大写,在template中使用组件转化为对应的小写并和-连接 eg:TabBar—-&gt;tab-bar</strong></li><li><strong>组件的通信</strong>中,父组件中调用子组件中自定义的属性可以在子组件的props中接收父组件中传过来的参数</li><li>具名插槽的使用中,如果要对插槽中的内容进行设置,一般在插槽的外部包一层div,对div进行操作来间接的操作具名插槽</li><li>注意异常处理调用.catch(err&gt;{})</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$router.replace(this.path).catch(err &#x3D;&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>将每个url的组件放在views文件夹中,并创建自己的文件夹</li><li><strong>文件夹的重命名,修改文件别名</strong><ul><li>dom中使用重命名需要在前面加<del>号`src=’</del>assets/img/1.png’`’</li><li>js中直接使用即可</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#39;@&#39;: resolve(&#39;src&#39;),</span><br><span class="line">      &#39;assets&#39;: resolve(&#39;src&#x2F;assets&#39;),</span><br><span class="line">      &#39;components&#39;: resolve(&#39;src&#x2F;components&#39;),</span><br><span class="line">      &#39;views&#39;: resolve(&#39;src&#x2F;views&#39;),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
Vue-Router前端路由
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="前端" scheme="https://sparkparis.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="https://sparkparis.github.io/tags/vue/"/>
    
      <category term="router" scheme="https://sparkparis.github.io/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记6-Vue CLI3</title>
    <link href="https://sparkparis.github.io/2020/05/13/Vue%E7%AC%94%E8%AE%B06/"/>
    <id>https://sparkparis.github.io/2020/05/13/Vue%E7%AC%94%E8%AE%B06/</id>
    <published>2020-05-13T02:33:20.000Z</published>
    <updated>2020-05-18T14:55:14.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">Vue CLI 3详解,箭头函数的补充,element-ui插件的使用<a id="more"></a><!-- TOC --><ul><li><a href="#9-vue-cli-3">9 Vue CLI 3</a><ul><li><a href="#91-基本使用">9.1 基本使用</a></li><li><a href="#92-vue-cli3中的配置文件">9.2 Vue CLI3中的配置文件</a></li><li><a href="#箭头函数补充">箭头函数补充</a></li></ul></li></ul><!-- /TOC --><h1 id="9-Vue-CLI-3"><a href="#9-Vue-CLI-3" class="headerlink" title="9 Vue CLI 3"></a>9 Vue CLI 3</h1><h2 id="9-1-基本使用"><a href="#9-1-基本使用" class="headerlink" title="9.1 基本使用"></a>9.1 基本使用</h2><ul><li><p>vue-cli 3 与 2 版本有很大区别</p><ul><li><p><strong>vue-cli 3 是基于 webpack 4 打造</strong>，<strong>vue-cli 2 还是 webapck 3</strong></p></li><li><p>vue-cli 3 的设计原则是“<strong>0配置</strong>”，移除的配置文件根目录下的，build和config等目录</p></li><li><p>vue-cli 3 提供了 <strong>vue ui 命令，提供了可视化配置，更加人性化</strong></p></li><li><p><strong>移除了static文件夹，新增了public文件夹</strong>，<strong>并且index.html移动到public中</strong></p></li></ul></li><li><p>琐碎知识点补充</p><ul><li><p>vue2.5.21 -&gt; vue2.x -&gt; flow-type(facebook</p><p>Vue3.x -&gt; TypeScript(micro(微小)soft(软件)) </p></li><li><p>rc -&gt; run command(后缀名中带有rc)</p></li><li><p>vcs -&gt; version control system(版本控制git/svn)</p></li></ul></li><li><p>Vue CLI 3 创建项目<code>vue create 项目名称</code></p></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B06/image-20200513105530686.png" alt="image-20200513105530686"></p><ul><li>目录结构详情</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B06/image-20200513111032315.png" alt="image-20200513111032315"></p><ul><li>运行(查看package.json文件中的script标签)<code>npm run serve</code></li><li>vue cli3中main.js文件中的,<code>vm.$mount(&#39;#app&#39;)</code>挂载dom的方式和<code>el:&#39;#app&#39;</code>方式是一样的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><h2 id="9-2-Vue-CLI3中的配置文件"><a href="#9-2-Vue-CLI3中的配置文件" class="headerlink" title="9.2 Vue CLI3中的配置文件"></a>9.2 Vue CLI3中的配置文件</h2><ul><li><p>方式1:Vue CLI3中的配置文件</p><ul><li>Vue-CLI3的配置通过命令<code>vue ui</code>打开本地服务器进行管理,<ul><li>在浏览器中进行配置文件的操作,内部可以进行文件插件安装服务器的启动等</li><li><strong>隐藏的配置文件</strong>都在Service.js文件中</li></ul></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B06/image-20200513143246278.png" alt="image-20200513143246278"></p><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B06/image-20200513143305443.png" alt="image-20200513143305443"></p><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B06/image-20200513143407276.png" alt="image-20200513143407276"></p></li><li><p>方式2:<strong>自定义配置文件</strong>:在根目录下创建<strong>vue.config.js</strong>自定义配置文件(文件夹名称是固定的)</p><ul><li>自定义的配置文件会和脚手架创建的配置文件进行合并的</li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B06/image-20200513144041332.png" alt="image-20200513144041332"></p></li></ul><h2 id="箭头函数补充"><a href="#箭头函数补充" class="headerlink" title="箭头函数补充"></a>箭头函数补充</h2><ul><li><strong>普通函数:setTimeout中的this指向的是window,function定义的函数中的this默认调用的是call函数指向当前对象</strong></li><li><strong>箭头函数中的this引用的是最近作用域中的this</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 字面量对象中定义</span><br><span class="line">    var obj &#x3D; &#123;</span><br><span class="line">      &#x2F;&#x2F; 字面量对象中定义方法</span><br><span class="line">      aaa() &#123;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          console.log(this)&#x2F;&#x2F;Window</span><br><span class="line"></span><br><span class="line">          setTimeout(function () &#123;</span><br><span class="line">            console.log(this);&#x2F;&#x2F;普通函数中setTimeout调用的永远是window对象</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">          setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(this)&#x2F;&#x2F;箭头函数寻找最近作用域,找到上一次的setTimeout,这里的this是Window</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line"></span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">          console.log(this)&#x2F;&#x2F;aaa()</span><br><span class="line"></span><br><span class="line">          setTimeout(function () &#123;</span><br><span class="line">            console.log(this);&#x2F;&#x2F;普通函数中指向window</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">          setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(this)&#x2F;&#x2F;寻找最近作用域aaa()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.aaa()</span><br></pre></td></tr></table></figure><h1 id="Element-UI插件的基本使用"><a href="#Element-UI插件的基本使用" class="headerlink" title="Element-UI插件的基本使用"></a>Element-UI插件的基本使用</h1><ul><li>Element-UI:一套基于2.0的桌面端组件库</li></ul><p>官网地址：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p><ul><li><p>安装方式:</p><ul><li><p>npm安装</p><ul><li><p>安装：<code>npm install element-ui -S</code></p></li><li><p>导入使用：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导入组件</span><br><span class="line"></span><br><span class="line">  import ElementUI from &quot;element-ui&quot;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;导入样式</span><br><span class="line"></span><br><span class="line">  import &quot;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;安装插件</span><br><span class="line"></span><br><span class="line">  Vue.use(ElementUI)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li>[vue ui安装](<a href="https://www.bilibili.com/video/BV197411p77W?p=148" target="_blank" rel="noopener">https://www.bilibili.com/video/BV197411p77W?p=148</a></li></ul><p><img src="/2020/05/13/Vue%E7%AC%94%E8%AE%B06/image-20200518221911565.png" alt="image-20200518221911565"></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
Vue CLI 3详解,箭头函数的补充,element-ui插件的使用
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="前端" scheme="https://sparkparis.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://sparkparis.github.io/tags/js/"/>
    
      <category term="vuecli3" scheme="https://sparkparis.github.io/tags/vuecli3/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记5-Vue-CLI脚手架</title>
    <link href="https://sparkparis.github.io/2020/05/10/Vue%E7%AC%94%E8%AE%B05/"/>
    <id>https://sparkparis.github.io/2020/05/10/Vue%E7%AC%94%E8%AE%B05/</id>
    <published>2020-05-10T02:39:43.000Z</published>
    <updated>2020-05-13T08:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">Vue-CLI相关介绍和Vue CLI2基本使用<a id="more"></a><!-- TOC --><ul><li><a href="#8-vue-cli相关httpsclivuejsorgzhguide">8 <a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vue CLI相关</a></a><ul><li><a href="#81-vue-cli介绍">8.1 Vue CLI介绍</a></li><li><a href="#82-vue-cli2的使用">8.2 Vue CLI2的使用</a></li><li><a href="#83-runtime-compiler和runtime-only的区别">8.3 <strong>Runtime-Compiler和</strong>Runtime-only的区别</a><ul><li><a href="#应用场景">应用场景</a></li><li><a href="#render和template">render和template</a></li></ul></li><li><a href="#84-其他">8.4 其他</a></li></ul></li></ul><!-- /TOC --><h1 id="8-Vue-CLI相关"><a href="#8-Vue-CLI相关" class="headerlink" title="8 Vue CLI相关"></a>8 <a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vue CLI相关</a></h1><h2 id="8-1-Vue-CLI介绍"><a href="#8-1-Vue-CLI介绍" class="headerlink" title="8.1 Vue CLI介绍"></a>8.1 Vue CLI介绍</h2><ul><li><p>Vue CLI</p><ul><li>CLI:<strong>Command-Line Interface</strong>,命令行界面,俗称脚手架,命令行界面,</li><li>是Vue.js项目的<strong>脚手架</strong></li><li>还用Vue CLI可以<strong>快速的搭建Vue开发环境以及对应的webpack配置</strong></li></ul></li><li><p>应用场景:开发大型项目,需要使用脚手架Vue-CLI</p></li><li><p>使用Vue.js开发大型应用时，我们需要<strong>考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情</strong></p></li><li><p>Vue CLI使用的前提-<strong>Node环境</strong></p><ul><li><p>vue cli是搭建vue开发环境和webpack配置,而webpack配置时依赖于node环境的的</p></li><li><p>安装步骤:</p><ul><li><p>安装<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs</a></p></li><li><p>检测安装的版本(默认情况下自动安装 node版本和npm),环境要求8.9以上</p></li><li><p>cnpm安装</p><p>由于国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p><p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>这样就可以使用 cnpm 命令来安装模块了：</p><p>cnpm install [name]</p></li></ul></li><li><p><strong>NPM</strong>:Node Package Manager</p><ul><li>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。</li></ul></li></ul></li><li><p>Vue CLI使用前提- <strong>webpack</strong></p><ul><li><p>Vue.js官方脚手架工具就<strong>使用了webpack模板</strong></p><ul><li><strong>对所有的资源会压缩等优化操作</strong></li><li>它在开发过程中<strong>提供了一套完整的功能</strong>，能够使得我们开发过程中变得高效。</li></ul></li><li><p>webpack的全局安装(这里需要安装以前的3.6的版本)</p><ul><li><code>npm install webpack -g</code></li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200512221617497.png" alt="image-20200512221617497"></p></li></ul></li></ul><h2 id="8-2-Vue-CLI2的使用"><a href="#8-2-Vue-CLI2的使用" class="headerlink" title="8.2 Vue CLI2的使用"></a>8.2 Vue CLI2的使用</h2><ul><li><p>安装操作</p><ul><li>安装脚手架:如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。或者清除c盘的npm-cache之后重新安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli,注意这里安装的是vue-cli的脚手架3的版本如果需要想按照Vue CLI2的方式初始化项目时不可以的。</span><br></pre></td></tr></table></figure><p>这里拉取vue CLI2.0的版本,通过桥接工具来继续使用vue cli2.0版本<code>npm install vue/cli-init</code></p><p>安装完成版之后查看当前版本<code>vue -version</code></p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513063933694.png" alt="image-20200513063933694" style="zoom:80%;"></li><li><p>Vue CLI2初始化项目</p><ul><li>创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack 项目名称</span><br></pre></td></tr></table></figure><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513070150718.png" alt="image-20200513070150718"></p><ul><li><p>注意:</p><ul><li>在使用中需要将ESLint(严格按照编码的格式编写,否则会报错),安装之后可以在config文件夹中的index.js文件中修改为false<code>useEslint: true,</code></li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513085755247.png" alt="image-20200513085755247"></p><ul><li>开启服务器就打开网页选项<code>autoOpenBrowser: true,</code></li></ul></li></ul></li></ul><ul><li><p>目录结构详情</p><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513073917166.png" alt="image-20200513073917166"></p></li></ul><ul><li>Vue CLI3初始化项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名称</span><br></pre></td></tr></table></figure><ul><li><p><strong>js文件执行:</strong></p><ul><li><p>js文件执行的编译过程:js-&gt;字节码-&gt;浏览器解析</p></li><li><p>V8引擎可以直接跳过字节码环节到二进制代码,二进制代码时机制直接执行的代码,速度快</p></li><li><p>js文件执行的环境:</p><ul><li>浏览器环境:chrom(V8引擎)/火狐/IE</li><li>node环境:node是使用C++写的,内部也是V8引擎可以直接运行js文件通过node命令</li></ul></li></ul></li><li><p>运行: <code>npm run dev</code></p><h2 id="8-3-Runtime-Compiler和Runtime-only的区别"><a href="#8-3-Runtime-Compiler和Runtime-only的区别" class="headerlink" title="8.3 Runtime-Compiler和Runtime-only的区别"></a>8.3 <strong>Runtime-Compiler和</strong>Runtime-only的区别</h2></li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513082104581.png" alt="image-20200513082104581"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>如果在之后的开发中，你依然使用template，就需要选择Runtime-Compiler</li><li>如果你之后的开发中，使用的是.vue文件夹开发，那么可以选择Runtime-only,通过render进行模板渲染</li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513090204423.png" alt="image-20200513090204423"></p><h3 id="render和template"><a href="#render和template" class="headerlink" title="render和template"></a>render和template</h3><ul><li><p><strong>render和template区别</strong></p><ul><li>相同点:直接替换掉el挂载的dom对象中的内容替换为自己的内容</li><li>不同点:<ul><li>调用vue的运行方式不同,render-&gt;runtimeonly,template-&gt;runtimecompiler</li><li>template需要通过component进行注册,render直接就可以使用</li></ul></li><li>后期使用都使用.vue文件的runtimeonly的方式</li></ul></li><li><p>Runtime-Compiler 和 Runtime-only</p><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513092659183.png" alt="image-20200513092659183"></p><ul><li><p>runtime-Complie中模板渲染流程:<strong>template -&gt; ast(抽象语法书) -&gt; render (转化为render函数)-&gt; visual dom(虚拟dom) -&gt; UI(转化为真实DOM)</strong></p></li><li><p>Runtime-only:<strong>render -&gt; visual dom -&gt; UI</strong>(1.性能更高 2.下面的代码量更少)</p><ul><li><p>.vue文件中的template是由<strong>vue-template-compiler(loader)</strong>来进行处理的</p></li><li><p><strong>render函数详细解析</strong></p><ul><li>render中传递过来的其实是一个createElement()的函数这里通过h进行接收</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.普通用法: createElement(&#39;标签&#39;, &#123;标签的属性&#125;, [&#39;&#39;])</span><br><span class="line">return createElement(&#39;h2&#39;,&#123;class: &#39;box&#39;&#125;,[&#39;Hello World&#39;, createElement(&#39;button&#39;, [&#39;按钮&#39;])])</span><br><span class="line">2.传入组件对象:</span><br><span class="line">return createElement(App)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  &#x2F;&#x2F; components: &#123; App &#125;,</span><br><span class="line">  &#x2F;&#x2F; template: &#39;&lt;App&#x2F;&gt;&#39;</span><br><span class="line">  render: function (createElement) &#123;</span><br><span class="line">    &#x2F;&#x2F; createElement的用法</span><br><span class="line">    &#x2F;&#x2F; 1.普通用法: createElement(&#39;标签&#39;, &#123;标签的属性&#125;, [&#39;&#39;])</span><br><span class="line">    &#x2F;&#x2F; return createElement(&#39;h2&#39;, &#123; class: &#39;box&#39; &#125;, [&#39;hello vue&#39;, createElement(&#39;h3&#39;, &#123; id: &#39;box1&#39; &#125;, [&#39;box1show&#39;])])</span><br><span class="line">    &#x2F;&#x2F; 2.传入组件return createElement(组件名称)</span><br><span class="line">    return createElement(App)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>执行结果(普通方式)</li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513101206013.png" alt="image-20200513101206013"></p></li></ul></li></ul></li><li><p>vue程序的运行过程</p></li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513094237533.png" alt="image-20200513094237533"></p><ul><li>render函数的使用</li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513095131478.png" alt="image-20200513095131478"></p><ul><li><strong>后期使用都用runtimeonly-&gt;render函数</strong></li></ul><h2 id="8-4-其他"><a href="#8-4-其他" class="headerlink" title="8.4 其他"></a>8.4 其他</h2><ul><li><strong>npm run build</strong>执行加载(项目构建生成环境下使用)</li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513095304191.png" alt="image-20200513095304191"></p><ul><li><strong>npm run dev</strong>执行加载(开启本地服务器开发环境下使用)</li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513095450266.png" alt="image-20200513095450266"></p><ul><li><strong>修改配置：**</strong>webpack.base.conf.js<strong>**起别名</strong></li></ul><p><img src="/2020/05/10/Vue%E7%AC%94%E8%AE%B05/image-20200513095602564.png" alt="image-20200513095602564"></p>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
Vue-CLI相关介绍和Vue CLI2基本使用
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="前端" scheme="https://sparkparis.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://sparkparis.github.io/tags/js/"/>
    
      <category term="vue-cli" scheme="https://sparkparis.github.io/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记4-Webpack详解</title>
    <link href="https://sparkparis.github.io/2020/05/09/Vue%E7%AC%94%E8%AE%B04/"/>
    <id>https://sparkparis.github.io/2020/05/09/Vue%E7%AC%94%E8%AE%B04/</id>
    <published>2020-05-08T16:05:03.000Z</published>
    <updated>2020-05-15T02:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">webpack的详细学习,安装和使用,模块化的开发,vue的配置<a id="more"></a><!-- TOC --><ul><li><a href="#7-webpackhttpswwwwebpackjscomconcepts">7 <a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack</a></a><ul><li><a href="#71-认识webpack">7.1 认识webpack</a><ul><li><a href="#711-webpack模块化">7.1.1 webpack模块化</a></li><li><a href="#712-webpack打包">7.1.2 webpack打包</a></li><li><a href="#713-webpack和gulpgrunt的比较">7.1.3 webpack和gulp/grunt的比较</a></li></ul></li><li><a href="#72-webpack的安装">7.2 webpack的安装</a></li><li><a href="#73-webpack的起步">7.3 webpack的起步</a></li><li><a href="#74-webpack的配置httpswwwwebpackjscomconcepts">7.4 <a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack的配置</a></a></li><li><a href="#75-loaders的使用httpswwwwebpackjscomloaders加载文件">7.5 <a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener">loaders的使用</a>(加载文件)</a><ul><li><a href="#webpack中css的配置"><strong>webpack中css的配置</strong></a></li><li><a href="#webpack中less文件的处理"><strong>webpack中less文件的处理</strong></a></li><li><a href="#图片文件处理-url-loaderfile-loader">图片文件处理-url-loader/file-loader</a></li><li><a href="#es6语法处理-es5"><strong>ES6语法处理</strong>-&gt;ES5</a></li></ul></li><li><a href="#76-webpack中配置vue">7.6 webpack中配置Vue</a><ul><li><a href="#761-webpack中vue配置和使用">7.6.1 webpack中vue配置和使用</a></li><li><a href="#762-el和template的区别">7.6.2 el和template的区别</a><ul><li><a href="#vue文件封装处理">.vue文件封装处理</a></li></ul></li></ul></li><li><a href="#77-plugin的使用">7.7 plugin的使用</a><ul><li><a href="#添加版权插件">添加版权插件</a></li><li><a href="#打包html的pluginhtmlwebpackplugin">打包html的plugin(<strong>HtmlWebpackPlugin</strong>)</a></li><li><a href="#js压缩的plugin发布时的配置">js压缩的Plugin(发布时的配置)</a></li></ul></li><li><a href="#78-搭建本地服务器开发时的配置">7.8 搭建本地服务器(开发时的配置)</a></li><li><a href="#79-webpack配置抽离">7.9 webpack配置抽离</a></li></ul></li></ul><!-- /TOC --><h1 id="7-webpack"><a href="#7-webpack" class="headerlink" title="7 webpack"></a>7 <a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack</a></h1><h2 id="7-1-认识webpack"><a href="#7-1-认识webpack" class="headerlink" title="7.1 认识webpack"></a>7.1 认识webpack</h2><ul><li>webpack是一个现代的JavaScript应用的静态<strong>模块打包</strong>工具。</li><li>webpack主要是<strong>模块</strong> 和 <strong>打包</strong><ul><li>模块化:</li><li>打包:对前端开发中的ES6,sass,less,模块间的依赖都需要第三方工具进行打包成浏览器可以识别的代码才能进行项目的部署,其他的<a href="https://segmentfault.com/a/1190000015957662" target="_blank" rel="noopener">构建化工具</a>还有:gulp/grunt/webpack/</li></ul></li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509103324835.png" alt="image-20200509103324835"></p><h3 id="7-1-1-webpack模块化"><a href="#7-1-1-webpack模块化" class="headerlink" title="7.1.1 webpack模块化"></a>7.1.1 webpack模块化</h3><ul><li>webpack模块化概念<ul><li>前端模块化中提到了目前前端模块化规范:<strong>AMD、CMD、CommonJS、ES6</strong>。<ul><li><strong>AMD、CMD、CommonJS都需要依赖node环境才能使用,在webpack中就可以 直接使用了,webpack是依赖于node环境的</strong></li><li><strong>ES6可以直接在浏览器中使用</strong></li></ul></li><li>在ES6之前，我们要<strong>想进行模块化开发</strong>，就必须<strong>借助于其他的工具</strong>，让我们可以<strong>进行模块化开发</strong></li><li>并且在通过模块化开发完成了项目后，还需要处理模块间的各种依赖，并且将其进行整合打包。</li><li><strong>webpack</strong>其中<strong>一个核心就是让我们可能进行模块化开发</strong>，并且会<strong>帮助我们处理模块间的依赖关系</strong>。</li><li>而且不仅仅是<strong>JavaScript文件</strong>，我们的<strong>CSS、图片、json文件等等在webpack中都可以被当做模块来使用</strong></li></ul></li><li><strong>webpack核心1:进行模块化开发,帮助我们处理模块间的依赖关系</strong></li></ul><h3 id="7-1-2-webpack打包"><a href="#7-1-2-webpack打包" class="headerlink" title="7.1.2 webpack打包"></a>7.1.2 webpack打包</h3><ul><li><p><strong>webpack核心2:打包</strong></p></li><li><p>将webpack中的各种<strong>资源模块进行打包</strong>合并成一个或多个包(Bundle)。</p></li><li><p>并且在打包的过程中，还可以<strong>对资源进行处理</strong>，比如<strong>压缩图片，将scss转成css，将ES6语法转成ES5语法，将TypeScript转成JavaScript</strong>等等操作。</p></li></ul><h3 id="7-1-3-webpack和gulp-grunt的比较"><a href="#7-1-3-webpack和gulp-grunt的比较" class="headerlink" title="7.1.3 webpack和gulp/grunt的比较"></a>7.1.3 webpack和gulp/grunt的比较</h3><ul><li><p><strong>grunt/gulp的核心是Task</strong></p><ul><li><p>我们可以配置一系列的task，并且定义task要处理的事务（例如ES6、ts转化，图片压缩，scss转成css）</p></li><li><p>之后让grunt/gulp来依次执行这些task，而且让整个<strong>流程自动化</strong>。</p></li><li><p>所以grunt/gulp也被称为前端自动化任务管理工具</p></li></ul></li><li><p>使用场景:</p><ul><li><p>如果你的工程模块依赖非常简单，甚至是没有用到模块化的概念。</p><p><strong>只需要进行简单的合并、压缩，就使用grunt/gulp即可</strong>。</p></li><li><p>但是如果整个项目<strong>使用了模块化管理</strong>，而且<strong>相互依赖非常强</strong>，我们就可以使用更加强大的<strong>webpack</strong>了</p></li></ul></li><li><p><strong>不同</strong></p><ul><li><p><strong>grunt/gulp更加强调的是前端流程的自动化，模块化不是它的核心</strong>。</p></li><li><p><strong>webpack更加强调模块化开发管理，而文件压缩合并、预处理等功能，是他附带的功能</strong>。</p></li></ul></li></ul><h2 id="7-2-webpack的安装"><a href="#7-2-webpack的安装" class="headerlink" title="7.2 webpack的安装"></a>7.2 webpack的安装</h2><ul><li><p>webpack安装流程</p><ul><li><p><strong>安装nodejs环境</strong><code>node -v</code>(<strong>webpack依赖于node环境</strong>)</p></li><li><p><strong>全局安装</strong>webpack<code>npm install webpack@3.6.0 -g</code>,查看版本’webpack -v’</p></li><li><p><strong>局部安装</strong>:安装指定动作目录的,会保存在package.json文件</p><ul><li><p><strong>–save-dev`是开发时依赖，项目打包后不需要继续使用的。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 对应目录</span><br><span class="line">npm install webpack@3.6.0  --save-dev</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>webpack全局安装和局部安装使用区分</p><ul><li>在终端直接执行webpack命令，使用的全局安装的webpack</li><li>当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack</li></ul></li><li><p><strong>webpack中所有的模块化开发规范都可以使用</strong></p></li></ul><h2 id="7-3-webpack的起步"><a href="#7-3-webpack的起步" class="headerlink" title="7.3 webpack的起步"></a>7.3 webpack的起步</h2><ul><li><p>准备工作:</p><ul><li>创建文件和文件夹解析<ul><li><strong>dist文件夹</strong>:用于存放 之后打包的文件(<strong>在部署服务器端的时候使用</strong>)</li><li><strong>src文件</strong>:用于存放源文件</li><li><strong>index.htm</strong>l:浏览器打开展示的首页html</li><li><strong>package.json</strong>:<code>npm init -y</code>生成package.json文件</li></ul></li></ul></li><li><p>webpack代码的执行步骤</p><ul><li>准备工作的进行</li><li>在src文件夹中创建入口文件main.js</li><li>src同文件目录下创建index.html文件</li><li>在src中创建js文件,可以通过<strong>模块化开发</strong>导入到main.js中引入,代码执行之后在当前文件夹下通过webpack命令打包生成<strong>dist中的打包boudle.js</strong>文件(每次修改完之后都到执行webpack命令重新打包)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack .&#x2F;src&#x2F;main.js .&#x2F;dist&#x2F;bound.js</span><br></pre></td></tr></table></figure><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509144927352.png" alt="image-20200509144927352"></p><ul><li><p>将打包之后的文件引入到index.html文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;.&#x2F;dist&#x2F;bound.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注意:webpack中可以所有的模块化开发规范进行开发(commonjs,ES6等)</strong></p></li><li><p>代码</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">main.js</span><br><span class="line">&#x2F;&#x2F; 1.使用commonjs的模块化规范</span><br><span class="line">const &#123;add, mul&#125; &#x3D; require(&#39;.&#x2F;mathUtils.js&#39;)</span><br><span class="line"></span><br><span class="line">console.log(add(20, 30));</span><br><span class="line">console.log(mul(20, 30));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.使用ES6的模块化的规范</span><br><span class="line">import &#123;name, age, height&#125; from &quot;.&#x2F;info&quot;;</span><br><span class="line"></span><br><span class="line">console.log(name);</span><br><span class="line">console.log(age);</span><br><span class="line">console.log(height);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info.js</span><br><span class="line">&#x2F;&#x2F; ES6模块导出</span><br><span class="line">const name &#x3D; &#39;张三&#39;;</span><br><span class="line">const age &#x3D; 12;</span><br><span class="line">const height &#x3D; 1.88</span><br><span class="line">export &#123; name, age, height &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function add(num1, num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">function mul(num1, num2) &#123;</span><br><span class="line">  return num1 * num2;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; CommonJS模块化导出</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  add,</span><br><span class="line">  mul</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4-webpack的配置"><a href="#7-4-webpack的配置" class="headerlink" title="7.4 webpack的配置"></a>7.4 <a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack的配置</a></h2><ul><li><p>创建过程:</p><ul><li>webpack的基本使用中,打包webpack需要手动输入打包的源文件和目标文件,通过配置webpack.config.js文件,进行打包时直接输入webpack即可</li><li>文件根目录下新建<strong>webpack.config.js</strong>文件(文件名称是固定)</li><li>通过<code>npm init -y</code>生成node的管理报package.json来存储依赖</li><li>开发过程中尽量安装局部webpack<code>npm install webpack@3.6.0  --save-dev</code></li></ul></li><li><p>创建之后的目录</p></li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509153209061.png" alt="image-20200509153209061"></p><ul><li><p>webpack.config.js配置</p><ul><li><p>此时可以直接在终端输入webpack进行自动化构建</p><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509154513560.png" alt="image-20200509154513560"></p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入node内置模块,path,获取当前文件的绝对路径</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 配置webpack</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;main.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    &#x2F;&#x2F;resove()用于路径的拼接</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;bundle.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://www.jianshu.com/p/4f81f01389dd" target="_blank" rel="noopener">路径拼接path.join 和 path.resolve的区别</a></p></li><li><p>运行方式1:通过<strong>node_modules/.bin/webpack启动webpack打包</strong></p></li><li><p>当用webpack的同时打包多个文件时,<strong>可以在package.json中设置命令别称</strong></p><ul><li><strong>“scripts”</strong>表示命令别名,如果命令太长可以通过别名的方式执行该行语句:<strong>npm run test(别名名称)</strong></li><li>在终端执行:<code>npm run 别名名称即可</code></li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509155337989.png" alt="image-20200509155337989"></p><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509155501379.png" alt="image-20200509155501379"></p></li><li><p>小结:配置完webpack之后,启动的方式有三种</p><ul><li>方式1:<code>webpack</code></li><li>方式2:<code>node_modules/.bin/webpack</code>启动webpack打包</li><li>方式3:别名<code>npm run 别名名称</code></li></ul></li></ul><h2 id="7-5-loaders的使用-加载文件"><a href="#7-5-loaders的使用-加载文件" class="headerlink" title="7.5 loaders的使用(加载文件)"></a>7.5 <a href="https://www.webpackjs.com/loaders/" target="_blank" rel="noopener">loaders的使用</a>(加载文件)</h2><ul><li>webpack中,不仅仅是<strong>JavaScript文件</strong>，我们的<strong>CSS、图片、json文件等等在webpack中都可以被当做模块来使用</strong>,因此是使用过程在中都可以直接通过<strong>CommonJS来进行模块化开发</strong></li><li>主要是<strong>用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。</strong></li><li><strong>问题:</strong><ul><li><strong>加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件</strong></li><li><strong>webpack中不支持这种转化</strong></li></ul></li><li><strong>解决方案:给webpack扩展对应的loader</strong>,loader相当于gulp中的task</li><li><strong>loaders使用过程:</strong><ul><li>通过<strong>npm安装</strong>需要使用的loader</li><li>在<strong>webpack.config.js</strong>中的<strong>modules关键字下进行配置</strong></li></ul></li></ul><h3 id="webpack中css的配置"><a href="#webpack中css的配置" class="headerlink" title="webpack中css的配置"></a><strong>webpack中css的配置</strong></h3><ul><li><p>css文件处理准备工作</p><ul><li>在src目录中，创建一个css文件，其中创建一个normal.css文件。     </li><li>重新组织文件的目录结构，将零散的js文件放在一个js文件夹中。</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509164704563.png" alt="image-20200509164704563"></p></li><li><p>在入口文件main.js中引用文件</p><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509164732538.png" alt="image-20200509164732538"></p></li><li><p>下载css文件处理的loader,按照官方配置webpack.config.js文件</p><ul><li>注意style-loader和css-loader写在同一个数组中要将style写在后面,</li><li><strong>因为webpack在读取使用的loader的过程中，是按照从右向左的顺序读取的</strong>。</li><li>``use[“style-loader”, “css-loader”]`</li><li>test:后面是正则表达式</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader --save-dev</span><br><span class="line">npm install --save-dev css-loader</span><br><span class="line">webpack.config.js</span><br><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; loader: &quot;style-loader&quot; &#125;,</span><br><span class="line">          &#123; loader: &quot;css-loader&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509165030453.png" alt="image-20200509165030453"></p><h3 id="webpack中less文件的处理"><a href="#webpack中less文件的处理" class="headerlink" title="webpack中less文件的处理"></a><strong>webpack中less文件的处理</strong></h3><ul><li>安装对应的loaders,这里要注意版本的问题装4.1版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader less</span><br><span class="line">安装低版本</span><br><span class="line">npm install --save-dev less-loader@4.1.0 less</span><br></pre></td></tr></table></figure><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509170908479.png" alt="image-20200509170908479"></p><h3 id="图片文件处理-url-loader-file-loader"><a href="#图片文件处理-url-loader-file-loader" class="headerlink" title="图片文件处理-url-loader/file-loader"></a>图片文件处理-url-loader/file-loader</h3><ul><li>图片处理，我们使用url-loader来处理，依然先安装url-loader</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev url-loader</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: &#x2F;\.(png|jpg|gif)$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;url-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: 8192</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li><p>limit属性的作用，</p><ul><li>当图片小于limit时，对图片进行base64编码,返回的是一个编码不需要单独的文件存储,图片大小的限制,加载额图片在这个限制之内</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509181125732.png" alt="image-20200509181125732"></p><ul><li><p>当图片大于limit,会通过<strong>file-loader</strong>进行处理,这里下载file-loader,这里返回的是一个文件需要单独存储</p><ul><li>再次打包，就会发现dist文件夹下多了一个图片文件,这里需要修改路径来引用生成文件,webpack.config.js文件下的output下设置url路径,文件在加载的时候回自动拼接这个路径</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509182325377.png" alt="image-20200509182325377"></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev file-loader</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module配置</span><br><span class="line">&#123;</span><br><span class="line">        test: &#x2F;\.(png|jpg|gif)$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;file-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              &#x2F;&#x2F; 设置图片保存的位置</span><br><span class="line">              name: &#39;img&#x2F;[name].[hash:8].[ext]&#39;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>发现url-loader和file-loader同时存在file-loader不显示,去掉url-loader即可解决</li><li>file-loader加载之后会生成新的图片在dist中,可以对图片位置的设置,我们可以在options中添加上如下选项：<ul><li>img：文件要打包到的文件夹</li><li>name：获取图片原来的名字，放在该位置</li><li>hash:8：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</li><li>ext：使用图片原来的扩展名</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: &#39;img&#x2F;[name].[hash:8].[ext]&#39;   [name]图片原先的名字,[hash:8]取8为哈希值,[.ext]动态获取后缀名称</span><br></pre></td></tr></table></figure></li><li><p>在加载图片时会重新加载图片处理模块</p></li></ul><h3 id="ES6语法处理-gt-ES5"><a href="#ES6语法处理-gt-ES5" class="headerlink" title="ES6语法处理-&gt;ES5"></a><strong>ES6语法处理</strong>-&gt;ES5</h3><ul><li>webpack打包的js文件，发现写的ES6语法并没有转成ES5，那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码。</li><li>将ES6的语法转成ES5，那么就需要使用<a href="https://babeljs.io/docs/en/learn" target="_blank" rel="noopener">babel</a>,在webpack中，我们直接使用babel对应的loader就可以了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module配置</span><br><span class="line">&#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;(node_modules|bower_components)&#x2F;,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &#39;babel-loader&#39;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [&#39;es2015&#39;],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><ul><li><p>重新打包，查看bundle.js文件，发现其中的内容变成了ES5的语法</p></li><li><p>小结</p></li></ul><p>完整代码:webpack.config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入node内置模块,path,获取当前文件的绝对路径</span><br><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 配置webpack</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;main.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    &#x2F;&#x2F;resove()用于路径的拼接</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;bundle.js&#39;,</span><br><span class="line">    &#x2F;&#x2F; 设置url路径</span><br><span class="line">    publicPath: &quot;dist&#x2F;&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#x2F;&#x2F;css</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: &quot;style-loader&quot; &#x2F;&#x2F; creates style nodes from JS strings</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: &quot;css-loader&quot; &#x2F;&#x2F; translates CSS into CommonJS</span><br><span class="line">        &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F;less</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.less$&#x2F;,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: &quot;style-loader&quot; &#x2F;&#x2F; creates style nodes from JS strings</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: &quot;css-loader&quot; &#x2F;&#x2F; translates CSS into CommonJS</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          loader: &quot;less-loader&quot; &#x2F;&#x2F; compiles Less to CSS</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F;url-loader和file-loader同时存在,file-loader的图片不加载</span><br><span class="line">      &#x2F;&#x2F; &#123;</span><br><span class="line">      &#x2F;&#x2F;   test: &#x2F;\.(png|jpg|gif)$&#x2F;,</span><br><span class="line">      &#x2F;&#x2F;   use: [</span><br><span class="line">      &#x2F;&#x2F;     &#123;</span><br><span class="line">      &#x2F;&#x2F;       loader: &#39;url-loader&#39;,</span><br><span class="line">      &#x2F;&#x2F;       options: &#123;</span><br><span class="line">      &#x2F;&#x2F;         limit: 1300,</span><br><span class="line">      &#x2F;&#x2F;         name: &#39;img&#x2F;[name].[hash:8].[ext]&#39;</span><br><span class="line">      &#x2F;&#x2F;       &#125;</span><br><span class="line">      &#x2F;&#x2F;     &#125;</span><br><span class="line">      &#x2F;&#x2F;   ]</span><br><span class="line">      &#x2F;&#x2F; &#125;,</span><br><span class="line">      &#x2F;&#x2F;file-loader</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.(png|jpg|gif)$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#39;file-loader&#39;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              &#x2F;&#x2F; 设置图片保存的位置</span><br><span class="line">              name: &#39;img&#x2F;[name].[hash:8].[ext]&#39;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;(node_modules|bower_components)&#x2F;,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &#39;babel-loader&#39;,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [&#39;es2015&#39;],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-6-webpack中配置Vue"><a href="#7-6-webpack中配置Vue" class="headerlink" title="7.6 webpack中配置Vue"></a>7.6 webpack中配置Vue</h2><ul><li>webpack环境中集成Vuejs</li></ul><h3 id="7-6-1-webpack中vue配置和使用"><a href="#7-6-1-webpack中vue配置和使用" class="headerlink" title="7.6.1 webpack中vue配置和使用"></a>7.6.1 webpack中vue配置和使用</h3><ul><li><p>使用步骤:</p><ul><li>在项目中使用Vuejs，那么必然需要对其有依赖，所以需要先进行<strong>安装</strong>,后<strong>续是在实际项目中也会使用vue的，所以并不是开发时依赖,安装时去掉-dev</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue --save</span><br></pre></td></tr></table></figure><ul><li><strong>导入</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;&#x2F;&#x2F;这里通过ES6方式导入,也可以 通过commonjs的方式,文件默认查找是在node_modules中查找文件</span><br></pre></td></tr></table></figure><ul><li>后面就和以前的开发流程一样进行模块化<strong>开发</strong>(<strong>注意这里使用vue是通过npm的方式进行安装使用</strong>)</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509230711965.png" alt="image-20200509230711965"></p><ul><li><p><strong>打包运行</strong>vue时会报错</p><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509232029804.png" alt="image-20200509232029804"></p><ul><li><p><strong>分析原因</strong>:<a href="http://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue</a><a href="http://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">不同版本构建</a>,</p><ul><li>runtime-only:这个版本的vue只负责运行不负责编译,里面的模板template会报错(默认是这个版本的vue)</li><li>runtime-compiler:这个版本的vue负责编译,需要在webpack.config.js中指定vue的版本</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200509232850340.png" alt="image-20200509232850340"></p></li><li><p><strong>解决方案</strong>:在webpack.config.js文件中指定runtime-compile版本</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#39;.&#x2F;src&#x2F;main.js&#39;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    &#x2F;&#x2F;resove()用于路径的拼接</span><br><span class="line">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class="line">    filename: &#39;bundle.js&#39;,</span><br><span class="line">    &#x2F;&#x2F; 设置url路径</span><br><span class="line">    publicPath: &quot;dist&#x2F;&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;&#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    &#x2F;&#x2F;alias:重命名</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="7-6-2-el和template的区别"><a href="#7-6-2-el和template的区别" class="headerlink" title="7.6.2 el和template的区别"></a>7.6.2 el和template的区别</h3><ul><li><p>二者都是options中的属性</p></li><li><p>template属性:用来修改el绑定的模板的内容,他会直接替换掉里面的内容</p></li><li><p>el和template 的关系</p><ul><li>el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等</li><li>Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板</li><li>目的:这样做之后我们就不需要在以后的开发中再次操作index.html，只需要在template中写入对应的标签即可</li><li>template模板部分进行抽离:分成三部分书写：template、script、style，结构变得非常清晰。写在.vue当中</li></ul></li></ul><h4 id="vue文件封装处理"><a href="#vue文件封装处理" class="headerlink" title=".vue文件封装处理"></a>.vue文件封装处理</h4><ul><li><p>解析.vue文件需要安装n安装vue-loader(文件加载)和vue-template-compiler(模板渲染)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-loader vue-template-compiler --save-dev</span><br></pre></td></tr></table></figure><ul><li><strong>注意:这里安装的是最新版本的vue-loader,版本15必须添加插件plugin才能运行,</strong></li><li>方案2:安装^13.0.0版本<ul><li>在package.json文件中修改安装版本<code>&quot;vue-loader&quot;: &quot;^13.0.0&quot;,</code>,cmd中输入<code>npm install</code>安装</li></ul></li></ul></li><li><p>修改webpack.config.js的配置文件,这里还可以在resolve属性设置一下后缀名</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;vue-loader,module属性</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.vue$&#x2F;,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; loader: &#39;vue-loader&#39; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line"> resolve属性中</span><br><span class="line"> &#x2F;&#x2F; 设置后缀名称</span><br><span class="line">    extensions: [&#39;.js&#39;, &#39;.css&#39;, &#39;.less&#39;, &#39;.vue&#39;],</span><br></pre></td></tr></table></figure><ul><li>使用过程中在.vue文件中,组件中根部添加的属性行name,必须在data属性中有声明</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200510081008199.png" alt="image-20200510081008199"></p><ul><li>vue文件中包括了模板和js代码以及样式的编写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;cpn &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Cpn from &quot;.&#x2F;Cpn&quot;;</span><br><span class="line">&#x2F;&#x2F; ES6的模块化规范方式</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F; 注意这里添加了name属性,和文件名称相同</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;vue配置22&quot;,</span><br><span class="line">      name: &quot;spark&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Cpn</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick() &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h2 &#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-7-plugin的使用"><a href="#7-7-plugin的使用" class="headerlink" title="7.7 plugin的使用"></a>7.7 plugin的使用</h2><ul><li>plugin定义<ul><li>plugin是插件，通常是<strong>用于对某个现有的架构进行扩展</strong>。</li><li>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</li></ul></li><li>nloader和plugin区别<ul><li>loader主要用于转换某些类型的模块，它是一个转换器,用于加载文件</li><li>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</li></ul></li><li><strong>plugin的使用过程：</strong><ul><li>通过npm<strong>安装</strong>需要使用的plugins(某些webpack已经内置的插件不需要安装)</li><li>在webpack.config.js中的plugins属性中<strong>配置插件,</strong>plugin这里是一个数组</li></ul></li></ul><h3 id="添加版权插件"><a href="#添加版权插件" class="headerlink" title="添加版权插件"></a>添加版权插件</h3><ul><li>为打包的文件添加版权声明     </li><li>webpack.config.js配置</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200510082647315.png" alt="image-20200510082647315"></p><ul><li>重新打包程序：查看bundle.js文件的头部，看到如下信息</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200510083812887.png" alt="image-20200510083812887"></p><h3 id="打包html的plugin-HtmlWebpackPlugin"><a href="#打包html的plugin-HtmlWebpackPlugin" class="headerlink" title="打包html的plugin(HtmlWebpackPlugin)"></a>打包html的plugin(<strong>HtmlWebpackPlugin</strong>)</h3><ul><li><p>作用:将index.html文件打包到dist文件夹中，这个时候就可以使用<strong>HtmlWebpackPlugin</strong>插件</p><ul><li>自动生成一个index.html文件(可以指定模板来生成)</li><li>将打包的js文件，自动通过script标签插入到body中</li></ul></li><li><p>使用</p><ul><li>不是内置插件,需要下载,注意这里需要下载3.2.0版本的才不会报错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin@3.2.0 --save-dev</span><br></pre></td></tr></table></figure><ul><li>webpack中配置并引入</li><li>index.html中删除script标签</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B04/image-20200510090004895.png" alt="image-20200510090004895"></p></li></ul><h3 id="js压缩的Plugin-发布时的配置"><a href="#js压缩的Plugin-发布时的配置" class="headerlink" title="js压缩的Plugin(发布时的配置)"></a>js压缩的Plugin(发布时的配置)</h3><ul><li><p>对<strong>打包的js文件进行压缩</strong>使用一个第三方的插件<strong>uglifyjs-webpack-plugin</strong>，</p><ul><li>并且版本号指定1.1.1，和CLI2保持一致,webpack版本是3.6.0</li></ul></li><li><p>使用</p><ul><li>下载:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin@1.1.1 --save-dev</span><br></pre></td></tr></table></figure><ul><li>webpack配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const uglifyjsWebpackPlugin &#x3D; require(&#39;uglifyjs-webpack-plugin&#39;);</span><br><span class="line">plugin属性</span><br><span class="line"> new uglifyjsWebpackPlugin(),</span><br></pre></td></tr></table></figure><ul><li>使用后js文件就会被压缩,注意这个<strong>插件是在发布的时候使用的,在开发阶段不建议使用</strong></li></ul></li></ul><h2 id="7-8-搭建本地服务器-开发时的配置"><a href="#7-8-搭建本地服务器-开发时的配置" class="headerlink" title="7.8 搭建本地服务器(开发时的配置)"></a>7.8 搭建本地服务器(开发时的配置)</h2><ul><li><p>目的:<strong>修改了代码之后实现浏览器自动刷新</strong>(不需要在webpack打包,他会自动进行打包)</p><ul><li><strong>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果,用本地服务器会自动打包webpack</strong>,</li><li><strong>vscode中<a href="https://blog.csdn.net/chy555chy/article/details/104410785" target="_blank" rel="noopener">live Server插件</a>也可以实现自动刷新浏览器</strong>,<strong>这里必须进行webpack的打包</strong><ul><li>为本地前端开发，提供了一个临时搭建的后台服务</li><li>修改文件保存后，浏览器自动刷新显示</li></ul></li></ul></li><li><p>使用步骤</p><ul><li><p>需要<strong>安装</strong>这个单独的模块,注意版本的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server@2.9.3</span><br></pre></td></tr></table></figure></li><li><p><strong>配置</strong>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：</p><ul><li><p>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写./dist</p></li><li><p>port：端口号</p></li><li><p>inline：页面实时刷新</p></li><li><p>historyApiFallback：在<a href="https://juejin.im/post/5a0ea4ec6fb9a0450407725c" target="_blank" rel="noopener">SPA页面</a>中，依赖HTML5的history模式</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;配置本地服务器webpack.config.js</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    &#x2F;&#x2F; 选定服务器运行的文件夹</span><br><span class="line">    contentBase: &#39;.&#x2F;dist&#39;,</span><br><span class="line">    &#x2F;&#x2F; 设置是否实时自动刷新</span><br><span class="line">    inline: true</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;配置script运行服务器package.json</span><br><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --open&quot;</span><br><span class="line">--open表示自动打开页面</span><br><span class="line"></span><br><span class="line">直接在cmd输入npm run dev即可</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-9-webpack配置抽离"><a href="#7-9-webpack配置抽离" class="headerlink" title="7.9 webpack配置抽离"></a>7.9 webpack配置抽离</h2><ul><li><p>webpack.config.js中存在开发配置和生产配置,比较繁琐,这里需要将这两中配置分别进行抽离</p></li><li><p>在项目根目录下新建build文件夹,文件夹找那个分别创建三个文件</p><ul><li>base.config.js:存放公共部分</li><li>dev.config.js:开发配置</li><li>prod.config.js:生成(发布)配置</li></ul></li><li><p>创建完成之后需要在不同的开发环境中<strong>合并基础配置和新添加的配置</strong>,此时需要依赖第三方插件webpack-merge</p><ul><li>下载<code>npm install webpack-merge --save-dev</code>开发时依赖</li><li>dev.config.js和prod.config.js中导入插件和基础配置并合并</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dev.config.js</span><br><span class="line">&#x2F;&#x2F; 需要下载第三方插件webpack-merge合并不同开发环境下的配置文件</span><br><span class="line">const webpackMerge &#x3D; require(&#39;webpack-merge&#39;);</span><br><span class="line">&#x2F;&#x2F; 导入基本配置</span><br><span class="line">const baseConfig &#x3D; require(&#39;.&#x2F;base.config&#39;);</span><br><span class="line">module.exports &#x3D; webpackMerge(baseConfig, &#123;</span><br><span class="line">  &#x2F;&#x2F;配置本地服务器,发布时配置</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    &#x2F;&#x2F; 选定服务器运行的文件夹</span><br><span class="line">    contentBase: &#39;.&#x2F;dist&#39;,</span><br><span class="line">    &#x2F;&#x2F; 设置是否实时自动刷新</span><br><span class="line">    inline: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">),另外一个类似</span><br></pre></td></tr></table></figure></li><li><p>合并之后需要在package.json文件中的script标签中运行命令中<strong>添加配置文件的路径</strong>(默认路径是根目录下的webpack.config.js),通过<code>--config 路径名称的方式</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config .&#x2F;build&#x2F;prod.config.js&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --open --config .&#x2F;build&#x2F;dev.config.js&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>然后直接在cmd中<strong>运行</strong>命令npm run 别名即可,此时可以<strong>删除wenpack.config.js文件</strong>了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
webpack的详细学习,安装和使用,模块化的开发,vue的配置
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="前端" scheme="https://sparkparis.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://sparkparis.github.io/tags/js/"/>
    
      <category term="webpack" scheme="https://sparkparis.github.io/tags/webpack/"/>
    
      <category term="less" scheme="https://sparkparis.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记3-模块化开发</title>
    <link href="https://sparkparis.github.io/2020/05/09/Vue%E7%AC%94%E8%AE%B03/"/>
    <id>https://sparkparis.github.io/2020/05/09/Vue%E7%AC%94%E8%AE%B03/</id>
    <published>2020-05-08T16:04:56.000Z</published>
    <updated>2020-05-09T06:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer">模块化开发的必要,模块化规范CommonJS和ES6的modules的使用<a id="more"></a><!-- TOC --><ul><li><a href="#6-模块化开发---toc---">6 模块化开发<!-- TOC --></a><ul><li><a href="#61-使用模块化原因">6.1 使用模块化原因</a></li><li><a href="#62-使用模块作为出口">6.2 使用模块作为出口</a></li><li><a href="#63-常见的模块化规范"><strong>6.3 常见的模块化规范</strong></a></li></ul></li><li><a href="#631-commonjs">6.3.1 CommonJs</a></li><li><a href="#632-es6的modules">6.3.2 ES6的Modules</a><ul><li><a href="#export局部导出"><strong>export局部导出</strong></a></li><li><a href="#import外部导入"><strong>import外部导入</strong></a></li></ul></li></ul><!-- /TOC --><h3 id="6-模块化开发"><a href="#6-模块化开发" class="headerlink" title="6 模块化开发"></a>6 模块化开发<!-- TOC --></h3><ul><li><p>ES5中不存在模块化,ES6自带模块化</p><h2 id="6-1-使用模块化原因"><a href="#6-1-使用模块化原因" class="headerlink" title="6.1 使用模块化原因"></a>6.1 使用模块化原因</h2></li><li><p>没有模块化出现的问题</p><ul><li>在网页开发的早期，js制作作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的。那个时候的代码是怎么写的呢？直接将代码写在<code>&lt;script&gt;</code>标签中即可</li><li>随着ajax异步请求的出现，慢慢形成了前后端的分离</li><li>客户端需要完成的事情越来越多，代码量也是与日俱增。</li><li>为了应对代码量的剧增，我们通常会将代码组织在多个js文件中，进行维护。</li><li>但是这种维护方式，依然不能避免一些灾难性的问题。<ul><li>比如全局变量同名问题：看右边的例子</li></ul></li><li>另外，这种代码的编写方式对js文件的依赖顺序几乎是强制性的</li><li>但是当js文件过多，比如有几十个的时候，弄清楚它们的顺序是一件比较同时的事情。而且即使你弄清楚顺序了，也不能避免上面出现的这种尴尬问题的发生。</li></ul></li><li><p>解决方案:<strong>匿名函数</strong></p><ul><li>使用匿名函数解决重名问题,每个js文件中的内容放在匿名函数内部<code>;(function(){})()</code></li></ul></li></ul><h2 id="6-2-使用模块作为出口"><a href="#6-2-使用模块作为出口" class="headerlink" title="6.2 使用模块作为出口"></a>6.2 使用模块作为出口</h2><ul><li><p>解决的问题:在全局中可以访问到模块化文件中的局部变量</p></li><li><p>模块化基本的封装:</p><ul><li>给对象添加各种需要暴露到外面的属性和方法(不需要暴露的直接定义即可)。最后将这个对象返回，并且在外面使用时接收</li><li>在外部通过返回的对象调用局部的属性和方法来达到访问文件局部变量的目的</li></ul></li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B03/image-20200509072701998.png" alt="image-20200509072701998"></p><h2 id="6-3-常见的模块化规范"><a href="#6-3-常见的模块化规范" class="headerlink" title="6.3 常见的模块化规范"></a><strong>6.3 常见的模块化规范</strong></h2><ul><li><strong>常见的模块化规范:CommonJS、AMD、CMD，也有ES6的Modules</strong></li></ul><h3 id="6-3-1-CommonJs-动态加载"><a href="#6-3-1-CommonJs-动态加载" class="headerlink" title="6.3.1 CommonJs(动态加载)"></a>6.3.1 CommonJs(动态加载)</h3><ul><li><p>动态加载:在导入就会执行</p></li><li><p>nodejs中使用CommonJS模块化,开发中大多数采用CommonJS模块化规范</p></li><li><p>模块化有两个核心:导出和导入</p></li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B03/image-20200509072943056.png" alt="image-20200509072943056"></p><ul><li>需要在node环境中使用,需要node环境进行解析</li></ul><h3 id="6-3-2-ES6的Modules-静态加载"><a href="#6-3-2-ES6的Modules-静态加载" class="headerlink" title="6.3.2 ES6的Modules(静态加载)"></a>6.3.2 ES6的Modules(静态加载)</h3><ul><li><p>静态加载:属于页面加载</p></li><li><p>学习ES6中的module在vscode中,需要安装live Server插件,否则会有<strong>跨域问题</strong>,<a href="https://blog.csdn.net/chy555chy/article/details/104410785" target="_blank" rel="noopener">详细的安装</a>安装完成之后重新启动vscode软件</p><ul><li>settings中的配置信息如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;liveServer.settings.donotShowInfoMsg&quot;: true,</span><br><span class="line">&quot;liveServer.settings.donotVerifyTags&quot;: true,</span><br><span class="line">&quot;liveServer.settings.root&quot;: &quot;&#x2F;&quot;,</span><br><span class="line">&quot;liveServer.settings.CustomBrowser&quot;: &quot;chrome&quot;,</span><br><span class="line">&quot;liveServer.settings.host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">&quot;liveServer.settings.port&quot;: 5500,</span><br><span class="line">&quot;liveServer.settings.NoBrowser&quot;: true,</span><br><span class="line">&quot;liveServer.settings.AdvanceCustomBrowserCmdLine&quot;: &quot;&quot;,</span><br></pre></td></tr></table></figure><ul><li><p>开启live Server的方式</p><ul><li>右键点击html文件run live Serer</li><li>编辑器右下角的Go alive,再次地单击就会关闭</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B03/image-20200509102216290.png" alt="image-20200509102216290"></p></li><li><p>可是实现html页面的实时刷新</p></li></ul></li><li><p><a href="https://www.cnblogs.com/xiaohuochai/p/7272324.html#anchor8" target="_blank" rel="noopener">ES6中models的使用步骤</a></p><ul><li>在html中引入js文件并添加<code>type=module</code>的属性</li><li>在js文件中通过export导出文件</li><li>在js文件中通过import引入文件</li></ul></li></ul><h4 id="export局部导出"><a href="#export局部导出" class="headerlink" title="export局部导出"></a><strong>export局部导出</strong></h4><ul><li>导出方式:<ul><li>单独导出:    </li><li>一次性导出:<code>export {color,name,magicNumbe}</code></li></ul></li><li><code>export default</code>:导出未命名的功能,每个js模块文件中只能含有一个export default,在接收的文件中可以自己命名<ul><li>export default在同一个模块中，不允许同时存在多个</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导出数据:单独导出</span><br><span class="line">export var color &#x3D; &quot;red&quot;;</span><br><span class="line">export let name &#x3D; &quot;Nicholas&quot;;</span><br><span class="line">export const magicNumber &#x3D; 7;</span><br><span class="line">&#x2F;&#x2F;一次性导出</span><br><span class="line">export &#123;color,name,magicNumbe&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导出函数</span><br><span class="line">export function sum(num1, num2) &#123;</span><br><span class="line">    return num1 + num1;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 导出类</span><br><span class="line">export class Rectangle &#123;</span><br><span class="line">    constructor(length, width) &#123;</span><br><span class="line">        this.length &#x3D; length;</span><br><span class="line">        this.width &#x3D; width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 此函数为模块私有</span><br><span class="line">function subtract(num1, num2) &#123;</span><br><span class="line">    return num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 定义一个函数……</span><br><span class="line">function multiply(num1, num2) &#123;</span><br><span class="line">    return num1 * num2;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; ……稍后将其导出</span><br><span class="line">export &#123; multiply &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出未命名的</span><br><span class="line">export default function()&#123;console.log(&#39;default function&#39;)&#125;</span><br><span class="line">&#x2F;&#x2F;引入的js文件中可以自己命名</span><br><span class="line">import myfun from &#39;.&#x2F;a.js&#39;</span><br></pre></td></tr></table></figure><h4 id="import外部导入"><a href="#import外部导入" class="headerlink" title="import外部导入"></a><strong>import外部导入</strong></h4><ul><li><p>使用<strong>export</strong>指令导出了模块对外提供的接口，下面我们就可以通过<strong>import</strong>命令来加载对应的这个模块</p></li><li><p>使用步骤:</p><ul><li>首先，我们需要在HTML代码中<strong>引入两个**</strong>js<strong>**文件</strong>，并且类型需要设置为<strong>module</strong></li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B03/image-20200509095429226.png" alt="image-20200509095429226"></p><ul><li>import指令用于导入模块中的内容，比如main.js的代码</li></ul><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B03/image-20200509095504378.png" alt="image-20200509095504378"></p><ul><li><p>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦</p><ul><li><p>通过<code>*</code>可以导入模块中所有的export变量*</p></li><li><p><em>但是通常情况下我们需要给</em>起一个别名<code>as</code>，方便后续的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as 别名 from &#39;xx.js&#39;</span><br><span class="line">使用的时候通过 </span><br><span class="line">别名.属性名称使用变量</span><br></pre></td></tr></table></figure><p><img src="/2020/05/09/Vue%E7%AC%94%E8%AE%B03/image-20200509095718163.png" alt="image-20200509095718163"></p></li></ul></li><li><p>接收export default的未定义功能</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import 自定义名称 from &#39;xx.js&#39;</span><br><span class="line">通过自定义的名称调用export default中导出的数据</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导出未定义功能</span><br><span class="line">export default function (param) &#123;</span><br><span class="line">  console.log(param)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 接收自定义名称数据</span><br><span class="line">import myFun from &#39;.&#x2F;a.js&#39;</span><br><span class="line">myFun(&#39;hello&#39;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
模块化开发的必要,模块化规范CommonJS和ES6的modules的使用
    
    </summary>
    
    
      <category term="Vue" scheme="https://sparkparis.github.io/categories/Vue/"/>
    
    
      <category term="前端" scheme="https://sparkparis.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="https://sparkparis.github.io/tags/js/"/>
    
      <category term="commonJs" scheme="https://sparkparis.github.io/tags/commonJs/"/>
    
  </entry>
  
</feed>
